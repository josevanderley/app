// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/services/undo_manager.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__services__undo_manager_dart(dart_sdk, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const system_channels = packages__flutter__src__services__text_editing_delta$46dart.src__services__system_channels;
  const message_codec = packages__flutter__src__services__text_editing_delta$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__text_editing_delta$46dart.src__services__platform_channel;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var undo_manager = Object.create(dart.library);
  var services = Object.create(dart.library);
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    IdentityMapOfString$bool: () => (T.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "undo",
        [_Enum_index]: 0
      }, undo_manager.UndoDirection.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "redo",
        [_Enum_index]: 1
      }, undo_manager.UndoDirection.prototype));
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2], undo_manager.UndoDirection);
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:flutter/src/services/undo_manager.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/services/undo_manager.dart"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  undo_manager.UndoDirection = class UndoDirection extends core._Enum {
    [_enumToString]() {
      return "UndoDirection." + this[_name];
    }
  };
  (undo_manager.UndoDirection.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(undo_manager.UndoDirection).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = undo_manager.UndoDirection.prototype;
  dart.addTypeTests(undo_manager.UndoDirection);
  dart.addTypeCaches(undo_manager.UndoDirection);
  dart.setMethodSignature(undo_manager.UndoDirection, () => dart.global.Object.setPrototypeOf({[_enumToString]: dart.fnType(core.String, [])}, dart.getMethods(dart.global.Object.getPrototypeOf(undo_manager.UndoDirection))));
  dart.setLibraryUri(undo_manager.UndoDirection, I[0]);
  dart.setStaticFieldSignature(undo_manager.UndoDirection, () => ['values', 'undo', 'redo']);
  dart.defineLazy(undo_manager.UndoDirection, {
    /*undo_manager.UndoDirection.values*/get values() {
      return C[0] || CT.C0;
    },
    /*undo_manager.UndoDirection.undo*/get undo() {
      return C[1] || CT.C1;
    },
    /*undo_manager.UndoDirection.redo*/get redo() {
      return C[2] || CT.C2;
    }
  }, false);
  var __UndoManager__channel = dart.privateName(undo_manager, "_#UndoManager#_channel");
  var _currentClient = dart.privateName(undo_manager, "_currentClient");
  var _channel = dart.privateName(undo_manager, "_channel");
  var _handleUndoManagerInvocation = dart.privateName(undo_manager, "_handleUndoManagerInvocation");
  var _setUndoState = dart.privateName(undo_manager, "_setUndoState");
  var _toUndoDirection = dart.privateName(undo_manager, "_toUndoDirection");
  undo_manager.UndoManager = class UndoManager extends core.Object {
    static ['_#_#tearOff']() {
      return new undo_manager.UndoManager.__();
    }
    static setChannel(newChannel) {
      if (!dart.fn(() => {
        let t$362;
        undo_manager.UndoManager._instance[_channel] = (t$362 = newChannel, (() => {
          t$362.setMethodCallHandler(dart.bind(undo_manager.UndoManager._instance, _handleUndoManagerInvocation));
          return t$362;
        })());
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 50, 12, "() {\r\n      _instance._channel = newChannel..setMethodCallHandler(_instance._handleUndoManagerInvocation);\r\n      return true;\r\n    }()");
    }
    static set client(client) {
      undo_manager.UndoManager._instance[_currentClient] = client;
    }
    static get client() {
      return undo_manager.UndoManager._instance[_currentClient];
    }
    static setUndoState(opts) {
      let canUndo = opts && 'canUndo' in opts ? opts.canUndo : false;
      let canRedo = opts && 'canRedo' in opts ? opts.canRedo : false;
      undo_manager.UndoManager._instance[_setUndoState]({canUndo: canUndo, canRedo: canRedo});
    }
    get [_channel]() {
      let t$362;
      t$362 = this[__UndoManager__channel];
      return t$362 == null ? dart.throw(new _internal.LateError.fieldNI("_channel")) : t$362;
    }
    set [_channel](_channel$35param) {
      this[__UndoManager__channel] = _channel$35param;
    }
    [_handleUndoManagerInvocation](methodCall) {
      return async.async(dart.dynamic, (function* _handleUndoManagerInvocation() {
        let method = methodCall.method;
        let args = core.List.as(methodCall.arguments);
        if (method === "UndoManagerClient.handleUndo") {
          if (!(this[_currentClient] != null)) dart.assertFailed("There must be a current UndoManagerClient.", I[1], 84, 14, "_currentClient != null");
          dart.nullCheck(this[_currentClient]).handlePlatformUndo(this[_toUndoDirection](core.String.as(args[$_get](0))));
          return;
        }
        dart.throw(new message_codec.MissingPluginException.new());
      }).bind(this));
    }
    [_setUndoState](opts) {
      let canUndo = opts && 'canUndo' in opts ? opts.canUndo : false;
      let canRedo = opts && 'canRedo' in opts ? opts.canRedo : false;
      this[_channel].invokeMethod(dart.void, "UndoManager.setUndoState", new (T.IdentityMapOfString$bool()).from(["canUndo", canUndo, "canRedo", canRedo]));
    }
    [_toUndoDirection](direction) {
      switch (direction) {
        case "undo":
          {
            return undo_manager.UndoDirection.undo;
          }
        case "redo":
          {
            return undo_manager.UndoDirection.redo;
          }
      }
      dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown undo direction: " + direction)])));
    }
  };
  (undo_manager.UndoManager.__ = function() {
    this[__UndoManager__channel] = null;
    this[_currentClient] = null;
    this[_channel] = system_channels.SystemChannels.undoManager;
    this[_channel].setMethodCallHandler(dart.bind(this, _handleUndoManagerInvocation));
  }).prototype = undo_manager.UndoManager.prototype;
  dart.addTypeTests(undo_manager.UndoManager);
  dart.addTypeCaches(undo_manager.UndoManager);
  dart.setMethodSignature(undo_manager.UndoManager, () => dart.global.Object.setPrototypeOf({
    [_handleUndoManagerInvocation]: dart.fnType(async.Future, [message_codec.MethodCall]),
    [_setUndoState]: dart.fnType(dart.void, [], {canRedo: core.bool, canUndo: core.bool}, {}),
    [_toUndoDirection]: dart.fnType(undo_manager.UndoDirection, [core.String])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(undo_manager.UndoManager))));
  dart.setStaticMethodSignature(undo_manager.UndoManager, () => ['setChannel', 'setUndoState']);
  dart.setGetterSignature(undo_manager.UndoManager, () => dart.global.Object.setPrototypeOf({[_channel]: platform_channel.MethodChannel}, dart.getGetters(dart.global.Object.getPrototypeOf(undo_manager.UndoManager))));
  dart.setSetterSignature(undo_manager.UndoManager, () => dart.global.Object.setPrototypeOf({[_channel]: platform_channel.MethodChannel}, dart.getSetters(dart.global.Object.getPrototypeOf(undo_manager.UndoManager))));
  dart.setStaticGetterSignature(undo_manager.UndoManager, () => ['client']);
  dart.setStaticSetterSignature(undo_manager.UndoManager, () => ['client']);
  dart.setLibraryUri(undo_manager.UndoManager, I[0]);
  dart.setFieldSignature(undo_manager.UndoManager, () => dart.global.Object.setPrototypeOf({
    [__UndoManager__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [_currentClient]: dart.fieldType(dart.nullable(undo_manager.UndoManagerClient))
  }, dart.getFields(dart.global.Object.getPrototypeOf(undo_manager.UndoManager))));
  dart.setStaticFieldSignature(undo_manager.UndoManager, () => ['_instance']);
  dart.defineLazy(undo_manager.UndoManager, {
    /*undo_manager.UndoManager._instance*/get _instance() {
      return new undo_manager.UndoManager.__();
    }
  }, false);
  undo_manager.UndoManagerClient = class UndoManagerClient extends core.Object {};
  undo_manager.UndoManagerClient[dart.mixinOn] = Object => class UndoManagerClient extends Object {};
  (undo_manager.UndoManagerClient[dart.mixinNew] = function() {
  }).prototype = undo_manager.UndoManagerClient.prototype;
  dart.addTypeTests(undo_manager.UndoManagerClient);
  dart.addTypeCaches(undo_manager.UndoManagerClient);
  undo_manager.UndoManagerClient[dart.implements] = () => [core.Object];
  dart.setLibraryUri(undo_manager.UndoManagerClient, I[0]);
  dart.trackLibraries("packages/flutter/src/services/undo_manager.dart", {
    "package:flutter/src/services/undo_manager.dart": undo_manager,
    "package:flutter/services.dart": services
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["undo_manager.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeA;;;;;;;;;;;;MANK,iCAAM;;;MAET,+BAAI;;;MAGJ,+BAAI;;;;;;;;;;;;;;sBAkCiC;AACnC,WAAO,AAGN;;AAF8F,QAA7F,AAAU,wDAAW,UAAU,EAAV;AAAY,qCAA+B,UAAV;;;AACtD,cAAO;;IAEX;sBASqC;AACF,MAAjC,AAAU,qDAAiB,MAAM;IACnC;;AAGwC,YAAA,AAAU;IAAc;;UAIjC;UAAsB;AACQ,MAA3D,AAAU,4DAAuB,OAAO,WAAW,OAAO;IAC5D;;;AAEmB;;IAAQ;mBAAR;;IAAQ;mCAI6B;AAAZ;AAC7B,qBAAS,AAAW,UAAD;AACZ,mBAA4B,aAArB,AAAW,UAAD;AACrC,YAAI,AAAO,MAAD,KAAI;AACZ,gBAAO,AAAe,iDAAS;AACwC,UAAzD,AAAE,eAAhB,yCAAmC,uBAAyB,eAAR,AAAI,IAAA,QAAC;AAEzD;;AAG4B,QAA9B,WAAM;MACR;;;UAEyB;UAAsB;AAI5C,MAHD,AAAS,uCACP,4BACc,yCAAC,WAAW,OAAO,EAAE,WAAW,OAAO;IAEzD;uBAEsC;AACpC,cAAQ,SAAS;;;AAEb,kBAAqB;;;;AAErB,kBAAqB;;;AAE0E,MAAnG,WAAmB,sCAA2B,iCAAC,gCAAa,AAAoC,6BAAV,SAAS;IACjG;;;mCAhCmB;IAEA;AAvCoB,IAArC,iBAA0B;AACiC,IAA3D,AAAS,8CAAqB;EAChC;;;;;;;;;;;;;;;;;;;;MAeyB,kCAAS;YAAe","file":"../../../../../../../packages/flutter/src/services/undo_manager.dart.lib.js"}');
  // Exports:
  return {
    src__services__undo_manager: undo_manager,
    services: services
  };
}));

//# sourceMappingURL=undo_manager.dart.lib.js.map
