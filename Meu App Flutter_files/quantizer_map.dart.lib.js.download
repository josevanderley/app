// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/material_color_utilities/quantize/quantizer_map.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/utils/color_utils.dart', 'packages/material_color_utilities/quantize/quantizer.dart'], (function load__packages__material_color_utilities__quantize__quantizer_map_dart(dart_sdk, packages__material_color_utilities__utils__color_utils$46dart, packages__material_color_utilities__quantize__quantizer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const color_utils = packages__material_color_utilities__utils__color_utils$46dart.utils__color_utils;
  const quantizer = packages__material_color_utilities__quantize__quantizer$46dart.quantize__quantizer;
  var quantizer_map = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    IdentityMapOfint$int: () => (T.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:material_color_utilities/quantize/quantizer_map.dart"];
  quantizer_map.QuantizerMap = class QuantizerMap extends core.Object {
    quantize(pixels, maxColors) {
      return async.async(quantizer.QuantizerResult, function* quantize() {
        let t$360;
        let countByColor = new (T.IdentityMapOfint$int()).new();
        for (let pixel of pixels) {
          let alpha = color_utils.ColorUtils.alphaFromArgb(pixel);
          if (alpha < 255) {
            continue;
          }
          countByColor[$_set](pixel, dart.notNull((t$360 = countByColor[$_get](pixel), t$360 == null ? 0 : t$360)) + 1);
        }
        return new quantizer.QuantizerResult.new(countByColor);
      });
    }
    static ['_#new#tearOff']() {
      return new quantizer_map.QuantizerMap.new();
    }
  };
  (quantizer_map.QuantizerMap.new = function() {
    ;
  }).prototype = quantizer_map.QuantizerMap.prototype;
  dart.addTypeTests(quantizer_map.QuantizerMap);
  dart.addTypeCaches(quantizer_map.QuantizerMap);
  quantizer_map.QuantizerMap[dart.implements] = () => [quantizer.Quantizer];
  dart.setMethodSignature(quantizer_map.QuantizerMap, () => dart.global.Object.setPrototypeOf({quantize: dart.fnType(async.Future$(quantizer.QuantizerResult), [core.Iterable$(core.int), core.int])}, dart.getMethods(dart.global.Object.getPrototypeOf(quantizer_map.QuantizerMap))));
  dart.setLibraryUri(quantizer_map.QuantizerMap, I[0]);
  dart.trackLibraries("packages/material_color_utilities/quantize/quantizer_map.dart", {
    "package:material_color_utilities/quantize/quantizer_map.dart": quantizer_map
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["quantizer_map.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;aAoBiD,QAAY;AAA3B;;AACxB,2BAAyB;AAC/B,iBAAW,QAAS,OAAM;AAClB,sBAAmB,qCAAc,KAAK;AAC5C,cAAI,AAAM,KAAD,GAAG;AACV;;AAEkD,UAApD,AAAY,YAAA,QAAC,KAAK,EAA+B,cAAN,QAApB,AAAY,YAAA,QAAC,KAAK,GAAN,gBAAW,cAAK;;AAErD,cAAO,mCAAgB,YAAY;MACrC;;;;;;;;EACF","file":"../../../../../../../../../../../packages/material_color_utilities/quantize/quantizer_map.dart.lib.js"}');
  // Exports:
  return {
    quantize__quantizer_map: quantizer_map
  };
}));

//# sourceMappingURL=quantizer_map.dart.lib.js.map
