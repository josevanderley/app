// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/box_decoration.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/box_shadow.dart', 'packages/flutter/src/painting/gradient.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/painting/decoration_image.dart', 'packages/flutter/src/painting/decoration.dart', 'packages/flutter/src/painting/_network_image_web.dart'], (function load__packages__flutter__src__painting__box_decoration_dart(dart_sdk, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__box_shadow$46dart, packages__flutter__src__painting__gradient$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__painting__decoration_image$46dart, packages__flutter__src__painting__decoration$46dart, packages__flutter__src__painting___network_image_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const box_shadow = packages__flutter__src__painting__box_shadow$46dart.src__painting__box_shadow;
  const gradient = packages__flutter__src__painting__gradient$46dart.src__painting__gradient;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const decoration_image = packages__flutter__src__painting__decoration_image$46dart.src__painting__decoration_image;
  const decoration = packages__flutter__src__painting__decoration$46dart.src__painting__decoration;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  var box_decoration = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    BoxDecorationN: () => (T.BoxDecorationN = dart.constFn(dart.nullable(box_decoration.BoxDecoration)))(),
    DiagnosticsPropertyOfDecorationImage: () => (T.DiagnosticsPropertyOfDecorationImage = dart.constFn(diagnostics.DiagnosticsProperty$(decoration_image.DecorationImage)))(),
    DiagnosticsPropertyOfBoxBorder: () => (T.DiagnosticsPropertyOfBoxBorder = dart.constFn(diagnostics.DiagnosticsProperty$(box_border.BoxBorder)))(),
    DiagnosticsPropertyOfBorderRadiusGeometry: () => (T.DiagnosticsPropertyOfBorderRadiusGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(border_radius.BorderRadiusGeometry)))(),
    IterablePropertyOfBoxShadow: () => (T.IterablePropertyOfBoxShadow = dart.constFn(diagnostics.IterableProperty$(box_shadow.BoxShadow)))(),
    DiagnosticsPropertyOfGradient: () => (T.DiagnosticsPropertyOfGradient = dart.constFn(diagnostics.DiagnosticsProperty$(gradient.Gradient)))(),
    EnumPropertyOfBoxShape: () => (T.EnumPropertyOfBoxShape = dart.constFn(diagnostics.EnumProperty$(box_border.BoxShape)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rectangle",
        [_Enum_index]: 0
      }, box_border.BoxShape.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "circle",
        [_Enum_index]: 1
      }, box_border.BoxShape.prototype));
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/box_decoration.dart",
    "package:flutter/src/painting/box_decoration.dart"
  ];
  var color$ = dart.privateName(box_decoration, "BoxDecoration.color");
  var image$ = dart.privateName(box_decoration, "BoxDecoration.image");
  var border$ = dart.privateName(box_decoration, "BoxDecoration.border");
  var borderRadius$ = dart.privateName(box_decoration, "BoxDecoration.borderRadius");
  var boxShadow$ = dart.privateName(box_decoration, "BoxDecoration.boxShadow");
  var gradient$ = dart.privateName(box_decoration, "BoxDecoration.gradient");
  var backgroundBlendMode$ = dart.privateName(box_decoration, "BoxDecoration.backgroundBlendMode");
  var shape$ = dart.privateName(box_decoration, "BoxDecoration.shape");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  box_decoration.BoxDecoration = class BoxDecoration extends decoration.Decoration {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get boxShadow() {
      return this[boxShadow$];
    }
    set boxShadow(value) {
      super.boxShadow = value;
    }
    get gradient() {
      return this[gradient$];
    }
    set gradient(value) {
      super.gradient = value;
    }
    get backgroundBlendMode() {
      return this[backgroundBlendMode$];
    }
    set backgroundBlendMode(value) {
      super.backgroundBlendMode = value;
    }
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let image = opts && 'image' in opts ? opts.image : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let boxShadow = opts && 'boxShadow' in opts ? opts.boxShadow : null;
      let gradient = opts && 'gradient' in opts ? opts.gradient : null;
      let backgroundBlendMode = opts && 'backgroundBlendMode' in opts ? opts.backgroundBlendMode : null;
      let shape = opts && 'shape' in opts ? opts.shape : C[0] || CT.C0;
      return new box_decoration.BoxDecoration.new({color: color, image: image, border: border, borderRadius: borderRadius, boxShadow: boxShadow, gradient: gradient, backgroundBlendMode: backgroundBlendMode, shape: shape});
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5;
      let color = opts && 'color' in opts ? opts.color : null;
      let image = opts && 'image' in opts ? opts.image : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let boxShadow = opts && 'boxShadow' in opts ? opts.boxShadow : null;
      let gradient = opts && 'gradient' in opts ? opts.gradient : null;
      let backgroundBlendMode = opts && 'backgroundBlendMode' in opts ? opts.backgroundBlendMode : null;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      return new box_decoration.BoxDecoration.new({color: (t$360 = color, t$360 == null ? this.color : t$360), image: (t$360$ = image, t$360$ == null ? this.image : t$360$), border: (t$360$0 = border, t$360$0 == null ? this.border : t$360$0), borderRadius: (t$360$1 = borderRadius, t$360$1 == null ? this.borderRadius : t$360$1), boxShadow: (t$360$2 = boxShadow, t$360$2 == null ? this.boxShadow : t$360$2), gradient: (t$360$3 = gradient, t$360$3 == null ? this.gradient : t$360$3), backgroundBlendMode: (t$360$4 = backgroundBlendMode, t$360$4 == null ? this.backgroundBlendMode : t$360$4), shape: (t$360$5 = shape, t$360$5 == null ? this.shape : t$360$5)});
    }
    debugAssertIsValid() {
      if (!(this.shape !== box_border.BoxShape.circle || this.borderRadius == null)) dart.assertFailed(null, I[0], 130, 12, "shape != BoxShape.circle || borderRadius == null");
      return super.debugAssertIsValid();
    }
    get padding() {
      let t$360, t$360$;
      t$360$ = (t$360 = this.border, t$360 == null ? null : t$360.dimensions);
      return t$360$ == null ? edge_insets.EdgeInsets.zero : t$360$;
    }
    getClipPath(rect, textDirection) {
      let t$360, t$360$, t$360$0;
      switch (this.shape) {
        case C[1] || CT.C1:
          {
            let center = rect.center;
            let radius = rect.shortestSide / 2.0;
            let square = new ui.Rect.fromCircle({center: center, radius: radius});
            t$360 = ui.Path.new();
            return (() => {
              t$360.addOval(square);
              return t$360;
            })();
          }
        case C[0] || CT.C0:
          {
            if (this.borderRadius != null) {
              t$360$ = ui.Path.new();
              return (() => {
                t$360$.addRRect(dart.nullCheck(this.borderRadius).resolve(textDirection).toRRect(rect));
                return t$360$;
              })();
            }
            t$360$0 = ui.Path.new();
            return (() => {
              t$360$0.addRect(rect);
              return t$360$0;
            })();
          }
      }
    }
    scale(factor) {
      let t$360;
      return new box_decoration.BoxDecoration.new({color: ui.Color.lerp(null, this.color, factor), image: this.image, border: box_border.BoxBorder.lerp(null, this.border, factor), borderRadius: border_radius.BorderRadiusGeometry.lerp(null, this.borderRadius, factor), boxShadow: box_shadow.BoxShadow.lerpList(null, this.boxShadow, factor), gradient: (t$360 = this.gradient, t$360 == null ? null : t$360.scale(factor)), shape: this.shape});
    }
    get isComplex() {
      return this.boxShadow != null;
    }
    lerpFrom(a, t) {
      if (a == null) {
        return this.scale(t);
      }
      if (box_decoration.BoxDecoration.is(a)) {
        return box_decoration.BoxDecoration.lerp(a, this, t);
      }
      return T.BoxDecorationN().as(super.lerpFrom(a, t));
    }
    lerpTo(b, t) {
      if (b == null) {
        return this.scale(1.0 - t);
      }
      if (box_decoration.BoxDecoration.is(b)) {
        return box_decoration.BoxDecoration.lerp(this, b, t);
      }
      return T.BoxDecorationN().as(super.lerpTo(b, t));
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b).scale(t);
      }
      if (b == null) {
        return a.scale(1.0 - t);
      }
      if (t === 0.0) {
        return a;
      }
      if (t === 1.0) {
        return b;
      }
      return new box_decoration.BoxDecoration.new({color: ui.Color.lerp(a.color, b.color, t), image: t < 0.5 ? a.image : b.image, border: box_border.BoxBorder.lerp(a.border, b.border, t), borderRadius: border_radius.BorderRadiusGeometry.lerp(a.borderRadius, b.borderRadius, t), boxShadow: box_shadow.BoxShadow.lerpList(a.boxShadow, b.boxShadow, t), gradient: gradient.Gradient.lerp(a.gradient, b.gradient, t), shape: t < 0.5 ? a.shape : b.shape});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return box_decoration.BoxDecoration.is(other) && dart.equals(other.color, this.color) && dart.equals(other.image, this.image) && dart.equals(other.border, this.border) && dart.equals(other.borderRadius, this.borderRadius) && collections.listEquals(box_shadow.BoxShadow, other.boxShadow, this.boxShadow) && dart.equals(other.gradient, this.gradient) && other.backgroundBlendMode == this.backgroundBlendMode && other.shape === this.shape;
    }
    get hashCode() {
      return core.Object.hash(this.color, this.image, this.border, this.borderRadius, this.boxShadow == null ? null : core.Object.hashAll(dart.nullCheck(this.boxShadow)), this.gradient, this.backgroundBlendMode, this.shape);
    }
    debugFillProperties(properties) {
      let t$360;
      super.debugFillProperties(properties);
      t$360 = properties;
      (() => {
        t$360.defaultDiagnosticsTreeStyle = diagnostics.DiagnosticsTreeStyle.whitespace;
        t$360.emptyBodyDescription = "<no decorations specified>";
        return t$360;
      })();
      properties.add(new colors.ColorProperty.new("color", this.color, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfDecorationImage()).new("image", this.image, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfBoxBorder()).new("border", this.border, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfBorderRadiusGeometry()).new("borderRadius", this.borderRadius, {defaultValue: null}));
      properties.add(new (T.IterablePropertyOfBoxShadow()).new("boxShadow", this.boxShadow, {defaultValue: null, style: diagnostics.DiagnosticsTreeStyle.whitespace}));
      properties.add(new (T.DiagnosticsPropertyOfGradient()).new("gradient", this.gradient, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfBoxShape()).new("shape", this.shape, {defaultValue: box_border.BoxShape.rectangle}));
    }
    hitTest(size, position, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!ui.Offset.zero['&'](size).contains(position)) dart.assertFailed(null, I[0], 368, 12, "(Offset.zero & size).contains(position)");
      switch (this.shape) {
        case C[0] || CT.C0:
          {
            if (this.borderRadius != null) {
              let bounds = dart.nullCheck(this.borderRadius).resolve(textDirection).toRRect(ui.Offset.zero['&'](size));
              return bounds.contains(position);
            }
            return true;
          }
        case C[1] || CT.C1:
          {
            let center = size.center(ui.Offset.zero);
            let distance = position['-'](center).distance;
            return distance <= math.min(core.double, size.width, size.height) / 2.0;
          }
      }
    }
    createBoxPainter(onChanged = null) {
      if (!(onChanged != null || this.image == null)) dart.assertFailed(null, I[0], 386, 12, "onChanged != null || image == null");
      return new box_decoration._BoxDecorationPainter.new(this, onChanged);
    }
  };
  (box_decoration.BoxDecoration.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let boxShadow = opts && 'boxShadow' in opts ? opts.boxShadow : null;
    let gradient = opts && 'gradient' in opts ? opts.gradient : null;
    let backgroundBlendMode = opts && 'backgroundBlendMode' in opts ? opts.backgroundBlendMode : null;
    let shape = opts && 'shape' in opts ? opts.shape : C[0] || CT.C0;
    this[color$] = color;
    this[image$] = image;
    this[border$] = border;
    this[borderRadius$] = borderRadius;
    this[boxShadow$] = boxShadow;
    this[gradient$] = gradient;
    this[backgroundBlendMode$] = backgroundBlendMode;
    this[shape$] = shape;
    if (!(backgroundBlendMode == null || color != null || gradient != null)) dart.assertFailed("backgroundBlendMode applies to BoxDecoration's background color or gradient, but no color or gradient was provided.", I[0], 99, 10, "backgroundBlendMode == null || color != null || gradient != null");
    dart.global.Object.getPrototypeOf(box_decoration.BoxDecoration).new.call(this);
    ;
  }).prototype = box_decoration.BoxDecoration.prototype;
  dart.addTypeTests(box_decoration.BoxDecoration);
  dart.addTypeCaches(box_decoration.BoxDecoration);
  dart.setMethodSignature(box_decoration.BoxDecoration, () => dart.global.Object.setPrototypeOf({
    copyWith: dart.fnType(box_decoration.BoxDecoration, [], {backgroundBlendMode: dart.nullable(ui.BlendMode), border: dart.nullable(box_border.BoxBorder), borderRadius: dart.nullable(border_radius.BorderRadiusGeometry), boxShadow: dart.nullable(core.List$(box_shadow.BoxShadow)), color: dart.nullable(ui.Color), gradient: dart.nullable(gradient.Gradient), image: dart.nullable(decoration_image.DecorationImage), shape: dart.nullable(box_border.BoxShape)}, {}),
    scale: dart.fnType(box_decoration.BoxDecoration, [core.double]),
    lerpFrom: dart.fnType(dart.nullable(box_decoration.BoxDecoration), [dart.nullable(decoration.Decoration), core.double]),
    lerpTo: dart.fnType(dart.nullable(box_decoration.BoxDecoration), [dart.nullable(decoration.Decoration), core.double]),
    createBoxPainter: dart.fnType(decoration.BoxPainter, [], [dart.nullable(dart.fnType(dart.void, []))])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(box_decoration.BoxDecoration))));
  dart.setStaticMethodSignature(box_decoration.BoxDecoration, () => ['lerp']);
  dart.setLibraryUri(box_decoration.BoxDecoration, I[1]);
  dart.setFieldSignature(box_decoration.BoxDecoration, () => dart.global.Object.setPrototypeOf({
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    image: dart.finalFieldType(dart.nullable(decoration_image.DecorationImage)),
    border: dart.finalFieldType(dart.nullable(box_border.BoxBorder)),
    borderRadius: dart.finalFieldType(dart.nullable(border_radius.BorderRadiusGeometry)),
    boxShadow: dart.finalFieldType(dart.nullable(core.List$(box_shadow.BoxShadow))),
    gradient: dart.finalFieldType(dart.nullable(gradient.Gradient)),
    backgroundBlendMode: dart.finalFieldType(dart.nullable(ui.BlendMode)),
    shape: dart.finalFieldType(box_border.BoxShape)
  }, dart.getFields(dart.global.Object.getPrototypeOf(box_decoration.BoxDecoration))));
  dart.defineExtensionMethods(box_decoration.BoxDecoration, ['_equals']);
  dart.defineExtensionAccessors(box_decoration.BoxDecoration, ['hashCode']);
  var _cachedBackgroundPaint = dart.privateName(box_decoration, "_cachedBackgroundPaint");
  var _rectForCachedBackgroundPaint = dart.privateName(box_decoration, "_rectForCachedBackgroundPaint");
  var _imagePainter = dart.privateName(box_decoration, "_imagePainter");
  var _decoration$ = dart.privateName(box_decoration, "_decoration");
  var _getBackgroundPaint = dart.privateName(box_decoration, "_getBackgroundPaint");
  var _paintBox = dart.privateName(box_decoration, "_paintBox");
  var _paintShadows = dart.privateName(box_decoration, "_paintShadows");
  var _paintBackgroundColor = dart.privateName(box_decoration, "_paintBackgroundColor");
  var _paintBackgroundImage = dart.privateName(box_decoration, "_paintBackgroundImage");
  box_decoration._BoxDecorationPainter = class _BoxDecorationPainter extends decoration.BoxPainter {
    static ['_#new#tearOff'](_decoration, onChanged) {
      return new box_decoration._BoxDecorationPainter.new(_decoration, onChanged);
    }
    [_getBackgroundPaint](rect, textDirection) {
      if (!(this[_decoration$].gradient != null || this[_rectForCachedBackgroundPaint] == null)) dart.assertFailed(null, I[0], 400, 12, "_decoration.gradient != null || _rectForCachedBackgroundPaint == null");
      if (this[_cachedBackgroundPaint] == null || this[_decoration$].gradient != null && !dart.equals(this[_rectForCachedBackgroundPaint], rect)) {
        let paint = ui.Paint.new();
        if (this[_decoration$].backgroundBlendMode != null) {
          paint.blendMode = dart.nullCheck(this[_decoration$].backgroundBlendMode);
        }
        if (this[_decoration$].color != null) {
          paint.color = dart.nullCheck(this[_decoration$].color);
        }
        if (this[_decoration$].gradient != null) {
          paint.shader = dart.nullCheck(this[_decoration$].gradient).createShader(rect, {textDirection: textDirection});
          this[_rectForCachedBackgroundPaint] = rect;
        }
        this[_cachedBackgroundPaint] = paint;
      }
      return dart.nullCheck(this[_cachedBackgroundPaint]);
    }
    [_paintBox](canvas, rect, paint, textDirection) {
      switch (this[_decoration$].shape) {
        case C[1] || CT.C1:
          {
            if (!(this[_decoration$].borderRadius == null)) dart.assertFailed(null, I[0], 424, 16, "_decoration.borderRadius == null");
            let center = rect.center;
            let radius = rect.shortestSide / 2.0;
            canvas.drawCircle(center, radius, paint);
            break;
          }
        case C[0] || CT.C0:
          {
            if (this[_decoration$].borderRadius == null || dart.equals(this[_decoration$].borderRadius, border_radius.BorderRadius.zero)) {
              canvas.drawRect(rect, paint);
            } else {
              canvas.drawRRect(dart.nullCheck(this[_decoration$].borderRadius).resolve(textDirection).toRRect(rect), paint);
            }
          }
      }
    }
    [_paintShadows](canvas, rect, textDirection) {
      if (this[_decoration$].boxShadow == null) {
        return;
      }
      for (let boxShadow of dart.nullCheck(this[_decoration$].boxShadow)) {
        let paint = boxShadow.toPaint();
        let bounds = rect.shift(boxShadow.offset).inflate(boxShadow.spreadRadius);
        this[_paintBox](canvas, bounds, paint, textDirection);
      }
    }
    [_paintBackgroundColor](canvas, rect, textDirection) {
      if (this[_decoration$].color != null || this[_decoration$].gradient != null) {
        this[_paintBox](canvas, rect, this[_getBackgroundPaint](rect, textDirection), textDirection);
      }
    }
    [_paintBackgroundImage](canvas, rect, configuration) {
      let t$360, t$360$;
      if (this[_decoration$].image == null) {
        return;
      }
      this[_imagePainter] == null ? this[_imagePainter] = dart.nullCheck(this[_decoration$].image).createPainter(dart.nullCheck(this.onChanged)) : null;
      let clipPath = null;
      switch (this[_decoration$].shape) {
        case C[1] || CT.C1:
          {
            if (!(this[_decoration$].borderRadius == null)) dart.assertFailed(null, I[0], 463, 16, "_decoration.borderRadius == null");
            let center = rect.center;
            let radius = rect.shortestSide / 2.0;
            let square = new ui.Rect.fromCircle({center: center, radius: radius});
            clipPath = (t$360 = ui.Path.new(), (() => {
              t$360.addOval(square);
              return t$360;
            })());
            break;
          }
        case C[0] || CT.C0:
          {
            if (this[_decoration$].borderRadius != null) {
              clipPath = (t$360$ = ui.Path.new(), (() => {
                t$360$.addRRect(dart.nullCheck(this[_decoration$].borderRadius).resolve(configuration.textDirection).toRRect(rect));
                return t$360$;
              })());
            }
          }
      }
      dart.nullCheck(this[_imagePainter]).paint(canvas, rect, clipPath, configuration);
    }
    dispose() {
      let t$360;
      t$360 = this[_imagePainter];
      t$360 == null ? null : t$360.dispose();
      super.dispose();
    }
    paint(canvas, offset, configuration) {
      let t$361, t$360;
      if (!(configuration.size != null)) dart.assertFailed(null, I[0], 485, 12, "configuration.size != null");
      let rect = offset['&'](dart.nullCheck(configuration.size));
      let textDirection = configuration.textDirection;
      this[_paintShadows](canvas, rect, textDirection);
      this[_paintBackgroundColor](canvas, rect, textDirection);
      this[_paintBackgroundImage](canvas, rect, configuration);
      t$360 = this[_decoration$].border;
      t$360 == null ? null : t$360.paint(canvas, rect, {shape: this[_decoration$].shape, borderRadius: (t$361 = this[_decoration$].borderRadius, t$361 == null ? null : t$361.resolve(textDirection)), textDirection: configuration.textDirection});
    }
    toString() {
      return "BoxPainter for " + dart.str(this[_decoration$]);
    }
  };
  (box_decoration._BoxDecorationPainter.new = function(_decoration, onChanged) {
    this[_cachedBackgroundPaint] = null;
    this[_rectForCachedBackgroundPaint] = null;
    this[_imagePainter] = null;
    this[_decoration$] = _decoration;
    dart.global.Object.getPrototypeOf(box_decoration._BoxDecorationPainter).new.call(this, onChanged);
    ;
  }).prototype = box_decoration._BoxDecorationPainter.prototype;
  dart.addTypeTests(box_decoration._BoxDecorationPainter);
  dart.addTypeCaches(box_decoration._BoxDecorationPainter);
  dart.setMethodSignature(box_decoration._BoxDecorationPainter, () => dart.global.Object.setPrototypeOf({
    [_getBackgroundPaint]: dart.fnType(ui.Paint, [ui.Rect, dart.nullable(ui.TextDirection)]),
    [_paintBox]: dart.fnType(dart.void, [ui.Canvas, ui.Rect, ui.Paint, dart.nullable(ui.TextDirection)]),
    [_paintShadows]: dart.fnType(dart.void, [ui.Canvas, ui.Rect, dart.nullable(ui.TextDirection)]),
    [_paintBackgroundColor]: dart.fnType(dart.void, [ui.Canvas, ui.Rect, dart.nullable(ui.TextDirection)]),
    [_paintBackgroundImage]: dart.fnType(dart.void, [ui.Canvas, ui.Rect, image_provider.ImageConfiguration]),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Offset, image_provider.ImageConfiguration])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(box_decoration._BoxDecorationPainter))));
  dart.setLibraryUri(box_decoration._BoxDecorationPainter, I[1]);
  dart.setFieldSignature(box_decoration._BoxDecorationPainter, () => dart.global.Object.setPrototypeOf({
    [_decoration$]: dart.finalFieldType(box_decoration.BoxDecoration),
    [_cachedBackgroundPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [_rectForCachedBackgroundPaint]: dart.fieldType(dart.nullable(ui.Rect)),
    [_imagePainter]: dart.fieldType(dart.nullable(decoration_image.DecorationImagePainter))
  }, dart.getFields(dart.global.Object.getPrototypeOf(box_decoration._BoxDecorationPainter))));
  dart.defineExtensionMethods(box_decoration._BoxDecorationPainter, ['toString']);
  dart.trackLibraries("packages/flutter/src/painting/box_decoration.dart", {
    "package:flutter/src/painting/box_decoration.dart": box_decoration
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["box_decoration.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6Ie;;;;;;IAOU;;;;;;IAYN;;;;;;IAQW;;;;;;IAWL;;;;;;IAOP;;;;;;IAQC;;;;;;IAeF;;;;;;;;;;;;;;;;;;;UAvGN;UACU;UACN;UACW;UACL;UACP;UACC;UACD;AAEV,YAAO,+CACQ,QAAN,KAAK,EAAL,gBAAc,6BACR,SAAN,KAAK,EAAL,iBAAc,+BACN,UAAP,MAAM,EAAN,kBAAe,uCACI,UAAb,YAAY,EAAZ,kBAAqB,0CACd,UAAV,SAAS,EAAT,kBAAkB,sCACV,UAAT,QAAQ,EAAR,kBAAiB,gDACc,UAApB,mBAAmB,EAAnB,kBAA4B,6CACpC,UAAN,KAAK,EAAL,kBAAc;IAEzB;;AAIE,YAAO,AAAyB,eAAP,8BAAU,AAAa;AAChD,YAAa;IACf;;;AAiFkC,4DAAQ;YAAR,kBAAiC;IAAI;gBAGjD,MAAoB;;AACxC,cAAQ;;;AAES,yBAAS,AAAK,IAAD;AACb,yBAAS,AAAK,AAAa,IAAd,gBAAgB;AAC/B,yBAAc,gCAAmB,MAAM,UAAU,MAAM;AAClE,oBAAO;;AAAQ,4BAAQ,MAAM;;;;;;AAE7B,gBAAI;AACF,uBAAO;;AAAQ,gCAAqB,AAAE,AAAuB,eAArC,2BAAsB,aAAa,UAAU,IAAI;;;;AAE3E,sBAAO;;AAAQ,8BAAQ,IAAI;;;;;IAEjC;UAG2B;;AACzB,YAAO,8CACQ,cAAK,MAAM,YAAO,MAAM,UAC9B,oBACW,0BAAK,MAAM,aAAQ,MAAM,iBACR,wCAAK,MAAM,mBAAc,MAAM,cAC7C,8BAAS,MAAM,gBAAW,MAAM,qDAC3C,OAAU,YAAM,MAAM,WACzB;IAEX;;AAGsB,YAAA,AAAU;IAAO;aAGH,GAAU;AAC5C,UAAI,AAAE,CAAD;AACH,cAAO,YAAM,CAAC;;AAEhB,UAAM,gCAAF,CAAC;AACH,cAAqB,mCAAK,CAAC,EAAE,MAAM,CAAC;;AAEtC,YAA4B,uBAAf,eAAS,CAAC,EAAE,CAAC;IAC5B;WAGkC,GAAU;AAC1C,UAAI,AAAE,CAAD;AACH,cAAO,YAAM,AAAI,MAAE,CAAC;;AAEtB,UAAM,gCAAF,CAAC;AACH,cAAqB,mCAAK,MAAM,CAAC,EAAE,CAAC;;AAEtC,YAA0B,uBAAb,aAAO,CAAC,EAAE,CAAC;IAC1B;gBAyB0C,GAAkB,GAAU;AACpE,UAAI,AAAU,CAAC,IAAE,CAAC;AAChB,cAAO,EAAC;;AAEV,UAAI,AAAE,CAAD;AACH,cAAQ,AAAE,gBAAH,CAAC,QAAQ,CAAC;;AAEnB,UAAI,AAAE,CAAD;AACH,cAAO,AAAE,EAAD,OAAO,AAAI,MAAE,CAAC;;AAExB,UAAI,AAAE,CAAD,KAAI;AACP,cAAO,EAAC;;AAEV,UAAI,AAAE,CAAD,KAAI;AACP,cAAO,EAAC;;AAEV,YAAO,8CACQ,cAAK,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,UAC9B,AAAE,CAAD,GAAG,MAAM,AAAE,CAAD,SAAS,AAAE,CAAD,gBACV,0BAAK,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC,iBACT,wCAAK,AAAE,CAAD,eAAe,AAAE,CAAD,eAAe,CAAC,cACpD,8BAAS,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,aACtC,uBAAK,AAAE,CAAD,WAAW,AAAE,CAAD,WAAW,CAAC,UAC1C,AAAE,CAAD,GAAG,MAAM,AAAE,CAAD,SAAS,AAAE,CAAD;IAEhC;YAGwB;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,WAAI,AAAM,KAAD,uBAAgB;AACvB,cAAO;;AAET,YAAa,AAQT,iCARG,KAAK,KACO,YAAZ,AAAM,KAAD,QAAU,eACH,YAAZ,AAAM,KAAD,QAAU,eACF,YAAb,AAAM,KAAD,SAAW,gBACG,YAAnB,AAAM,KAAD,eAAiB,sBACtB,6CAAsB,AAAM,KAAD,YAAY,mBACxB,YAAf,AAAM,KAAD,WAAa,kBAClB,AAAM,AAAoB,KAArB,wBAAwB,4BAC7B,AAAM,AAAM,KAAP,WAAU;IACxB;;AAGoB,YAAO,kBACzB,YACA,YACA,aACA,mBACA,AAAU,yBAAU,OAAc,oBAAiB,eAAT,kBAC1C,eACA,0BACA;IACD;wBAGoD;;AACd,MAA/B,0BAAoB,UAAU;AAGmB,cAFvD,UAAU;MAAV;AACI,4CAAmD;AACnD,qCAAuB;;;AAEsC,MAAjE,AAAW,UAAD,KAAK,6BAAc,SAAS,2BAAqB;AAC6B,MAAxF,AAAW,UAAD,KAAK,mDAAqC,SAAS,2BAAqB;AACE,MAApF,AAAW,UAAD,KAAK,6CAA+B,UAAU,4BAAsB;AAC6B,MAA3G,AAAW,UAAD,KAAK,wDAA0C,gBAAgB,kCAA4B;AAC0B,MAA/H,AAAW,UAAD,KAAK,0CAA4B,aAAa,+BAAyB,aAAkC;AAC5B,MAAvF,AAAW,UAAD,KAAK,4CAA8B,YAAY,8BAAwB;AACO,MAAxF,AAAW,UAAD,KAAK,qCAAuB,SAAS,2BAA8B;IAC/E;YAGkB,MAAa;UAA2B;AACxD,WAAe,AAAK,AAAQ,oBAAN,IAAI,WAAW,QAAQ;AAC7C,cAAQ;;;AAEJ,gBAAI;AACU,2BAAqB,AAAE,AAAuB,eAArC,2BAAsB,aAAa,UAAiB,AAAK,oBAAE,IAAI;AACpF,oBAAO,AAAO,OAAD,UAAU,QAAQ;;AAEjC,kBAAO;;;;AAGM,yBAAS,AAAK,IAAD,QAAe;AAC5B,2BAAY,AAAS,AAAU,QAAX,MAAG,MAAM;AAC1C,kBAAO,AAAS,SAAD,IAAS,AAA6B,sBAAzB,AAAK,IAAD,QAAQ,AAAK,IAAD,WAAW;;;IAE7D;qBAG4C;AAC1C,YAAO,AAAkB,SAAT,YAAY,AAAM;AAClC,YAAO,8CAAsB,MAAM,SAAS;IAC9C;;;QA1SO;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAPA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;UAEA,AAAoB,AAAyB,mBAA1B,YAAY,KAAK,YAAY,QAAQ;AAVzD;;EAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAySyB,MAAqB;AAClD,YAAO,AAAY,AAAiB,uCAAG,AAA8B;AAErE,UAAI,AAAuB,wCACtB,AAAY,oDAAoB,qCAAiC,IAAI;AAC5D,oBAAQ;AACpB,YAAI,AAAY;AACoC,UAAlD,AAAM,KAAD,aAA4C,eAA/B,AAAY;;AAEhC,YAAI,AAAY;AACkB,UAAhC,AAAM,KAAD,SAA0B,eAAjB,AAAY;;AAE5B,YAAI,AAAY;AACuE,UAArF,AAAM,KAAD,UAA8B,AAAE,eAAtB,AAAY,0CAAuB,IAAI,kBAAiB,aAAa;AAChD,UAApC,sCAAgC,IAAI;;AAER,QAA9B,+BAAyB,KAAK;;AAGhC,YAA6B,gBAAtB;IACT;gBAEsB,QAAa,MAAY,OAAsB;AACnE,cAAQ,AAAY;;;AAEhB,kBAAO,AAAY,AAAa;AACnB,yBAAS,AAAK,IAAD;AACb,yBAAS,AAAK,AAAa,IAAd,gBAAgB;AACF,YAAxC,AAAO,MAAD,YAAY,MAAM,EAAE,MAAM,EAAE,KAAK;AAL3C;;;;AAOI,gBAAI,AAAY,AAAa,2CAAoC,YAAzB,AAAY,iCAA6B;AACnD,cAA5B,AAAO,MAAD,UAAU,IAAI,EAAE,KAAK;;AAE4D,cAAvF,AAAO,MAAD,WAAmC,AAAE,AAAuB,eAAjD,AAAY,yCAAsB,aAAa,UAAU,IAAI,GAAG,KAAK;;;;IAG9F;oBAE0B,QAAa,MAAqB;AAC1D,UAAI,AAAY,AAAU;AACxB;;AAEF,eAAqB,YAAkC,gBAArB,AAAY;AAChC,oBAAQ,AAAU,SAAD;AAClB,qBAAS,AAAK,AAAwB,IAAzB,OAAO,AAAU,SAAD,iBAAiB,AAAU,SAAD;AACnB,QAA/C,gBAAU,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa;;IAElD;4BAEkC,QAAa,MAAqB;AAClE,UAAI,AAAY,oCAAiB,AAAY;AACqC,QAAhF,gBAAU,MAAM,EAAE,IAAI,EAAE,0BAAoB,IAAI,EAAE,aAAa,GAAG,aAAa;;IAEnF;4BAGkC,QAAa,MAAyB;;AACtE,UAAI,AAAY,AAAM;AACpB;;AAE4D,MAAhD,8BAAd,sBAAmC,AAAE,eAAnB,AAAY,wCAA8B,eAAT,mBAArC;AACR;AACN,cAAQ,AAAY;;;AAEhB,kBAAO,AAAY,AAAa;AACnB,yBAAS,AAAK,IAAD;AACb,yBAAS,AAAK,AAAa,IAAd,gBAAgB;AAC/B,yBAAc,gCAAmB,MAAM,UAAU,MAAM;AAChC,YAAlC,mCAAW;AAAQ,4BAAQ,MAAM;;;AANrC;;;;AAQI,gBAAI,AAAY;AAC2F,cAAzG,oCAAW;AAAQ,gCAAiC,AAAE,AAAqC,eAA/D,AAAY,yCAAsB,AAAc,aAAD,wBAAwB,IAAI;;;;;;AAGlD,MAA9C,AAAE,eAAf,2BAAqB,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa;IAC5D;;;AAI0B,cAAxB;6BAAe;AACA,MAAT;IACR;UAIkB,QAAe,QAA2B;;AAC1D,YAAO,AAAc,AAAK,aAAN;AACT,iBAAO,AAAO,MAAD,MAAqB,eAAlB,AAAc,aAAD;AACnB,0BAAgB,AAAc,aAAD;AACR,MAA1C,oBAAc,MAAM,EAAE,IAAI,EAAE,aAAa;AACS,MAAlD,4BAAsB,MAAM,EAAE,IAAI,EAAE,aAAa;AACC,MAAlD,4BAAsB,MAAM,EAAE,IAAI,EAAE,aAAa;AAOhD,cAND,AAAY;sBAAA,OAAQ,YAClB,MAAM,EACN,IAAI,UACG,AAAY,iDACL,AAAY,iDAAA,OAAc,cAAQ,aAAa,mBAC9C,AAAc,aAAD;IAEhC;;AAIE,YAAO,AAA6B,8BAAZ;IAC1B;;uDA9G2B,aAAmB;IAIvC;IACD;IAwDkB;IA7DG;AAA3B,2FAA8C,SAAS;;EAAC","file":"../../../../../../../packages/flutter/src/painting/box_decoration.dart.lib.js"}');
  // Exports:
  return {
    src__painting__box_decoration: box_decoration
  };
}));

//# sourceMappingURL=box_decoration.dart.lib.js.map
