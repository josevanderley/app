// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/material_color_utilities/score/score.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/hct/hct.dart', 'packages/material_color_utilities/utils/math_utils.dart'], (function load__packages__material_color_utilities__score__score_dart(dart_sdk, packages__material_color_utilities__hct__hct$46dart, packages__material_color_utilities__utils__math_utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const hct$ = packages__material_color_utilities__hct__hct$46dart.hct__hct;
  const math_utils = packages__material_color_utilities__utils__math_utils$46dart.utils__math_utils;
  var score$ = Object.create(dart.library);
  var $compareTo = dartx.compareTo;
  var $values = dartx.values;
  var $keys = dartx.keys;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $floor = dartx.floor;
  var $entries = dartx.entries;
  var $round = dartx.round;
  var $toList = dartx.toList;
  var $map = dartx.map;
  var $sort = dartx.sort;
  var $clear = dartx.clear;
  var $length = dartx.length;
  var $toInt = dartx.toInt;
  var $isEmpty = dartx.isEmpty;
  var $add = dartx.add;
  var $reduce = dartx.reduce;
  var $floorToDouble = dartx.floorToDouble;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    IdentityMapOfint$double: () => (T.IdentityMapOfint$double = dart.constFn(_js_helper.IdentityMap$(core.int, core.double)))(),
    IdentityMapOfint$Hct: () => (T.IdentityMapOfint$Hct = dart.constFn(_js_helper.IdentityMap$(core.int, hct$.Hct)))(),
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    ListOfnum: () => (T.ListOfnum = dart.constFn(core.List$(core.num)))(),
    JSArrayOfnum: () => (T.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    MapEntryOfint$double: () => (T.MapEntryOfint$double = dart.constFn(core.MapEntry$(core.int, core.double)))(),
    MapEntryOfint$doubleToListOfnum: () => (T.MapEntryOfint$doubleToListOfnum = dart.constFn(dart.fnType(T.ListOfnum(), [T.MapEntryOfint$double()])))(),
    ListOfnumAndListOfnumToint: () => (T.ListOfnumAndListOfnumToint = dart.constFn(dart.fnType(core.int, [T.ListOfnum(), T.ListOfnum()])))(),
    ListOfnumTonum: () => (T.ListOfnumTonum = dart.constFn(dart.fnType(core.num, [T.ListOfnum()])))(),
    IdentityMapOfnum$double: () => (T.IdentityMapOfnum$double = dart.constFn(_js_helper.IdentityMap$(core.num, core.double)))(),
    MapEntryOfnum$double: () => (T.MapEntryOfnum$double = dart.constFn(core.MapEntry$(core.num, core.double)))(),
    MapEntryOfnum$doubleTo_ArgbAndScore: () => (T.MapEntryOfnum$doubleTo_ArgbAndScore = dart.constFn(dart.fnType(score$._ArgbAndScore, [T.MapEntryOfnum$double()])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    _ArgbAndScoreToint: () => (T._ArgbAndScoreToint = dart.constFn(dart.fnType(core.int, [score$._ArgbAndScore])))(),
    intAndintToint: () => (T.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    MapEntryOfint$Hct: () => (T.MapEntryOfint$Hct = dart.constFn(core.MapEntry$(core.int, hct$.Hct)))(),
    intAndintToMapEntryOfint$Hct: () => (T.intAndintToMapEntryOfint$Hct = dart.constFn(dart.fnType(T.MapEntryOfint$Hct(), [core.int, core.int])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:material_color_utilities/score/score.dart"];
  score$._ArgbAndScore = class _ArgbAndScore extends core.Object {
    static ['_#new#tearOff'](argb, score) {
      return new score$._ArgbAndScore.new(argb, score);
    }
    compareTo(other) {
      score$._ArgbAndScore.as(other);
      if (this.score > other.score) {
        return -1;
      } else if (this.score === other.score) {
        return 0;
      } else {
        return 1;
      }
    }
  };
  (score$._ArgbAndScore.new = function(argb, score) {
    this.argb = argb;
    this.score = score;
    ;
  }).prototype = score$._ArgbAndScore.prototype;
  dart.addTypeTests(score$._ArgbAndScore);
  dart.addTypeCaches(score$._ArgbAndScore);
  score$._ArgbAndScore[dart.implements] = () => [core.Comparable$(score$._ArgbAndScore)];
  dart.setMethodSignature(score$._ArgbAndScore, () => dart.global.Object.setPrototypeOf({
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(score$._ArgbAndScore))));
  dart.setLibraryUri(score$._ArgbAndScore, I[0]);
  dart.setFieldSignature(score$._ArgbAndScore, () => dart.global.Object.setPrototypeOf({
    argb: dart.fieldType(core.int),
    score: dart.fieldType(core.double)
  }, dart.getFields(dart.global.Object.getPrototypeOf(score$._ArgbAndScore))));
  dart.defineExtensionMethods(score$._ArgbAndScore, ['compareTo']);
  score$.Score = class Score extends core.Object {
    static score(colorsToPopulation, opts) {
      let desired = opts && 'desired' in opts ? opts.desired : 4;
      let filter = opts && 'filter' in opts ? opts.filter : true;
      let populationSum = 0.0;
      for (let population of colorsToPopulation[$values]) {
        populationSum = populationSum + population;
      }
      let argbToRawProportion = new (T.IdentityMapOfint$double()).new();
      let argbToHct = new (T.IdentityMapOfint$Hct()).new();
      let hueProportions = T.ListOfdouble().filled(360, 0.0);
      for (let color of colorsToPopulation[$keys]) {
        let population = dart.nullCheck(colorsToPopulation[$_get](color));
        let proportion = population / populationSum;
        argbToRawProportion[$_set](color, proportion);
        let hct = hct$.Hct.fromInt(color);
        argbToHct[$_set](color, hct);
        let hue = hct.hue[$floor]();
        hueProportions[$_set](hue, hueProportions[$_get](hue) + proportion);
      }
      let argbToHueProportion = new (T.IdentityMapOfint$double()).new();
      for (let entry of argbToHct[$entries]) {
        let color = entry.key;
        let cam = entry.value;
        let hue = cam.hue[$round]();
        let excitedProportion = 0.0;
        for (let i = hue - 15; i < hue + 15; i = i + 1) {
          let neighborHue = math_utils.MathUtils.sanitizeDegreesInt(i);
          excitedProportion = excitedProportion + hueProportions[$_get](neighborHue);
        }
        argbToHueProportion[$_set](color, excitedProportion);
      }
      let filteredColors = filter ? score$.Score._filter(argbToHueProportion, argbToHct) : argbToHueProportion[$keys][$toList]();
      let argbToScore = new (T.IdentityMapOfint$double()).new();
      for (let color of filteredColors) {
        let cam = dart.nullCheck(argbToHct[$_get](color));
        let proportion = dart.nullCheck(argbToHueProportion[$_get](color));
        let proportionScore = proportion * 100.0 * score$.Score._weightProportion;
        let chromaWeight = cam.chroma < score$.Score._targetChroma ? score$.Score._weightChromaBelow : score$.Score._weightChromaAbove;
        let chromaScore = (cam.chroma - score$.Score._targetChroma) * chromaWeight;
        let score = proportionScore + chromaScore;
        argbToScore[$_set](color, score);
      }
      let _argbAndScoreSorted = argbToScore[$entries][$map](T.ListOfnum(), dart.fn(entry => T.JSArrayOfnum().of([entry.key, entry.value]), T.MapEntryOfint$doubleToListOfnum()))[$toList]({growable: false});
      _argbAndScoreSorted[$sort](dart.fn((a, b) => a[$_get](1)[$compareTo](b[$_get](1)) * -1, T.ListOfnumAndListOfnumToint()));
      let argbsScoreSorted = _argbAndScoreSorted[$map](core.num, dart.fn(e => e[$_get](0), T.ListOfnumTonum()))[$toList]({growable: false});
      let finalColorsToScore = new (T.IdentityMapOfnum$double()).new();
      for (let differenceDegrees = 90.0; differenceDegrees >= 15.0; differenceDegrees = differenceDegrees - 1) {
        finalColorsToScore[$clear]();
        for (let color of argbsScoreSorted) {
          let duplicateHue = false;
          let cam = dart.nullCheck(argbToHct[$_get](color));
          for (let alreadyChosenColor of finalColorsToScore[$keys]) {
            let alreadyChosenCam = dart.nullCheck(argbToHct[$_get](alreadyChosenColor));
            if (math_utils.MathUtils.differenceDegrees(cam.hue, alreadyChosenCam.hue) < differenceDegrees) {
              duplicateHue = true;
              break;
            }
          }
          if (!duplicateHue) {
            finalColorsToScore[$_set](color, dart.nullCheck(argbToScore[$_get](color)));
          }
        }
        if (finalColorsToScore[$length] >= desired) {
          break;
        }
      }
      let colorsByScoreDescending = finalColorsToScore[$entries][$map](score$._ArgbAndScore, dart.fn(entry => new score$._ArgbAndScore.new(entry.key[$toInt](), entry.value), T.MapEntryOfnum$doubleTo_ArgbAndScore()))[$toList]();
      colorsByScoreDescending[$sort]();
      if (colorsByScoreDescending[$isEmpty]) {
        return T.JSArrayOfint().of([4282549748]);
      }
      return colorsByScoreDescending[$map](core.int, dart.fn(e => e.argb, T._ArgbAndScoreToint()))[$toList]();
    }
    static _filter(colorsToExcitedProportion, argbToHct) {
      let filtered = T.JSArrayOfint().of([]);
      for (let entry of argbToHct[$entries]) {
        let color = entry.key;
        let cam = entry.value;
        let proportion = dart.nullCheck(colorsToExcitedProportion[$_get](color));
        if (cam.chroma >= score$.Score._cutoffChroma && proportion > score$.Score._cutoffExcitedProportion) {
          filtered[$add](color);
        }
      }
      return filtered;
    }
    static argbToProportion(argbToCount) {
      let totalPopulation = argbToCount[$values][$reduce](dart.fn((a, b) => a + b, T.intAndintToint()))[$floorToDouble]();
      let argbToHct = argbToCount[$map](core.int, hct$.Hct, dart.fn((key, value) => new (T.MapEntryOfint$Hct()).__(key, hct$.Hct.fromInt(key)), T.intAndintToMapEntryOfint$Hct()));
      let hueProportions = T.ListOfdouble().filled(360, 0.0);
      for (let argb of argbToHct[$keys]) {
        let cam = dart.nullCheck(argbToHct[$_get](argb));
        let hue = cam.hue[$floor]();
        hueProportions[$_set](hue, hueProportions[$_get](hue) + dart.nullCheck(argbToCount[$_get](argb)) / totalPopulation);
      }
      let intToProportion = new (T.IdentityMapOfint$double()).new();
      for (let entry of argbToHct[$entries]) {
        let argb = entry.key;
        let cam = entry.value;
        let hue = cam.hue[$round]();
        let excitedProportion = 0.0;
        for (let i = hue - 15; i < hue + 15; i = i + 1) {
          let neighborHue = math_utils.MathUtils.sanitizeDegreesInt(i);
          excitedProportion = excitedProportion + hueProportions[$_get](neighborHue);
        }
        intToProportion[$_set](argb, excitedProportion);
      }
      return intToProportion;
    }
    static ['_#new#tearOff']() {
      return new score$.Score.new();
    }
  };
  (score$.Score.new = function() {
    ;
  }).prototype = score$.Score.prototype;
  dart.addTypeTests(score$.Score);
  dart.addTypeCaches(score$.Score);
  dart.setStaticMethodSignature(score$.Score, () => ['score', '_filter', 'argbToProportion']);
  dart.setLibraryUri(score$.Score, I[0]);
  dart.setStaticFieldSignature(score$.Score, () => ['_targetChroma', '_weightProportion', '_weightChromaAbove', '_weightChromaBelow', '_cutoffChroma', '_cutoffExcitedProportion']);
  dart.defineLazy(score$.Score, {
    /*score$.Score._targetChroma*/get _targetChroma() {
      return 48.0;
    },
    /*score$.Score._weightProportion*/get _weightProportion() {
      return 0.7;
    },
    /*score$.Score._weightChromaAbove*/get _weightChromaAbove() {
      return 0.3;
    },
    /*score$.Score._weightChromaBelow*/get _weightChromaBelow() {
      return 0.1;
    },
    /*score$.Score._cutoffChroma*/get _cutoffChroma() {
      return 5.0;
    },
    /*score$.Score._cutoffExcitedProportion*/get _cutoffExcitedProportion() {
      return 0.01;
    }
  }, false);
  dart.trackLibraries("packages/material_color_utilities/score/score.dart", {
    "package:material_color_utilities/score/score.dart": score$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["score.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/material_color_utilities/score/score.dart.lib.js"}');
  // Exports:
  return {
    score__score: score$
  };
}));

//# sourceMappingURL=score.dart.lib.js.map
