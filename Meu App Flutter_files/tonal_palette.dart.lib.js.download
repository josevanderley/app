// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/material_color_utilities/palettes/tonal_palette.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/hct/hct.dart', 'packages/collection/src/equality.dart'], (function load__packages__material_color_utilities__palettes__tonal_palette_dart(dart_sdk, packages__material_color_utilities__hct__hct$46dart, packages__collection__src__equality$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const hct = packages__material_color_utilities__hct__hct$46dart.hct__hct;
  const equality = packages__collection__src__equality$46dart.src__equality;
  var tonal_palette = Object.create(dart.library);
  var $length = dartx.length;
  var $asMap = dartx.asMap;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $forEach = dartx.forEach;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $containsKey = dartx.containsKey;
  var $toDouble = dartx.toDouble;
  var $putIfAbsent = dartx.putIfAbsent;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    IdentityMapOfint$int: () => (T.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))(),
    intAndintTovoid: () => (T.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    intToint: () => (T.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 99, 100], core.int);
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/Users/Ornare/AppData/Local/Pub/Cache/hosted/pub.dev/material_color_utilities-0.5.0/lib/palettes/tonal_palette.dart",
    "package:material_color_utilities/palettes/tonal_palette.dart"
  ];
  var _cache = dart.privateName(tonal_palette, "_cache");
  var _hue = dart.privateName(tonal_palette, "_hue");
  var _chroma = dart.privateName(tonal_palette, "_chroma");
  tonal_palette.TonalPalette = class TonalPalette extends core.Object {
    get hue() {
      let t$360;
      t$360 = this[_hue];
      return t$360 == null ? 0.0 : t$360;
    }
    get chroma() {
      let t$360;
      t$360 = this[_chroma];
      return t$360 == null ? 0.0 : t$360;
    }
    static ['_#_fromHueAndChroma#tearOff'](hue, chroma) {
      return new tonal_palette.TonalPalette._fromHueAndChroma(hue, chroma);
    }
    static ['_#_fromCache#tearOff'](cache) {
      return new tonal_palette.TonalPalette._fromCache(cache);
    }
    static of(hue, chroma) {
      return new tonal_palette.TonalPalette._fromHueAndChroma(hue, chroma);
    }
    static fromHct(hct) {
      return new tonal_palette.TonalPalette._fromHueAndChroma(hct.hue, hct.chroma);
    }
    static fromList(colors) {
      if (!(colors[$length] === tonal_palette.TonalPalette.commonSize)) dart.assertFailed(null, I[0], 79, 12, "colors.length == commonSize");
      let cache = new (T.IdentityMapOfint$int()).new();
      tonal_palette.TonalPalette.commonTones[$asMap]()[$forEach](dart.fn((index, toneValue) => {
        let t$362, t$361, t$360;
        t$360 = cache;
        t$361 = toneValue;
        t$362 = colors[$_get](index);
        t$360[$_set](t$361, t$362);
        return t$362;
      }, T.intAndintTovoid()));
      return new tonal_palette.TonalPalette._fromCache(cache);
    }
    get asList() {
      return tonal_palette.TonalPalette.commonTones[$map](core.int, dart.fn(tone => this.get(tone), T.intToint()))[$toList]();
    }
    get(tone) {
      if (this[_hue] == null || this[_chroma] == null) {
        if (!this[_cache][$containsKey](tone)) {
          dart.throw(new core.ArgumentError.value(tone, "tone", "When a TonalPalette is created with fromList, tone must be one of " + dart.str(tonal_palette.TonalPalette.commonTones)));
        } else {
          return dart.nullCheck(this[_cache][$_get](tone));
        }
      }
      let chroma = tone >= 90.0 ? math.min(core.double, dart.nullCheck(this[_chroma]), 40.0) : dart.nullCheck(this[_chroma]);
      return this[_cache][$putIfAbsent](tone, dart.fn(() => hct.Hct.from(dart.nullCheck(this[_hue]), chroma, tone[$toDouble]()).toInt(), T.VoidToint()));
    }
    getHct(tone) {
      if (this[_hue] == null || this[_chroma] == null) {
        if (!this[_cache][$containsKey](tone)) {
          dart.throw(new core.ArgumentError.value(tone, "tone", "When a TonalPalette is created with fromList, tone must be one of " + dart.str(tonal_palette.TonalPalette.commonTones)));
        }
      }
      return hct.Hct.from(dart.nullCheck(this[_hue]), dart.nullCheck(this[_chroma]), tone);
    }
    _equals(other) {
      if (other == null) return false;
      if (tonal_palette.TonalPalette.is(other)) {
        if (this[_hue] != null && this[_chroma] != null && other[_hue] != null && other[_chroma] != null) {
          return this[_hue] == other[_hue] && this[_chroma] == other[_chroma];
        } else {
          return new equality.ListEquality.new().equals(this.asList, other.asList);
        }
      }
      return false;
    }
    get hashCode() {
      if (this[_hue] != null && this[_chroma] != null) {
        return core.Object.hash(this[_hue], this[_chroma]);
      } else {
        return core.Object.hashAll(this.asList);
      }
    }
    toString() {
      if (this[_hue] != null && this[_chroma] != null) {
        return "TonalPalette.of(" + dart.str(this[_hue]) + ", " + dart.str(this[_chroma]) + ")";
      } else {
        return "TonalPalette.fromList(" + dart.str(this[_cache]) + ")";
      }
    }
  };
  (tonal_palette.TonalPalette._fromHueAndChroma = function(hue, chroma) {
    this[_cache] = new (T.IdentityMapOfint$int()).new();
    this[_hue] = hue;
    this[_chroma] = chroma;
    ;
  }).prototype = tonal_palette.TonalPalette.prototype;
  (tonal_palette.TonalPalette._fromCache = function(cache) {
    this[_cache] = cache;
    this[_hue] = null;
    this[_chroma] = null;
    ;
  }).prototype = tonal_palette.TonalPalette.prototype;
  dart.addTypeTests(tonal_palette.TonalPalette);
  dart.addTypeCaches(tonal_palette.TonalPalette);
  dart.setMethodSignature(tonal_palette.TonalPalette, () => dart.global.Object.setPrototypeOf({
    get: dart.fnType(core.int, [core.int]),
    getHct: dart.fnType(hct.Hct, [core.double])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(tonal_palette.TonalPalette))));
  dart.setStaticMethodSignature(tonal_palette.TonalPalette, () => ['of', 'fromHct', 'fromList']);
  dart.setGetterSignature(tonal_palette.TonalPalette, () => dart.global.Object.setPrototypeOf({
    hue: core.double,
    chroma: core.double,
    asList: core.List$(core.int)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(tonal_palette.TonalPalette))));
  dart.setLibraryUri(tonal_palette.TonalPalette, I[1]);
  dart.setFieldSignature(tonal_palette.TonalPalette, () => dart.global.Object.setPrototypeOf({
    [_hue]: dart.finalFieldType(dart.nullable(core.double)),
    [_chroma]: dart.finalFieldType(dart.nullable(core.double)),
    [_cache]: dart.finalFieldType(core.Map$(core.int, core.int))
  }, dart.getFields(dart.global.Object.getPrototypeOf(tonal_palette.TonalPalette))));
  dart.setStaticFieldSignature(tonal_palette.TonalPalette, () => ['commonTones', 'commonSize']);
  dart.defineExtensionMethods(tonal_palette.TonalPalette, ['_equals', 'toString']);
  dart.defineExtensionAccessors(tonal_palette.TonalPalette, ['hashCode']);
  dart.defineLazy(tonal_palette.TonalPalette, {
    /*tonal_palette.TonalPalette.commonTones*/get commonTones() {
      return C[0] || CT.C0;
    },
    /*tonal_palette.TonalPalette.commonSize*/get commonSize() {
      return tonal_palette.TonalPalette.commonTones[$length];
    }
  }, false);
  dart.trackLibraries("packages/material_color_utilities/palettes/tonal_palette.dart", {
    "package:material_color_utilities/palettes/tonal_palette.dart": tonal_palette
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tonal_palette.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDoB;6BAAQ;IAAG;;;AAER;6BAAW;IAAG;;;;;;;cAcL,KAAY;AACxC,YAAoB,kDAAkB,GAAG,EAAE,MAAM;IACnD;mBAGgC;AAC9B,YAAoB,kDAAkB,AAAI,GAAD,MAAM,AAAI,GAAD;IACpD;oBAKuC;AACrC,YAAO,AAAO,AAAO,MAAR,cAAW;AACpB,kBAAkB;AAE6C,MADnE,AAAY,AAAQ,2DAChB,SAAK,OAAW;;AAAc,qBAAK;gBAAC,SAAS;gBAAI,AAAM,MAAA,QAAC,KAAK;QAA1B;;;AACvC,YAAoB,2CAAW,KAAK;IACtC;;AAKwB,YAAA,AAAY,AAA6B,wDAAzB,QAAK,QAAS,SAAI,IAAI;IAAW;QAQ7D;AACV,UAAI,AAAK,sBAAW,AAAQ;AAC1B,aAAK,AAAO,2BAAY,IAAI;AAMxB,UALF,WAAqB,6BACnB,IAAI,EACJ,QAAM,AACN,gFACM;;AAGR,gBAAmB,gBAAZ,AAAM,oBAAC,IAAI;;;AAGhB,mBAAU,AAAK,IAAD,IAAI,OAAa,sBAAW,eAAP,gBAAU,QAAe,eAAP;AAC3D,YAAO,AAAO,4BACV,IAAI,EAAE,cAAU,AAAqC,aAA5B,eAAJ,aAAO,MAAM,EAAE,AAAK,IAAD;IAC9C;WAEkB;AAChB,UAAI,AAAK,sBAAW,AAAQ;AAC1B,aAAK,AAAO,2BAAY,IAAI;AAMxB,UALF,WAAqB,6BACnB,IAAI,EACJ,QAAM,AACN,gFACM;;;AAIZ,YAAW,cAAS,eAAJ,aAAc,eAAP,gBAAU,IAAI;IACvC;YAGwB;;AACtB,UAAU,8BAAN,KAAK;AACP,YAAI,sBACA,yBACA,AAAM,KAAD,kBACL,AAAM,KAAD;AAEP,gBAAO,AAAK,AAAc,eAAX,AAAM,KAAD,UAAS,AAAQ,iBAAG,AAAM,KAAD;;AAE7C,gBAAO,AAAe,wCAAO,aAAQ,AAAM,KAAD;;;AAG9C,YAAO;IACT;;AAIE,UAAI,sBAAgB;AAClB,cAAc,kBAAK,YAAM;;AAEzB,cAAc,qBAAQ;;IAE1B;;AAIE,UAAI,sBAAgB;AAClB,cAAO,AAAkC,+BAAhB,cAAI,gBAAG,iBAAO;;AAEvC,cAAO,AAAgC,qCAAR,gBAAM;;IAEzC;;2DA1GsC,KAAY;IACrC,eAAE;IACJ,aAAE,GAAG;IACF,gBAAE,MAAM;;;oDAEgB;IACzB,eAAE,KAAK;IACT,aAAE;IACC,gBAAE;;EAAI;;;;;;;;;;;;;;;;;;;;;;;MAhCG,sCAAW;;;MAgBrB,qCAAU;YAAG,AAAY","file":"../../../../../../../../../../../packages/material_color_utilities/palettes/tonal_palette.dart.lib.js"}');
  // Exports:
  return {
    palettes__tonal_palette: tonal_palette
  };
}));

//# sourceMappingURL=tonal_palette.dart.lib.js.map
