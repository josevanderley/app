// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/_network_image_web.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/capabilities.dart', 'packages/flutter/src/services/dom.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/image_cache.dart', 'packages/flutter/src/painting/binding.dart', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/foundation/_platform_web.dart'], (function load__packages__flutter__src__painting___network_image_web_dart(dart_sdk, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__capabilities$46dart, packages__flutter__src__services__dom$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__image_cache$46dart, packages__flutter__src__painting__binding$46dart, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__foundation___platform_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js_interop = dart_sdk.js_interop;
  const js_util = dart_sdk.js_util;
  const typed_data = dart_sdk.typed_data;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const capabilities = packages__flutter__src__foundation__capabilities$46dart.src__foundation__capabilities;
  const dom = packages__flutter__src__services__dom$46dart.src__services__dom;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const image_cache = packages__flutter__src__painting__image_cache$46dart.src__painting__image_cache;
  const binding = packages__flutter__src__painting__binding$46dart.src__painting__binding;
  const asset_bundle = packages__flutter__src__services__text_editing_delta$46dart.src__services__asset_bundle;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  var _network_image_web = Object.create(dart.library);
  var image_provider = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $forEach = dartx.forEach;
  var $asUint8List = dartx.asUint8List;
  var $lengthInBytes = dartx.lengthInBytes;
  var $runtimeType = dartx.runtimeType;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $_equals = dartx._equals;
  var $buffer = dartx.buffer;
  var $truncate = dartx.truncate;
  var $floor = dartx.floor;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    SynchronousFutureOfNetworkImage: () => (T$.SynchronousFutureOfNetworkImage = dart.constFn(synchronous_future.SynchronousFuture$(_network_image_web.NetworkImage)))(),
    StreamControllerOfImageChunkEvent: () => (T$.StreamControllerOfImageChunkEvent = dart.constFn(async.StreamController$(image_stream.ImageChunkEvent)))(),
    ImageProviderOfObject: () => (T$.ImageProviderOfObject = dart.constFn(image_provider.ImageProvider$(core.Object)))(),
    DiagnosticsPropertyOfImageProviderOfObject: () => (T$.DiagnosticsPropertyOfImageProviderOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(T$.ImageProviderOfObject())))(),
    DiagnosticsPropertyOfNetworkImage: () => (T$.DiagnosticsPropertyOfNetworkImage = dart.constFn(diagnostics.DiagnosticsProperty$(_network_image_web.NetworkImage)))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    ListOfDiagnosticsNode: () => (T$.ListOfDiagnosticsNode = dart.constFn(core.List$(diagnostics.DiagnosticsNode)))(),
    VoidToListOfDiagnosticsNode: () => (T$.VoidToListOfDiagnosticsNode = dart.constFn(dart.fnType(T$.ListOfDiagnosticsNode(), [])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    CompleterOfDomXMLHttpRequest: () => (T$.CompleterOfDomXMLHttpRequest = dart.constFn(async.Completer$(_interceptors.JavaScriptObject)))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    DomEventTovoid: () => (T$.DomEventTovoid = dart.constFn(dart.fnType(dart.void, [_interceptors.JavaScriptObject])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    ObjectAndStackTraceNTovoid: () => (T$.ObjectAndStackTraceNTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, T$.StackTraceN()])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    DiagnosticsPropertyOfImageConfiguration: () => (T$.DiagnosticsPropertyOfImageConfiguration = dart.constFn(diagnostics.DiagnosticsProperty$(image_provider.ImageConfiguration)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    ImageCacheStatusN: () => (T$.ImageCacheStatusN = dart.constFn(dart.nullable(image_cache.ImageCacheStatus)))(),
    CompleterOfImageCacheStatusN: () => (T$.CompleterOfImageCacheStatusN = dart.constFn(async.Completer$(T$.ImageCacheStatusN())))(),
    ObjectAndStackTraceNToFutureOfvoid: () => (T$.ObjectAndStackTraceNToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.Object, T$.StackTraceN()])))(),
    VoidToImageStreamCompleter: () => (T$.VoidToImageStreamCompleter = dart.constFn(dart.fnType(image_stream.ImageStreamCompleter, [])))(),
    VoidToDomXMLHttpRequest: () => (T$.VoidToDomXMLHttpRequest = dart.constFn(dart.fnType(_interceptors.JavaScriptObject, [])))(),
    DiagnosticsPropertyOfAssetBundleImageKey: () => (T$.DiagnosticsPropertyOfAssetBundleImageKey = dart.constFn(diagnostics.DiagnosticsProperty$(image_provider.AssetBundleImageKey)))(),
    FutureOfCodec: () => (T$.FutureOfCodec = dart.constFn(async.Future$(ui.Codec)))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    Uint8List__ToFutureOfCodec: () => (T$.Uint8List__ToFutureOfCodec = dart.constFn(dart.fnType(T$.FutureOfCodec(), [typed_data.Uint8List], {allowUpscaling: T$.boolN(), cacheHeight: T$.intN(), cacheWidth: T$.intN()}, {})))(),
    ImmutableBuffer__ToFutureOfCodec: () => (T$.ImmutableBuffer__ToFutureOfCodec = dart.constFn(dart.fnType(T$.FutureOfCodec(), [ui.ImmutableBuffer], {allowUpscaling: T$.boolN(), cacheHeight: T$.intN(), cacheWidth: T$.intN()}, {})))(),
    intAndintToTargetImageSize: () => (T$.intAndintToTargetImageSize = dart.constFn(dart.fnType(ui.TargetImageSize, [core.int, core.int])))(),
    intAndintToNTargetImageSize: () => (T$.intAndintToNTargetImageSize = dart.constFn(dart.nullable(T$.intAndintToTargetImageSize())))(),
    ImmutableBuffer__ToFutureOfCodec$1: () => (T$.ImmutableBuffer__ToFutureOfCodec$1 = dart.constFn(dart.fnType(T$.FutureOfCodec(), [ui.ImmutableBuffer], {getTargetSize: T$.intAndintToNTargetImageSize()}, {})))(),
    SynchronousFutureOfResizeImageKey: () => (T$.SynchronousFutureOfResizeImageKey = dart.constFn(synchronous_future.SynchronousFuture$(image_provider.ResizeImageKey)))(),
    ObjectToNull: () => (T$.ObjectToNull = dart.constFn(dart.fnType(core.Null, [core.Object])))(),
    CompleterOfResizeImageKey: () => (T$.CompleterOfResizeImageKey = dart.constFn(async.Completer$(image_provider.ResizeImageKey)))(),
    SynchronousFutureOfFileImage: () => (T$.SynchronousFutureOfFileImage = dart.constFn(synchronous_future.SynchronousFuture$(image_provider.FileImage)))(),
    SynchronousFutureOfMemoryImage: () => (T$.SynchronousFutureOfMemoryImage = dart.constFn(synchronous_future.SynchronousFuture$(image_provider.MemoryImage)))(),
    SynchronousFutureOfAssetBundleImageKey: () => (T$.SynchronousFutureOfAssetBundleImageKey = dart.constFn(synchronous_future.SynchronousFuture$(image_provider.AssetBundleImageKey)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [ImageConfiguration_platform]: null,
        [ImageConfiguration_size]: null,
        [ImageConfiguration_textDirection]: null,
        [ImageConfiguration_locale]: null,
        [ImageConfiguration_devicePixelRatio]: null,
        [ImageConfiguration_bundle]: null
      }, image_provider.ImageConfiguration.prototype));
    },
    get C1() {
      return C[1] = dart.fn(_network_image_web._httpClient, T$.VoidToDomXMLHttpRequest());
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "exact",
        [_Enum_index]: 0
      }, image_provider.ResizeImagePolicy.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "fit",
        [_Enum_index]: 1
      }, image_provider.ResizeImagePolicy.prototype));
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], image_provider.ResizeImagePolicy);
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/_network_image_web.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/image_provider.dart",
    "package:flutter/src/painting/image_provider.dart",
    "package:flutter/src/painting/_network_image_web.dart"
  ];
  var url$ = dart.privateName(_network_image_web, "NetworkImage.url");
  var scale$ = dart.privateName(_network_image_web, "NetworkImage.scale");
  var headers$ = dart.privateName(_network_image_web, "NetworkImage.headers");
  var _loadAsync = dart.privateName(_network_image_web, "_loadAsync");
  var _imageStreamInformationCollector = dart.privateName(_network_image_web, "_imageStreamInformationCollector");
  var _createErrorHandlerAndKey = dart.privateName(image_provider, "_createErrorHandlerAndKey");
  var ImageConfiguration_platform = dart.privateName(image_provider, "ImageConfiguration.platform");
  var ImageConfiguration_size = dart.privateName(image_provider, "ImageConfiguration.size");
  var ImageConfiguration_textDirection = dart.privateName(image_provider, "ImageConfiguration.textDirection");
  var ImageConfiguration_locale = dart.privateName(image_provider, "ImageConfiguration.locale");
  var ImageConfiguration_devicePixelRatio = dart.privateName(image_provider, "ImageConfiguration.devicePixelRatio");
  var ImageConfiguration_bundle = dart.privateName(image_provider, "ImageConfiguration.bundle");
  const _is_ImageProvider_default = Symbol('_is_ImageProvider_default');
  image_provider.ImageProvider$ = dart.generic(T => {
    var __t$TAndFnTovoid = () => (__t$TAndFnTovoid = dart.constFn(dart.fnType(dart.void, [T, T$.ObjectAndStackTraceNTovoid()])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$TNAndObjectAndStackTraceNToFutureOfvoid = () => (__t$TNAndObjectAndStackTraceNToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [__t$TN(), core.Object, T$.StackTraceN()])))();
    var __t$TToNull = () => (__t$TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    class ImageProvider extends core.Object {
      resolve(configuration) {
        let stream = this.createStream(configuration);
        this[_createErrorHandlerAndKey](configuration, dart.fn((key, errorHandler) => {
          this.resolveStreamForKey(configuration, stream, key, errorHandler);
        }, __t$TAndFnTovoid()), dart.fn((key, exception, stack) => async.async(dart.void, (function*() {
          yield async.awaitWithTypeCheck(T$.FutureOfNull(), null);
          let collector = null;
          if (!dart.fn(() => {
            collector = dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (T$.DiagnosticsPropertyOfImageConfiguration()).new("Image configuration", configuration), new (__t$DiagnosticsPropertyOfT()).new("Image key", key, {defaultValue: null})]), T$.VoidToListOfDiagnosticsNode());
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 379, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n            DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration),\r\n            DiagnosticsProperty<T>('Image key', key, defaultValue: null),\r\n          ];\r\n          return true;\r\n        }()");
          if (stream.completer == null) {
            stream.setCompleter(new image_provider._ErrorImageCompleter.new());
          }
          dart.nullCheck(stream.completer).reportError({exception: exception, stack: stack, context: new assertions.ErrorDescription.new("while resolving an image"), silent: true, informationCollector: collector});
        }).bind(this)), __t$TNAndObjectAndStackTraceNToFutureOfvoid()));
        return stream;
      }
      createStream(configuration) {
        return new image_stream.ImageStream.new();
      }
      obtainCacheStatus(opts) {
        let configuration = opts && 'configuration' in opts ? opts.configuration : null;
        let handleError = opts && 'handleError' in opts ? opts.handleError : null;
        let completer = T$.CompleterOfImageCacheStatusN().new();
        this[_createErrorHandlerAndKey](configuration, dart.fn((key, innerHandleError) => {
          completer.complete(binding.PaintingBinding.instance.imageCache.statusForKey(key));
        }, __t$TAndFnTovoid()), dart.fn((key, exception, stack) => async.async(dart.void, (function*() {
          if (handleError != null) {
            handleError(exception, stack);
          } else {
            let collector = null;
            if (!dart.fn(() => {
              collector = dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (T$.DiagnosticsPropertyOfImageConfiguration()).new("Image configuration", configuration), new (__t$DiagnosticsPropertyOfT()).new("Image key", key, {defaultValue: null})]), T$.VoidToListOfDiagnosticsNode());
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 437, 18, "() {\r\n            collector = () => <DiagnosticsNode>[\r\n              DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n              DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration),\r\n              DiagnosticsProperty<T>('Image key', key, defaultValue: null),\r\n            ];\r\n            return true;\r\n          }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({context: new assertions.ErrorDescription.new("while checking the cache location of an image"), informationCollector: collector, exception: exception, stack: stack}));
            completer.complete();
          }
        }).bind(this)), __t$TNAndObjectAndStackTraceNToFutureOfvoid()));
        return completer.future;
      }
      [_createErrorHandlerAndKey](configuration, successCallback, errorCallback) {
        let obtainedKey = null;
        let didError = false;
        function handleError(exception, stack) {
          return async.async(dart.void, function* handleError() {
            if (didError) {
              return;
            }
            if (!didError) {
              didError = true;
              errorCallback(obtainedKey, exception, stack);
            }
          });
        }
        dart.fn(handleError, T$.ObjectAndStackTraceNToFutureOfvoid());
        let key = null;
        try {
          key = this.obtainKey(configuration);
        } catch (t$36$35e) {
          let error = dart.getThrown(t$36$35e);
          let stackTrace = dart.stackTrace(t$36$35e);
          if (core.Object.is(error)) {
            handleError(error, stackTrace);
            return;
          } else
            throw t$36$35e;
        }
        key.then(dart.void, dart.fn(key => {
          obtainedKey = key;
          try {
            successCallback(key, handleError);
          } catch (t$36$35e) {
            let error = dart.getThrown(t$36$35e);
            let stackTrace = dart.stackTrace(t$36$35e);
            if (core.Object.is(error)) {
              handleError(error, stackTrace);
            } else
              throw t$36$35e;
          }
        }, __t$TToNull())).catchError(handleError);
      }
      resolveStreamForKey(configuration, stream, key, handleError) {
        T.as(key);
        if (stream.completer != null) {
          let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => dart.nullCheck(stream.completer), T$.VoidToImageStreamCompleter()), {onError: handleError});
          if (!(completer == stream.completer)) dart.assertFailed(null, I[1], 523, 14, "identical(completer, stream.completer)");
          return;
        }
        let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => {
          let result = this.loadImage(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodecWithSize'));
          if (image_provider._AbstractImageStreamCompleter.is(result)) {
            result = this.loadBuffer(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodecFromBuffer'));
            if (image_provider._AbstractImageStreamCompleter.is(result)) {
              result = this.load(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodec'));
            }
          }
          return result;
        }, T$.VoidToImageStreamCompleter()), {onError: handleError});
        if (completer != null) {
          stream.setCompleter(completer);
        }
      }
      evict(opts) {
        let cache = opts && 'cache' in opts ? opts.cache : null;
        let configuration = opts && 'configuration' in opts ? opts.configuration : C[0] || CT.C0;
        return async.async(core.bool, (function* evict() {
          cache == null ? cache = binding.imageCache : null;
          let key = (yield this.obtainKey(configuration));
          return cache.evict(key);
        }).bind(this));
      }
      load(key, decode) {
        T.as(key);
        dart.throw(new core.UnsupportedError.new("Implement loadBuffer for faster image loading"));
      }
      loadBuffer(key, decode) {
        T.as(key);
        return new image_provider._AbstractImageStreamCompleter.new();
      }
      loadImage(key, decode) {
        T.as(key);
        return new image_provider._AbstractImageStreamCompleter.new();
      }
      toString() {
        return object.objectRuntimeType(this, "ImageConfiguration") + "()";
      }
    }
    (ImageProvider.new = function() {
      ;
    }).prototype = ImageProvider.prototype;
    dart.addTypeTests(ImageProvider);
    ImageProvider.prototype[_is_ImageProvider_default] = true;
    dart.addTypeCaches(ImageProvider);
    dart.setMethodSignature(ImageProvider, () => dart.global.Object.setPrototypeOf({
      resolve: dart.fnType(image_stream.ImageStream, [image_provider.ImageConfiguration]),
      createStream: dart.fnType(image_stream.ImageStream, [image_provider.ImageConfiguration]),
      obtainCacheStatus: dart.fnType(async.Future$(dart.nullable(image_cache.ImageCacheStatus)), [], {handleError: dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))}, {configuration: image_provider.ImageConfiguration}),
      [_createErrorHandlerAndKey]: dart.fnType(dart.void, [image_provider.ImageConfiguration, dart.fnType(dart.void, [T, dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])]), dart.fnType(async.Future$(dart.void), [dart.nullable(T), core.Object, dart.nullable(core.StackTrace)])]),
      resolveStreamForKey: dart.fnType(dart.void, [image_provider.ImageConfiguration, image_stream.ImageStream, dart.nullable(core.Object), dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])]),
      evict: dart.fnType(async.Future$(core.bool), [], {cache: dart.nullable(image_cache.ImageCache), configuration: image_provider.ImageConfiguration}, {}),
      load: dart.fnType(image_stream.ImageStreamCompleter, [dart.nullable(core.Object), dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})]),
      loadBuffer: dart.fnType(image_stream.ImageStreamCompleter, [dart.nullable(core.Object), dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})]),
      loadImage: dart.fnType(image_stream.ImageStreamCompleter, [dart.nullable(core.Object), dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {getTargetSize: dart.nullable(dart.fnType(ui.TargetImageSize, [core.int, core.int]))}, {})])
    }, dart.getMethods(dart.global.Object.getPrototypeOf(ImageProvider))));
    dart.setLibraryUri(ImageProvider, I[2]);
    dart.defineExtensionMethods(ImageProvider, ['toString']);
    return ImageProvider;
  });
  image_provider.ImageProvider = image_provider.ImageProvider$();
  dart.addTypeTests(image_provider.ImageProvider, _is_ImageProvider_default);
  image_provider.NetworkImage = class NetworkImage extends image_provider.ImageProvider {
    static ['_#new#tearOff'](url, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new _network_image_web.NetworkImage.new(url, {scale: scale, headers: headers});
    }
  };
  dart.addTypeTests(image_provider.NetworkImage);
  dart.addTypeCaches(image_provider.NetworkImage);
  dart.setStaticMethodSignature(image_provider.NetworkImage, () => ['new']);
  dart.setLibraryUri(image_provider.NetworkImage, I[2]);
  _network_image_web.NetworkImage = class NetworkImage extends image_provider.ImageProvider$(image_provider.NetworkImage) {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](url, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new _network_image_web.NetworkImage.new(url, {scale: scale, headers: headers});
    }
    obtainKey(configuration) {
      return new (T$.SynchronousFutureOfNetworkImage()).new(this);
    }
    load(key, decode) {
      image_provider.NetworkImage.as(key);
      let chunkEvents = T$.StreamControllerOfImageChunkEvent().new();
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](_network_image_web.NetworkImage.as(key), null, null, decode, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    loadBuffer(key, decode) {
      image_provider.NetworkImage.as(key);
      let chunkEvents = T$.StreamControllerOfImageChunkEvent().new();
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](_network_image_web.NetworkImage.as(key), null, decode, null, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    loadImage(key, decode) {
      image_provider.NetworkImage.as(key);
      let chunkEvents = T$.StreamControllerOfImageChunkEvent().new();
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](_network_image_web.NetworkImage.as(key), decode, null, null, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    [_imageStreamInformationCollector](key) {
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (T$.DiagnosticsPropertyOfNetworkImage()).new("Image key", _network_image_web.NetworkImage.as(key))]), T$.VoidToListOfDiagnosticsNode());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 109, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n        DiagnosticsProperty<image_provider.ImageProvider>('Image provider', this),\r\n        DiagnosticsProperty<NetworkImage>('Image key', key as NetworkImage),\r\n      ];\r\n      return true;\r\n    }()");
      return collector;
    }
    [_loadAsync](key, decode, decodeBufferDeprecated, decodeDeprecated, chunkEvents) {
      return async.async(ui.Codec, (function* _loadAsync() {
        let t$360, t$360$;
        if (!key._equals(this)) dart.assertFailed(null, I[0], 129, 12, "key == this");
        let resolved = core.Uri.base.resolve(key.url);
        let containsNetworkImageHeaders = (t$360$ = (t$360 = key.headers, t$360 == null ? null : t$360[$isNotEmpty]), t$360$ == null ? false : t$360$);
        if (capabilities.isCanvasKit || containsNetworkImageHeaders) {
          let completer = T$.CompleterOfDomXMLHttpRequest().new();
          let request = _network_image_web.httpRequestFactory();
          dom['DomXMLHttpRequestExtension|open'](request, "GET", key.url, true);
          dom['DomXMLHttpRequestExtension|set#responseType'](request, "arraybuffer");
          if (containsNetworkImageHeaders) {
            dart.nullCheck(key.headers)[$forEach](dart.fn((header, value) => {
              dom['DomXMLHttpRequestExtension|setRequestHeader'](request, header, value);
            }, T$.StringAndStringTovoid()));
          }
          dom['DomEventTargetExtension|addEventListener'](request, "load", dom.createDomEventListener(dart.fn(e => {
            let t$360;
            let status = dom['DomXMLHttpRequestExtension|get#status'](request);
            let accepted = dart.nullCheck(status) >= 200 && dart.notNull(status) < 300;
            let fileUri = status === 0;
            let notModified = status === 304;
            let unknownRedirect = dart.notNull(status) > 307 && dart.notNull(status) < 400;
            let success = accepted || fileUri || notModified || unknownRedirect;
            if (success) {
              completer.complete(request);
            } else {
              completer.completeError(e);
              dart.throw(new image_provider.NetworkImageLoadException.new({statusCode: (t$360 = dom['DomXMLHttpRequestExtension|get#status'](request), t$360 == null ? 400 : t$360), uri: resolved}));
            }
          }, T$.DomEventTovoid())));
          dom['DomEventTargetExtension|addEventListener'](request, "error", dom.createDomEventListener(dart.bind(completer, 'completeError')));
          request.send();
          yield completer.future;
          let bytes = js_interop['JSArrayBufferToByteBuffer|get#toDart'](typed_data.ByteBuffer.as(dart.nullCheck(js_util.getProperty(dart.nullable(T$.ObjectN()), request, "response"))))[$asUint8List]();
          if (bytes[$lengthInBytes] === 0) {
            dart.throw(new image_provider.NetworkImageLoadException.new({statusCode: dart.nullCheck(dom['DomXMLHttpRequestExtension|get#status'](request)), uri: resolved}));
          }
          if (decode != null) {
            let buffer = (yield ui.ImmutableBuffer.fromUint8List(bytes));
            return decode(buffer);
          } else if (decodeBufferDeprecated != null) {
            let buffer = (yield ui.ImmutableBuffer.fromUint8List(bytes));
            return decodeBufferDeprecated(buffer);
          } else {
            if (!(decodeDeprecated != null)) dart.assertFailed(null, I[0], 189, 16, "decodeDeprecated != null");
            return dart.nullCheck(decodeDeprecated)(bytes);
          }
        } else {
          return ui.webOnlyInstantiateImageCodecFromUrl(resolved, {chunkCallback: dart.fn((bytes, total) => {
              chunkEvents.add(new image_stream.ImageChunkEvent.new({cumulativeBytesLoaded: bytes, expectedTotalBytes: total}));
            }, T$.intAndintTovoid())});
        }
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return _network_image_web.NetworkImage.is(other) && other.url === this.url && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.url, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "NetworkImage") + "(\"" + this.url + "\", scale: " + dart.str(this.scale) + ")";
    }
  };
  (_network_image_web.NetworkImage.new = function(url, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[url$] = url;
    this[scale$] = scale;
    this[headers$] = headers;
    dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage).new.call(this);
    ;
  }).prototype = _network_image_web.NetworkImage.prototype;
  dart.addTypeTests(_network_image_web.NetworkImage);
  dart.addTypeCaches(_network_image_web.NetworkImage);
  _network_image_web.NetworkImage[dart.implements] = () => [image_provider.NetworkImage];
  dart.setMethodSignature(_network_image_web.NetworkImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: dart.fnType(async.Future$(_network_image_web.NetworkImage), [image_provider.ImageConfiguration]),
    [_imageStreamInformationCollector]: dart.fnType(dart.nullable(dart.fnType(core.Iterable$(diagnostics.DiagnosticsNode), [])), [image_provider.NetworkImage]),
    [_loadAsync]: dart.fnType(async.Future$(ui.Codec), [_network_image_web.NetworkImage, dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {getTargetSize: dart.nullable(dart.fnType(ui.TargetImageSize, [core.int, core.int]))}, {})), dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})), dart.nullable(dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})), async.StreamController$(image_stream.ImageChunkEvent)])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage))));
  dart.setLibraryUri(_network_image_web.NetworkImage, I[3]);
  dart.setFieldSignature(_network_image_web.NetworkImage, () => dart.global.Object.setPrototypeOf({
    url: dart.finalFieldType(core.String),
    scale: dart.finalFieldType(core.double),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String)))
  }, dart.getFields(dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage))));
  dart.defineExtensionMethods(_network_image_web.NetworkImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(_network_image_web.NetworkImage, ['hashCode']);
  _network_image_web._httpClient = function _httpClient() {
    return _interceptors.JavaScriptObject.as(new js_util.globalThis.XMLHttpRequest());
  };
  _network_image_web.debugRestoreHttpRequestFactory = function debugRestoreHttpRequestFactory() {
    _network_image_web.httpRequestFactory = C[1] || CT.C1;
  };
  dart.defineLazy(_network_image_web, {
    /*_network_image_web.httpRequestFactory*/get httpRequestFactory() {
      return C[1] || CT.C1;
    },
    set httpRequestFactory(value) {}
  }, false);
  const bundle$ = ImageConfiguration_bundle;
  const devicePixelRatio$ = ImageConfiguration_devicePixelRatio;
  const locale$ = ImageConfiguration_locale;
  const textDirection$ = ImageConfiguration_textDirection;
  const size$ = ImageConfiguration_size;
  const platform$ = ImageConfiguration_platform;
  image_provider.ImageConfiguration = class ImageConfiguration extends core.Object {
    get bundle() {
      return this[bundle$];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new image_provider.ImageConfiguration.new({bundle: bundle, devicePixelRatio: devicePixelRatio, locale: locale, textDirection: textDirection, size: size, platform: platform});
    }
    copyWith(opts) {
      let t$362, t$362$, t$362$0, t$362$1, t$362$2, t$362$3;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new image_provider.ImageConfiguration.new({bundle: (t$362 = bundle, t$362 == null ? this.bundle : t$362), devicePixelRatio: (t$362$ = devicePixelRatio, t$362$ == null ? this.devicePixelRatio : t$362$), locale: (t$362$0 = locale, t$362$0 == null ? this.locale : t$362$0), textDirection: (t$362$1 = textDirection, t$362$1 == null ? this.textDirection : t$362$1), size: (t$362$2 = size, t$362$2 == null ? this.size : t$362$2), platform: (t$362$3 = platform, t$362$3 == null ? this.platform : t$362$3)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return image_provider.ImageConfiguration.is(other) && dart.equals(other.bundle, this.bundle) && other.devicePixelRatio == this.devicePixelRatio && dart.equals(other.locale, this.locale) && other.textDirection == this.textDirection && dart.equals(other.size, this.size) && other.platform == this.platform;
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.devicePixelRatio, this.locale, this.size, this.platform);
    }
    toString() {
      let result = new core.StringBuffer.new();
      result.write("ImageConfiguration(");
      let hasArguments = false;
      if (this.bundle != null) {
        result.write("bundle: " + dart.str(this.bundle));
        hasArguments = true;
      }
      if (this.devicePixelRatio != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("devicePixelRatio: " + dart.nullCheck(this.devicePixelRatio)[$toStringAsFixed](1));
        hasArguments = true;
      }
      if (this.locale != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("locale: " + dart.str(this.locale));
        hasArguments = true;
      }
      if (this.textDirection != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("textDirection: " + dart.str(this.textDirection));
        hasArguments = true;
      }
      if (this.size != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("size: " + dart.str(this.size));
        hasArguments = true;
      }
      if (this.platform != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("platform: " + core['EnumName|get#name'](dart.nullCheck(this.platform)));
        hasArguments = true;
      }
      result.write(")");
      return result.toString();
    }
  };
  (image_provider.ImageConfiguration.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    this[bundle$] = bundle;
    this[devicePixelRatio$] = devicePixelRatio;
    this[locale$] = locale;
    this[textDirection$] = textDirection;
    this[size$] = size;
    this[platform$] = platform;
    ;
  }).prototype = image_provider.ImageConfiguration.prototype;
  dart.addTypeTests(image_provider.ImageConfiguration);
  dart.addTypeCaches(image_provider.ImageConfiguration);
  dart.setMethodSignature(image_provider.ImageConfiguration, () => dart.global.Object.setPrototypeOf({copyWith: dart.fnType(image_provider.ImageConfiguration, [], {bundle: dart.nullable(asset_bundle.AssetBundle), devicePixelRatio: dart.nullable(core.double), locale: dart.nullable(ui.Locale), platform: dart.nullable(platform.TargetPlatform), size: dart.nullable(ui.Size), textDirection: dart.nullable(ui.TextDirection)}, {})}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ImageConfiguration))));
  dart.setLibraryUri(image_provider.ImageConfiguration, I[2]);
  dart.setFieldSignature(image_provider.ImageConfiguration, () => dart.global.Object.setPrototypeOf({
    bundle: dart.finalFieldType(dart.nullable(asset_bundle.AssetBundle)),
    devicePixelRatio: dart.finalFieldType(dart.nullable(core.double)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    size: dart.finalFieldType(dart.nullable(ui.Size)),
    platform: dart.finalFieldType(dart.nullable(platform.TargetPlatform))
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ImageConfiguration))));
  dart.setStaticFieldSignature(image_provider.ImageConfiguration, () => ['empty']);
  dart.defineExtensionMethods(image_provider.ImageConfiguration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ImageConfiguration, ['hashCode']);
  dart.defineLazy(image_provider.ImageConfiguration, {
    /*image_provider.ImageConfiguration.empty*/get empty() {
      return C[0] || CT.C0;
    }
  }, false);
  image_provider._AbstractImageStreamCompleter = class _AbstractImageStreamCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff']() {
      return new image_provider._AbstractImageStreamCompleter.new();
    }
  };
  (image_provider._AbstractImageStreamCompleter.new = function() {
    dart.global.Object.getPrototypeOf(image_provider._AbstractImageStreamCompleter).new.call(this);
    ;
  }).prototype = image_provider._AbstractImageStreamCompleter.prototype;
  dart.addTypeTests(image_provider._AbstractImageStreamCompleter);
  dart.addTypeCaches(image_provider._AbstractImageStreamCompleter);
  dart.setLibraryUri(image_provider._AbstractImageStreamCompleter, I[2]);
  var bundle$0 = dart.privateName(image_provider, "AssetBundleImageKey.bundle");
  var name$ = dart.privateName(image_provider, "AssetBundleImageKey.name");
  var scale$0 = dart.privateName(image_provider, "AssetBundleImageKey.scale");
  image_provider.AssetBundleImageKey = class AssetBundleImageKey extends core.Object {
    get bundle() {
      return this[bundle$0];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get scale() {
      return this[scale$0];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      return new image_provider.AssetBundleImageKey.new({bundle: bundle, name: name, scale: scale});
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return image_provider.AssetBundleImageKey.is(other) && other.bundle[$_equals](this.bundle) && other.name === this.name && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.name, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "AssetBundleImageKey") + "(bundle: " + dart.str(this.bundle) + ", name: \"" + this.name + "\", scale: " + dart.str(this.scale) + ")";
    }
  };
  (image_provider.AssetBundleImageKey.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    this[bundle$0] = bundle;
    this[name$] = name;
    this[scale$0] = scale;
    ;
  }).prototype = image_provider.AssetBundleImageKey.prototype;
  dart.addTypeTests(image_provider.AssetBundleImageKey);
  dart.addTypeCaches(image_provider.AssetBundleImageKey);
  dart.setLibraryUri(image_provider.AssetBundleImageKey, I[2]);
  dart.setFieldSignature(image_provider.AssetBundleImageKey, () => dart.global.Object.setPrototypeOf({
    bundle: dart.finalFieldType(asset_bundle.AssetBundle),
    name: dart.finalFieldType(core.String),
    scale: dart.finalFieldType(core.double)
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageKey))));
  dart.defineExtensionMethods(image_provider.AssetBundleImageKey, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.AssetBundleImageKey, ['hashCode']);
  var _loadAsync$ = dart.privateName(image_provider, "_loadAsync");
  image_provider.AssetBundleImageProvider = class AssetBundleImageProvider extends image_provider.ImageProvider$(image_provider.AssetBundleImageKey) {
    loadImage(key, decode) {
      image_provider.AssetBundleImageKey.as(key);
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (T$.DiagnosticsPropertyOfAssetBundleImageKey()).new("Image key", key)]), T$.VoidToListOfDiagnosticsNode());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 742, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n            DiagnosticsProperty<AssetBundleImageKey>('Image key', key),\r\n          ];\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    loadBuffer(key, decode) {
      image_provider.AssetBundleImageKey.as(key);
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (T$.DiagnosticsPropertyOfAssetBundleImageKey()).new("Image key", key)]), T$.VoidToListOfDiagnosticsNode());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 762, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n        DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n        DiagnosticsProperty<AssetBundleImageKey>('Image key', key),\r\n      ];\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decodeBufferDeprecated: decode}), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    load(key, decode) {
      image_provider.AssetBundleImageKey.as(key);
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfImageProviderOfObject()).new("Image provider", this), new (T$.DiagnosticsPropertyOfAssetBundleImageKey()).new("Image key", key)]), T$.VoidToListOfDiagnosticsNode());
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 780, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n        DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n        DiagnosticsProperty<AssetBundleImageKey>('Image key', key),\r\n      ];\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decodeDeprecated: decode}), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      let decodeBufferDeprecated = opts && 'decodeBufferDeprecated' in opts ? opts.decodeBufferDeprecated : null;
      let decodeDeprecated = opts && 'decodeDeprecated' in opts ? opts.decodeDeprecated : null;
      return async.async(ui.Codec, function* _loadAsync() {
        if (decode != null) {
          let buffer = null;
          try {
            buffer = (yield key.bundle.loadBuffer(key.name));
          } catch (t$36$35e) {
            let t$36$35ex = dart.getThrown(t$36$35e);
            if (assertions.FlutterError.is(t$36$35ex)) {
              binding.PaintingBinding.instance.imageCache.evict(key);
              dart.rethrow(t$36$35e);
            } else
              throw t$36$35e;
          }
          return decode(buffer);
        }
        if (decodeBufferDeprecated != null) {
          let buffer = null;
          try {
            buffer = (yield key.bundle.loadBuffer(key.name));
          } catch (t$36$35e$) {
            let t$36$35ex$ = dart.getThrown(t$36$35e$);
            if (assertions.FlutterError.is(t$36$35ex$)) {
              binding.PaintingBinding.instance.imageCache.evict(key);
              dart.rethrow(t$36$35e$);
            } else
              throw t$36$35e$;
          }
          return decodeBufferDeprecated(buffer);
        }
        let data = null;
        try {
          data = (yield key.bundle.load(key.name));
        } catch (t$36$35e$0) {
          let t$36$35ex$0 = dart.getThrown(t$36$35e$0);
          if (assertions.FlutterError.is(t$36$35ex$0)) {
            binding.PaintingBinding.instance.imageCache.evict(key);
            dart.rethrow(t$36$35e$0);
          } else
            throw t$36$35e$0;
        }
        return dart.nullCheck(decodeDeprecated)(data[$buffer][$asUint8List]());
      });
    }
  };
  (image_provider.AssetBundleImageProvider.new = function() {
    dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageProvider).new.call(this);
    ;
  }).prototype = image_provider.AssetBundleImageProvider.prototype;
  dart.addTypeTests(image_provider.AssetBundleImageProvider);
  dart.addTypeCaches(image_provider.AssetBundleImageProvider);
  dart.setMethodSignature(image_provider.AssetBundleImageProvider, () => dart.global.Object.setPrototypeOf({[_loadAsync$]: dart.fnType(async.Future$(ui.Codec), [image_provider.AssetBundleImageKey], {decode: dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {getTargetSize: dart.nullable(dart.fnType(ui.TargetImageSize, [core.int, core.int]))}, {})), decodeBufferDeprecated: dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})), decodeDeprecated: dart.nullable(dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {}))}, {})}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageProvider))));
  dart.setLibraryUri(image_provider.AssetBundleImageProvider, I[2]);
  var _providerCacheKey$ = dart.privateName(image_provider, "ResizeImageKey._providerCacheKey");
  var _policy$ = dart.privateName(image_provider, "ResizeImageKey._policy");
  var _width$ = dart.privateName(image_provider, "ResizeImageKey._width");
  var _height$ = dart.privateName(image_provider, "ResizeImageKey._height");
  var _allowUpscaling$ = dart.privateName(image_provider, "ResizeImageKey._allowUpscaling");
  var _providerCacheKey = dart.privateName(image_provider, "_providerCacheKey");
  var _policy = dart.privateName(image_provider, "_policy");
  var _width = dart.privateName(image_provider, "_width");
  var _height = dart.privateName(image_provider, "_height");
  var _allowUpscaling = dart.privateName(image_provider, "_allowUpscaling");
  image_provider.ResizeImageKey = class ResizeImageKey extends core.Object {
    get [_providerCacheKey]() {
      return this[_providerCacheKey$];
    }
    set [_providerCacheKey](value) {
      super[_providerCacheKey] = value;
    }
    get [_policy]() {
      return this[_policy$];
    }
    set [_policy](value) {
      super[_policy] = value;
    }
    get [_width]() {
      return this[_width$];
    }
    set [_width](value) {
      super[_width] = value;
    }
    get [_height]() {
      return this[_height$];
    }
    set [_height](value) {
      super[_height] = value;
    }
    get [_allowUpscaling]() {
      return this[_allowUpscaling$];
    }
    set [_allowUpscaling](value) {
      super[_allowUpscaling] = value;
    }
    static ['_#_#tearOff'](_providerCacheKey, _policy, _width, _height, _allowUpscaling) {
      return new image_provider.ResizeImageKey.__(_providerCacheKey, _policy, _width, _height, _allowUpscaling);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return image_provider.ResizeImageKey.is(other) && other[_providerCacheKey][$_equals](this[_providerCacheKey]) && other[_policy] === this[_policy] && other[_width] == this[_width] && other[_height] == this[_height] && other[_allowUpscaling] === this[_allowUpscaling];
    }
    get hashCode() {
      return core.Object.hash(this[_providerCacheKey], this[_policy], this[_width], this[_height], this[_allowUpscaling]);
    }
  };
  (image_provider.ResizeImageKey.__ = function(_providerCacheKey, _policy, _width, _height, _allowUpscaling) {
    this[_providerCacheKey$] = _providerCacheKey;
    this[_policy$] = _policy;
    this[_width$] = _width;
    this[_height$] = _height;
    this[_allowUpscaling$] = _allowUpscaling;
    ;
  }).prototype = image_provider.ResizeImageKey.prototype;
  dart.addTypeTests(image_provider.ResizeImageKey);
  dart.addTypeCaches(image_provider.ResizeImageKey);
  dart.setLibraryUri(image_provider.ResizeImageKey, I[2]);
  dart.setFieldSignature(image_provider.ResizeImageKey, () => dart.global.Object.setPrototypeOf({
    [_providerCacheKey]: dart.finalFieldType(core.Object),
    [_policy]: dart.finalFieldType(image_provider.ResizeImagePolicy),
    [_width]: dart.finalFieldType(dart.nullable(core.int)),
    [_height]: dart.finalFieldType(dart.nullable(core.int)),
    [_allowUpscaling]: dart.finalFieldType(core.bool)
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ResizeImageKey))));
  dart.defineExtensionMethods(image_provider.ResizeImageKey, ['_equals']);
  dart.defineExtensionAccessors(image_provider.ResizeImageKey, ['hashCode']);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  image_provider.ResizeImagePolicy = class ResizeImagePolicy extends core._Enum {
    [_enumToString]() {
      return "ResizeImagePolicy." + this[_name];
    }
  };
  (image_provider.ResizeImagePolicy.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(image_provider.ResizeImagePolicy).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = image_provider.ResizeImagePolicy.prototype;
  dart.addTypeTests(image_provider.ResizeImagePolicy);
  dart.addTypeCaches(image_provider.ResizeImagePolicy);
  dart.setMethodSignature(image_provider.ResizeImagePolicy, () => dart.global.Object.setPrototypeOf({[_enumToString]: dart.fnType(core.String, [])}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ResizeImagePolicy))));
  dart.setLibraryUri(image_provider.ResizeImagePolicy, I[2]);
  dart.setStaticFieldSignature(image_provider.ResizeImagePolicy, () => ['values', 'exact', 'fit']);
  dart.defineLazy(image_provider.ResizeImagePolicy, {
    /*image_provider.ResizeImagePolicy.values*/get values() {
      return C[2] || CT.C2;
    },
    /*image_provider.ResizeImagePolicy.exact*/get exact() {
      return C[3] || CT.C3;
    },
    /*image_provider.ResizeImagePolicy.fit*/get fit() {
      return C[4] || CT.C4;
    }
  }, false);
  var imageProvider$ = dart.privateName(image_provider, "ResizeImage.imageProvider");
  var width$ = dart.privateName(image_provider, "ResizeImage.width");
  var height$ = dart.privateName(image_provider, "ResizeImage.height");
  var policy$ = dart.privateName(image_provider, "ResizeImage.policy");
  var allowUpscaling$ = dart.privateName(image_provider, "ResizeImage.allowUpscaling");
  image_provider.ResizeImage = class ResizeImage extends image_provider.ImageProvider$(image_provider.ResizeImageKey) {
    get imageProvider() {
      return this[imageProvider$];
    }
    set imageProvider(value) {
      super.imageProvider = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get policy() {
      return this[policy$];
    }
    set policy(value) {
      super.policy = value;
    }
    get allowUpscaling() {
      return this[allowUpscaling$];
    }
    set allowUpscaling(value) {
      super.allowUpscaling = value;
    }
    static ['_#new#tearOff'](imageProvider, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let policy = opts && 'policy' in opts ? opts.policy : C[3] || CT.C3;
      let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : false;
      return new image_provider.ResizeImage.new(imageProvider, {width: width, height: height, policy: policy, allowUpscaling: allowUpscaling});
    }
    static resizeIfNeeded(cacheWidth, cacheHeight, provider) {
      if (cacheWidth != null || cacheHeight != null) {
        return new image_provider.ResizeImage.new(provider, {width: cacheWidth, height: cacheHeight});
      }
      return provider;
    }
    load(key, decode) {
      image_provider.ResizeImageKey.as(key);
      const decodeResize = (buffer, opts) => {
        let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : null;
        let cacheHeight = opts && 'cacheHeight' in opts ? opts.cacheHeight : null;
        let cacheWidth = opts && 'cacheWidth' in opts ? opts.cacheWidth : null;
        if (!(cacheWidth == null && cacheHeight == null && allowUpscaling == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies cacheWidth, cacheHeight, or allowUpscaling.", I[1], 1339, 9, "cacheWidth == null && cacheHeight == null && allowUpscaling == null");
        return decode(buffer, {cacheWidth: this.width, cacheHeight: this.height, allowUpscaling: this.allowUpscaling});
      };
      dart.fn(decodeResize, T$.Uint8List__ToFutureOfCodec());
      let completer = this.imageProvider.load(key[_providerCacheKey], decodeResize);
      {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key[_width]) + "×" + dart.str(key[_height]) + ")";
      }
      return completer;
    }
    loadBuffer(key, decode) {
      image_provider.ResizeImageKey.as(key);
      const decodeResize = (buffer, opts) => {
        let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : null;
        let cacheHeight = opts && 'cacheHeight' in opts ? opts.cacheHeight : null;
        let cacheWidth = opts && 'cacheWidth' in opts ? opts.cacheWidth : null;
        if (!(cacheWidth == null && cacheHeight == null && allowUpscaling == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies cacheWidth, cacheHeight, or allowUpscaling.", I[1], 1360, 9, "cacheWidth == null && cacheHeight == null && allowUpscaling == null");
        return decode(buffer, {cacheWidth: this.width, cacheHeight: this.height, allowUpscaling: this.allowUpscaling});
      };
      dart.fn(decodeResize, T$.ImmutableBuffer__ToFutureOfCodec());
      let completer = this.imageProvider.loadBuffer(key[_providerCacheKey], decodeResize);
      {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key[_width]) + "×" + dart.str(key[_height]) + ")";
      }
      return completer;
    }
    loadImage(key, decode) {
      image_provider.ResizeImageKey.as(key);
      const decodeResize = (buffer, opts) => {
        let getTargetSize = opts && 'getTargetSize' in opts ? opts.getTargetSize : null;
        if (!(getTargetSize == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies getTargetSize.", I[1], 1378, 9, "getTargetSize == null");
        return decode(buffer, {getTargetSize: dart.fn((intrinsicWidth, intrinsicHeight) => {
            let t$3610, t$3610$;
            switch (this.policy) {
              case C[3] || CT.C3:
                {
                  let targetWidth = this.width;
                  let targetHeight = this.height;
                  if (!this.allowUpscaling) {
                    if (targetWidth != null && dart.notNull(targetWidth) > intrinsicWidth) {
                      targetWidth = intrinsicWidth;
                    }
                    if (targetHeight != null && dart.notNull(targetHeight) > intrinsicHeight) {
                      targetHeight = intrinsicHeight;
                    }
                  }
                  return new ui.TargetImageSize.new({width: targetWidth, height: targetHeight});
                }
              case C[4] || CT.C4:
                {
                  let aspectRatio = intrinsicWidth / intrinsicHeight;
                  let maxWidth = (t$3610 = this.width, t$3610 == null ? intrinsicWidth : t$3610);
                  let maxHeight = (t$3610$ = this.height, t$3610$ == null ? intrinsicHeight : t$3610$);
                  let targetWidth = intrinsicWidth;
                  let targetHeight = intrinsicHeight;
                  if (targetWidth > maxWidth) {
                    targetWidth = maxWidth;
                    targetHeight = (targetWidth / aspectRatio)[$truncate]();
                  }
                  if (targetHeight > maxHeight) {
                    targetHeight = maxHeight;
                    targetWidth = (targetHeight * aspectRatio)[$floor]();
                  }
                  if (this.allowUpscaling) {
                    if (this.width == null) {
                      if (!(this.height != null)) dart.assertFailed(null, I[1], 1417, 24, "height != null");
                      targetHeight = dart.nullCheck(this.height);
                      targetWidth = (targetHeight * aspectRatio)[$floor]();
                    } else if (this.height == null) {
                      targetWidth = dart.nullCheck(this.width);
                      targetHeight = (targetWidth / aspectRatio)[$truncate]();
                    } else {
                      let derivedMaxWidth = (maxHeight * aspectRatio)[$floor]();
                      let derivedMaxHeight = (maxWidth / aspectRatio)[$truncate]();
                      targetWidth = math.min(core.int, maxWidth, derivedMaxWidth);
                      targetHeight = math.min(core.int, maxHeight, derivedMaxHeight);
                    }
                  }
                  return new ui.TargetImageSize.new({width: targetWidth, height: targetHeight});
                }
            }
          }, T$.intAndintToTargetImageSize())});
      };
      dart.fn(decodeResize, T$.ImmutableBuffer__ToFutureOfCodec$1());
      let completer = this.imageProvider.loadImage(key[_providerCacheKey], decodeResize);
      {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key[_width]) + "×" + dart.str(key[_height]) + ")";
      }
      return completer;
    }
    obtainKey(configuration) {
      let completer = null;
      let result = null;
      this.imageProvider.obtainKey(configuration).then(core.Null, dart.fn(key => {
        if (completer == null) {
          result = new (T$.SynchronousFutureOfResizeImageKey()).new(new image_provider.ResizeImageKey.__(key, this.policy, this.width, this.height, this.allowUpscaling));
        } else {
          completer.complete(new image_provider.ResizeImageKey.__(key, this.policy, this.width, this.height, this.allowUpscaling));
        }
      }, T$.ObjectToNull()));
      if (result != null) {
        return dart.nullCheck(result);
      }
      completer = T$.CompleterOfResizeImageKey().new();
      return completer.future;
    }
  };
  (image_provider.ResizeImage.new = function(imageProvider, opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let policy = opts && 'policy' in opts ? opts.policy : C[3] || CT.C3;
    let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : false;
    this[imageProvider$] = imageProvider;
    this[width$] = width;
    this[height$] = height;
    this[policy$] = policy;
    this[allowUpscaling$] = allowUpscaling;
    if (!(width != null || height != null)) dart.assertFailed(null, I[1], 1290, 15, "width != null || height != null");
    dart.global.Object.getPrototypeOf(image_provider.ResizeImage).new.call(this);
    ;
  }).prototype = image_provider.ResizeImage.prototype;
  dart.addTypeTests(image_provider.ResizeImage);
  dart.addTypeCaches(image_provider.ResizeImage);
  dart.setMethodSignature(image_provider.ResizeImage, () => dart.global.Object.setPrototypeOf({obtainKey: dart.fnType(async.Future$(image_provider.ResizeImageKey), [image_provider.ImageConfiguration])}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ResizeImage))));
  dart.setStaticMethodSignature(image_provider.ResizeImage, () => ['resizeIfNeeded']);
  dart.setLibraryUri(image_provider.ResizeImage, I[2]);
  dart.setFieldSignature(image_provider.ResizeImage, () => dart.global.Object.setPrototypeOf({
    imageProvider: dart.finalFieldType(image_provider.ImageProvider$(core.Object)),
    width: dart.finalFieldType(dart.nullable(core.int)),
    height: dart.finalFieldType(dart.nullable(core.int)),
    policy: dart.finalFieldType(image_provider.ResizeImagePolicy),
    allowUpscaling: dart.finalFieldType(core.bool)
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ResizeImage))));
  var file$ = dart.privateName(image_provider, "FileImage.file");
  var scale$1 = dart.privateName(image_provider, "FileImage.scale");
  image_provider.FileImage = class FileImage extends image_provider.ImageProvider {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get scale() {
      return this[scale$1];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](file, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      return new image_provider.FileImage.new(file, {scale: scale});
    }
    obtainKey(configuration) {
      return new (T$.SynchronousFutureOfFileImage()).new(this);
    }
    load(key, decode) {
      image_provider.FileImage.as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decodeDeprecated: decode}), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("Path: " + this.file.path)]), T$.VoidToListOfDiagnosticsNode())});
    }
    loadBuffer(key, decode) {
      image_provider.FileImage.as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decodeBufferDeprecated: decode}), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("Path: " + this.file.path)]), T$.VoidToListOfDiagnosticsNode())});
    }
    loadImage(key, decode) {
      image_provider.FileImage.as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("Path: " + this.file.path)]), T$.VoidToListOfDiagnosticsNode())});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      let decodeBufferDeprecated = opts && 'decodeBufferDeprecated' in opts ? opts.decodeBufferDeprecated : null;
      let decodeDeprecated = opts && 'decodeDeprecated' in opts ? opts.decodeDeprecated : null;
      return async.async(ui.Codec, (function* _loadAsync() {
        if (!key._equals(this)) dart.assertFailed(null, I[1], 1582, 12, "key == this");
        let lengthInBytes = (yield this.file.length());
        if (lengthInBytes === 0) {
          binding.PaintingBinding.instance.imageCache.evict(key);
          dart.throw(new core.StateError.new(dart.str(this.file) + " is empty and cannot be loaded as an image."));
        }
        if (decode != null) {
          if (this.file[$runtimeType]._equals(dart.wrapType(io.File))) {
            return decode(yield ui.ImmutableBuffer.fromFilePath(this.file.path));
          }
          return decode(yield ui.ImmutableBuffer.fromUint8List(yield this.file.readAsBytes()));
        }
        if (decodeBufferDeprecated != null) {
          if (this.file[$runtimeType]._equals(dart.wrapType(io.File))) {
            return decodeBufferDeprecated(yield ui.ImmutableBuffer.fromFilePath(this.file.path));
          }
          return decodeBufferDeprecated(yield ui.ImmutableBuffer.fromUint8List(yield this.file.readAsBytes()));
        }
        return dart.nullCheck(decodeDeprecated)(yield this.file.readAsBytes());
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return image_provider.FileImage.is(other) && other.file.path === this.file.path && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.file.path, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "FileImage") + "(\"" + this.file.path + "\", scale: " + dart.str(this.scale) + ")";
    }
  };
  (image_provider.FileImage.new = function(file, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this[file$] = file;
    this[scale$1] = scale;
    dart.global.Object.getPrototypeOf(image_provider.FileImage).new.call(this);
    ;
  }).prototype = image_provider.FileImage.prototype;
  dart.addTypeTests(image_provider.FileImage);
  dart.addTypeCaches(image_provider.FileImage);
  dart.setMethodSignature(image_provider.FileImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: dart.fnType(async.Future$(image_provider.FileImage), [image_provider.ImageConfiguration]),
    [_loadAsync$]: dart.fnType(async.Future$(ui.Codec), [image_provider.FileImage], {decode: dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {getTargetSize: dart.nullable(dart.fnType(ui.TargetImageSize, [core.int, core.int]))}, {})), decodeBufferDeprecated: dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})), decodeDeprecated: dart.nullable(dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {}))}, {})
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.FileImage))));
  dart.setLibraryUri(image_provider.FileImage, I[2]);
  dart.setFieldSignature(image_provider.FileImage, () => dart.global.Object.setPrototypeOf({
    file: dart.finalFieldType(io.File),
    scale: dart.finalFieldType(core.double)
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.FileImage))));
  dart.defineExtensionMethods(image_provider.FileImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.FileImage, ['hashCode']);
  var bytes$ = dart.privateName(image_provider, "MemoryImage.bytes");
  var scale$2 = dart.privateName(image_provider, "MemoryImage.scale");
  image_provider.MemoryImage = class MemoryImage extends image_provider.ImageProvider {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    get scale() {
      return this[scale$2];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](bytes, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      return new image_provider.MemoryImage.new(bytes, {scale: scale});
    }
    obtainKey(configuration) {
      return new (T$.SynchronousFutureOfMemoryImage()).new(this);
    }
    load(key, decode) {
      image_provider.MemoryImage.as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decodeDeprecated: decode}), scale: key.scale, debugLabel: "MemoryImage(" + diagnostics.describeIdentity(key.bytes) + ")"});
    }
    loadBuffer(key, decode) {
      image_provider.MemoryImage.as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decodeBufferDeprecated: decode}), scale: key.scale, debugLabel: "MemoryImage(" + diagnostics.describeIdentity(key.bytes) + ")"});
    }
    loadImage(key, decode) {
      image_provider.MemoryImage.as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: "MemoryImage(" + diagnostics.describeIdentity(key.bytes) + ")"});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      let decodeBufferDeprecated = opts && 'decodeBufferDeprecated' in opts ? opts.decodeBufferDeprecated : null;
      let decodeDeprecated = opts && 'decodeDeprecated' in opts ? opts.decodeDeprecated : null;
      return async.async(ui.Codec, (function* _loadAsync() {
        if (!key._equals(this)) dart.assertFailed(null, I[1], 1701, 12, "key == this");
        if (decode != null) {
          let buffer = (yield ui.ImmutableBuffer.fromUint8List(this.bytes));
          return decode(buffer);
        }
        if (decodeBufferDeprecated != null) {
          let buffer = (yield ui.ImmutableBuffer.fromUint8List(this.bytes));
          return decodeBufferDeprecated(buffer);
        }
        return dart.nullCheck(decodeDeprecated)(this.bytes);
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return image_provider.MemoryImage.is(other) && other.bytes[$_equals](this.bytes) && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.bytes[$hashCode], this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "MemoryImage") + "(" + diagnostics.describeIdentity(this.bytes) + ", scale: " + dart.str(this.scale) + ")";
    }
  };
  (image_provider.MemoryImage.new = function(bytes, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this[bytes$] = bytes;
    this[scale$2] = scale;
    dart.global.Object.getPrototypeOf(image_provider.MemoryImage).new.call(this);
    ;
  }).prototype = image_provider.MemoryImage.prototype;
  dart.addTypeTests(image_provider.MemoryImage);
  dart.addTypeCaches(image_provider.MemoryImage);
  dart.setMethodSignature(image_provider.MemoryImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: dart.fnType(async.Future$(image_provider.MemoryImage), [image_provider.ImageConfiguration]),
    [_loadAsync$]: dart.fnType(async.Future$(ui.Codec), [image_provider.MemoryImage], {decode: dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {getTargetSize: dart.nullable(dart.fnType(ui.TargetImageSize, [core.int, core.int]))}, {})), decodeBufferDeprecated: dart.nullable(dart.fnType(async.Future$(ui.Codec), [ui.ImmutableBuffer], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})), decodeDeprecated: dart.nullable(dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {}))}, {})
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.MemoryImage))));
  dart.setLibraryUri(image_provider.MemoryImage, I[2]);
  dart.setFieldSignature(image_provider.MemoryImage, () => dart.global.Object.setPrototypeOf({
    bytes: dart.finalFieldType(typed_data.Uint8List),
    scale: dart.finalFieldType(core.double)
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.MemoryImage))));
  dart.defineExtensionMethods(image_provider.MemoryImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.MemoryImage, ['hashCode']);
  var assetName$ = dart.privateName(image_provider, "ExactAssetImage.assetName");
  var scale$3 = dart.privateName(image_provider, "ExactAssetImage.scale");
  var bundle$1 = dart.privateName(image_provider, "ExactAssetImage.bundle");
  var $package$ = dart.privateName(image_provider, "ExactAssetImage.package");
  image_provider.ExactAssetImage = class ExactAssetImage extends image_provider.AssetBundleImageProvider {
    get assetName() {
      return this[assetName$];
    }
    set assetName(value) {
      super.assetName = value;
    }
    get scale() {
      return this[scale$3];
    }
    set scale(value) {
      super.scale = value;
    }
    get bundle() {
      return this[bundle$1];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    static ['_#new#tearOff'](assetName, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      return new image_provider.ExactAssetImage.new(assetName, {scale: scale, bundle: bundle, package: $package});
    }
    get keyName() {
      return this.package == null ? this.assetName : "packages/" + dart.str(this.package) + "/" + this.assetName;
    }
    obtainKey(configuration) {
      let t$3610, t$3610$;
      return new (T$.SynchronousFutureOfAssetBundleImageKey()).new(new image_provider.AssetBundleImageKey.new({bundle: (t$3610$ = (t$3610 = this.bundle, t$3610 == null ? configuration.bundle : t$3610), t$3610$ == null ? asset_bundle.rootBundle : t$3610$), name: this.keyName, scale: this.scale}));
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return image_provider.ExactAssetImage.is(other) && other.keyName === this.keyName && other.scale === this.scale && dart.equals(other.bundle, this.bundle);
    }
    get hashCode() {
      return core.Object.hash(this.keyName, this.scale, this.bundle);
    }
    toString() {
      return object.objectRuntimeType(this, "ExactAssetImage") + "(name: \"" + this.keyName + "\", scale: " + dart.str(this.scale) + ", bundle: " + dart.str(this.bundle) + ")";
    }
  };
  (image_provider.ExactAssetImage.new = function(assetName, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[assetName$] = assetName;
    this[scale$3] = scale;
    this[bundle$1] = bundle;
    this[$package$] = $package;
    dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage).new.call(this);
    ;
  }).prototype = image_provider.ExactAssetImage.prototype;
  dart.addTypeTests(image_provider.ExactAssetImage);
  dart.addTypeCaches(image_provider.ExactAssetImage);
  dart.setMethodSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({obtainKey: dart.fnType(async.Future$(image_provider.AssetBundleImageKey), [image_provider.ImageConfiguration])}, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.setGetterSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({keyName: core.String}, dart.getGetters(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.setLibraryUri(image_provider.ExactAssetImage, I[2]);
  dart.setFieldSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({
    assetName: dart.finalFieldType(core.String),
    scale: dart.finalFieldType(core.double),
    bundle: dart.finalFieldType(dart.nullable(asset_bundle.AssetBundle)),
    package: dart.finalFieldType(dart.nullable(core.String))
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.defineExtensionMethods(image_provider.ExactAssetImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ExactAssetImage, ['hashCode']);
  image_provider._ErrorImageCompleter = class _ErrorImageCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff']() {
      return new image_provider._ErrorImageCompleter.new();
    }
  };
  (image_provider._ErrorImageCompleter.new = function() {
    dart.global.Object.getPrototypeOf(image_provider._ErrorImageCompleter).new.call(this);
    ;
  }).prototype = image_provider._ErrorImageCompleter.prototype;
  dart.addTypeTests(image_provider._ErrorImageCompleter);
  dart.addTypeCaches(image_provider._ErrorImageCompleter);
  dart.setLibraryUri(image_provider._ErrorImageCompleter, I[2]);
  var statusCode$ = dart.privateName(image_provider, "NetworkImageLoadException.statusCode");
  var uri$ = dart.privateName(image_provider, "NetworkImageLoadException.uri");
  var _message = dart.privateName(image_provider, "_message");
  image_provider.NetworkImageLoadException = class NetworkImageLoadException extends core.Object {
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](opts) {
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let uri = opts && 'uri' in opts ? opts.uri : null;
      return new image_provider.NetworkImageLoadException.new({statusCode: statusCode, uri: uri});
    }
    toString() {
      return this[_message];
    }
  };
  (image_provider.NetworkImageLoadException.new = function(opts) {
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[statusCode$] = statusCode;
    this[uri$] = uri;
    this[_message] = "HTTP request failed, statusCode: " + dart.str(statusCode) + ", " + dart.str(uri);
    ;
  }).prototype = image_provider.NetworkImageLoadException.prototype;
  dart.addTypeTests(image_provider.NetworkImageLoadException);
  dart.addTypeCaches(image_provider.NetworkImageLoadException);
  image_provider.NetworkImageLoadException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(image_provider.NetworkImageLoadException, I[2]);
  dart.setFieldSignature(image_provider.NetworkImageLoadException, () => dart.global.Object.setPrototypeOf({
    statusCode: dart.finalFieldType(core.int),
    [_message]: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(core.Uri)
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.NetworkImageLoadException))));
  dart.defineExtensionMethods(image_provider.NetworkImageLoadException, ['toString']);
  dart.setBaseClass(image_provider.NetworkImage, image_provider.ImageProvider$(image_provider.NetworkImage));
  dart.setBaseClass(image_provider.FileImage, image_provider.ImageProvider$(image_provider.FileImage));
  dart.setBaseClass(image_provider.MemoryImage, image_provider.ImageProvider$(image_provider.MemoryImage));
  dart.trackLibraries("packages/flutter/src/painting/_network_image_web.dart", {
    "package:flutter/src/painting/_network_image_web.dart": _network_image_web,
    "package:flutter/src/painting/image_provider.dart": image_provider
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_provider.dart","_network_image_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/_network_image_web.dart.lib.js"}');
  // Exports:
  return {
    src__painting___network_image_web: _network_image_web,
    src__painting__image_provider: image_provider
  };
}));

//# sourceMappingURL=_network_image_web.dart.lib.js.map
