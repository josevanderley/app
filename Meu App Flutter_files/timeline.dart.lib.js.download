// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/timeline.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/_timeline_web.dart'], (function load__packages__flutter__src__foundation__timeline_dart(dart_sdk, packages__flutter__src__foundation___timeline_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const developer = dart_sdk.developer;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const _timeline_web = packages__flutter__src__foundation___timeline_web$46dart.src__foundation___timeline_web;
  var timeline = Object.create(dart.library);
  var $toInt = dartx.toInt;
  var $putIfAbsent = dartx.putIfAbsent;
  var $_set = dartx._set;
  var $entries = dartx.entries;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $singleWhere = dartx.singleWhere;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $forEach = dartx.forEach;
  var $_get = dartx._get;
  var $join = dartx.join;
  var $length = dartx.length;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    IdentityMapOfString$RecOfdoubleAndint: () => (T.IdentityMapOfString$RecOfdoubleAndint = dart.constFn(_js_helper.IdentityMap$(core.String, dart.recordTypeLiteral("2;", 2, void 0, [core.double, core.int]))))(),
    VoidToRec: () => (T.VoidToRec = dart.constFn(dart.fnType(dart.recordTypeLiteral("2;", 2, void 0, [core.double, core.int]), [])))(),
    MapEntryOfString$RecOfdoubleAndint: () => (T.MapEntryOfString$RecOfdoubleAndint = dart.constFn(core.MapEntry$(core.String, dart.recordTypeLiteral("2;", 2, void 0, [core.double, core.int]))))(),
    MapEntryOfString$RecOfdoubleAndintToAggregatedTimedBlock: () => (T.MapEntryOfString$RecOfdoubleAndintToAggregatedTimedBlock = dart.constFn(dart.fnType(timeline.AggregatedTimedBlock, [T.MapEntryOfString$RecOfdoubleAndint()])))(),
    AggregatedTimedBlockTobool: () => (T.AggregatedTimedBlockTobool = dart.constFn(dart.fnType(core.bool, [timeline.AggregatedTimedBlock])))(),
    VoidToAggregatedTimedBlock: () => (T.VoidToAggregatedTimedBlock = dart.constFn(dart.fnType(timeline.AggregatedTimedBlock, [])))(),
    JSArrayOfFloat64List: () => (T.JSArrayOfFloat64List = dart.constFn(_interceptors.JSArray$(typed_data.Float64List)))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    IterableOfdouble: () => (T.IterableOfdouble = dart.constFn(core.Iterable$(core.double)))(),
    IterableOfdoubleTovoid: () => (T.IterableOfdoubleTovoid = dart.constFn(dart.fnType(dart.void, [T.IterableOfdouble()])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListOfStringN: () => (T.ListOfStringN = dart.constFn(core.List$(T.StringN())))(),
    JSArrayOfListOfStringN: () => (T.JSArrayOfListOfStringN = dart.constFn(_interceptors.JSArray$(T.ListOfStringN())))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    intToString: () => (T.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    JSArrayOfTimedBlock: () => (T.JSArrayOfTimedBlock = dart.constFn(_interceptors.JSArray$(timeline.TimedBlock)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/foundation/timeline.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/foundation/timeline.dart"
  ];
  timeline.FlutterTimeline = class FlutterTimeline extends core.Object {
    static get debugCollectionEnabled() {
      return timeline.FlutterTimeline._collectionEnabled;
    }
    static set debugCollectionEnabled(value) {
      ;
      if (value === timeline.FlutterTimeline._collectionEnabled) {
        return;
      }
      timeline.FlutterTimeline._collectionEnabled = value;
      timeline.FlutterTimeline.debugReset();
    }
    static _createReleaseModeNotSupportedError() {
      return new core.StateError.new("FlutterTimeline metric collection not supported in release mode.");
    }
    static startSync(name, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let flow = opts && 'flow' in opts ? opts.flow : null;
      developer.Timeline.startSync(name, {arguments: $arguments, flow: flow});
      if (true && timeline.FlutterTimeline._collectionEnabled) {
        timeline.FlutterTimeline._buffer.startSync(name, {arguments: $arguments, flow: flow});
      }
    }
    static finishSync() {
      developer.Timeline.finishSync();
      if (true && timeline.FlutterTimeline._collectionEnabled) {
        timeline.FlutterTimeline._buffer.finishSync();
      }
    }
    static instantSync(name, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      developer.Timeline.instantSync(name, {arguments: $arguments});
    }
    static timeSync(T, name, $function, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let flow = opts && 'flow' in opts ? opts.flow : null;
      timeline.FlutterTimeline.startSync(name, {arguments: $arguments, flow: flow});
      try {
        return $function();
      } finally {
        timeline.FlutterTimeline.finishSync();
      }
    }
    static get now() {
      return _timeline_web.performanceTimestamp[$toInt]();
    }
    static debugCollect() {
      ;
      if (!timeline.FlutterTimeline._collectionEnabled) {
        dart.throw(new core.StateError.new("Timeline metric collection not enabled."));
      }
      let result = new timeline.AggregatedTimings.new(timeline.FlutterTimeline._buffer.computeTimings());
      timeline.FlutterTimeline.debugReset();
      return result;
    }
    static debugReset() {
      ;
      timeline.FlutterTimeline._buffer = new timeline._BlockBuffer.new();
    }
  };
  (timeline.FlutterTimeline.new = function() {
    ;
  }).prototype = timeline.FlutterTimeline.prototype;
  dart.addTypeTests(timeline.FlutterTimeline);
  dart.addTypeCaches(timeline.FlutterTimeline);
  dart.setStaticMethodSignature(timeline.FlutterTimeline, () => ['_createReleaseModeNotSupportedError', 'startSync', 'finishSync', 'instantSync', 'timeSync', 'debugCollect', 'debugReset']);
  dart.setStaticGetterSignature(timeline.FlutterTimeline, () => ['debugCollectionEnabled', 'now']);
  dart.setStaticSetterSignature(timeline.FlutterTimeline, () => ['debugCollectionEnabled']);
  dart.setLibraryUri(timeline.FlutterTimeline, I[0]);
  dart.setStaticFieldSignature(timeline.FlutterTimeline, () => ['_buffer', '_collectionEnabled']);
  dart.defineLazy(timeline.FlutterTimeline, {
    /*timeline.FlutterTimeline._buffer*/get _buffer() {
      return new timeline._BlockBuffer.new();
    },
    set _buffer(value) {},
    /*timeline.FlutterTimeline._collectionEnabled*/get _collectionEnabled() {
      return false;
    },
    set _collectionEnabled(value) {}
  }, false);
  var name$ = dart.privateName(timeline, "TimedBlock.name");
  var start$ = dart.privateName(timeline, "TimedBlock.start");
  var end$ = dart.privateName(timeline, "TimedBlock.end");
  timeline.TimedBlock = class TimedBlock extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      return new timeline.TimedBlock.new({name: name, start: start, end: end});
    }
    get duration() {
      return this.end - this.start;
    }
    toString() {
      return "TimedBlock(" + this.name + ", " + dart.str(this.start) + ", " + dart.str(this.end) + ", " + dart.str(this.duration) + ")";
    }
  };
  (timeline.TimedBlock.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[name$] = name;
    this[start$] = start;
    this[end$] = end;
    if (!(end >= start)) dart.assertFailed("The start timestamp must not be greater than the end timestamp.", I[1], 163, 15, "end >= start");
    ;
  }).prototype = timeline.TimedBlock.prototype;
  dart.addTypeTests(timeline.TimedBlock);
  dart.addTypeCaches(timeline.TimedBlock);
  dart.setGetterSignature(timeline.TimedBlock, () => dart.global.Object.setPrototypeOf({duration: core.double}, dart.getGetters(dart.global.Object.getPrototypeOf(timeline.TimedBlock))));
  dart.setLibraryUri(timeline.TimedBlock, I[0]);
  dart.setFieldSignature(timeline.TimedBlock, () => dart.global.Object.setPrototypeOf({
    name: dart.finalFieldType(core.String),
    start: dart.finalFieldType(core.double),
    end: dart.finalFieldType(core.double)
  }, dart.getFields(dart.global.Object.getPrototypeOf(timeline.TimedBlock))));
  dart.defineExtensionMethods(timeline.TimedBlock, ['toString']);
  var timedBlocks$ = dart.privateName(timeline, "AggregatedTimings.timedBlocks");
  var __AggregatedTimings_aggregatedBlocks = dart.privateName(timeline, "_#AggregatedTimings#aggregatedBlocks");
  var _computeAggregatedBlocks = dart.privateName(timeline, "_computeAggregatedBlocks");
  timeline.AggregatedTimings = class AggregatedTimings extends core.Object {
    get timedBlocks() {
      return this[timedBlocks$];
    }
    set timedBlocks(value) {
      super.timedBlocks = value;
    }
    static ['_#new#tearOff'](timedBlocks) {
      return new timeline.AggregatedTimings.new(timedBlocks);
    }
    get aggregatedBlocks() {
      let t$361, t$360;
      t$360 = this[__AggregatedTimings_aggregatedBlocks];
      return t$360 == null ? (t$361 = this[_computeAggregatedBlocks](), this[__AggregatedTimings_aggregatedBlocks] == null ? this[__AggregatedTimings_aggregatedBlocks] = t$361 : dart.throw(new _internal.LateError.fieldADI("aggregatedBlocks"))) : t$360;
    }
    [_computeAggregatedBlocks]() {
      let aggregate = new (T.IdentityMapOfString$RecOfdoubleAndint()).new();
      for (let block of this.timedBlocks) {
        let previousValue = aggregate[$putIfAbsent](block.name, dart.fn(() => dart.recordLiteral("2;", 2, void 0, [0.0, 0]), T.VoidToRec()));
        aggregate[$_set](block.name, dart.recordLiteral("2;", 2, void 0, [dart.notNull(previousValue.$1) + block.duration, dart.notNull(previousValue.$2) + 1]));
      }
      return aggregate[$entries][$map](timeline.AggregatedTimedBlock, dart.fn(entry => new timeline.AggregatedTimedBlock.new({name: entry.key, duration: entry.value.$1, count: entry.value.$2}), T.MapEntryOfString$RecOfdoubleAndintToAggregatedTimedBlock()))[$toList]();
    }
    getAggregated(name) {
      return this.aggregatedBlocks[$singleWhere](dart.fn(block => block.name === name, T.AggregatedTimedBlockTobool()), {orElse: dart.fn(() => new timeline.AggregatedTimedBlock.new({name: name, duration: 0.0, count: 0}), T.VoidToAggregatedTimedBlock())});
    }
  };
  (timeline.AggregatedTimings.new = function(timedBlocks) {
    this[__AggregatedTimings_aggregatedBlocks] = null;
    this[timedBlocks$] = timedBlocks;
    ;
  }).prototype = timeline.AggregatedTimings.prototype;
  dart.addTypeTests(timeline.AggregatedTimings);
  dart.addTypeCaches(timeline.AggregatedTimings);
  dart.setMethodSignature(timeline.AggregatedTimings, () => dart.global.Object.setPrototypeOf({
    [_computeAggregatedBlocks]: dart.fnType(core.List$(timeline.AggregatedTimedBlock), []),
    getAggregated: dart.fnType(timeline.AggregatedTimedBlock, [core.String])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(timeline.AggregatedTimings))));
  dart.setGetterSignature(timeline.AggregatedTimings, () => dart.global.Object.setPrototypeOf({aggregatedBlocks: core.List$(timeline.AggregatedTimedBlock)}, dart.getGetters(dart.global.Object.getPrototypeOf(timeline.AggregatedTimings))));
  dart.setLibraryUri(timeline.AggregatedTimings, I[0]);
  dart.setFieldSignature(timeline.AggregatedTimings, () => dart.global.Object.setPrototypeOf({
    timedBlocks: dart.finalFieldType(core.List$(timeline.TimedBlock)),
    [__AggregatedTimings_aggregatedBlocks]: dart.fieldType(dart.nullable(core.List$(timeline.AggregatedTimedBlock)))
  }, dart.getFields(dart.global.Object.getPrototypeOf(timeline.AggregatedTimings))));
  var name$0 = dart.privateName(timeline, "AggregatedTimedBlock.name");
  var duration$ = dart.privateName(timeline, "AggregatedTimedBlock.duration");
  var count$ = dart.privateName(timeline, "AggregatedTimedBlock.count");
  timeline.AggregatedTimedBlock = class AggregatedTimedBlock extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get count() {
      return this[count$];
    }
    set count(value) {
      super.count = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let count = opts && 'count' in opts ? opts.count : null;
      return new timeline.AggregatedTimedBlock.new({name: name, duration: duration, count: count});
    }
    toString() {
      return "AggregatedTimedBlock(" + this.name + ", " + dart.str(this.duration) + ", " + dart.str(this.count) + ")";
    }
  };
  (timeline.AggregatedTimedBlock.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let count = opts && 'count' in opts ? opts.count : null;
    this[name$0] = name;
    this[duration$] = duration;
    this[count$] = count;
    if (!(duration >= 0)) dart.assertFailed(null, I[1], 247, 15, "duration >= 0");
    ;
  }).prototype = timeline.AggregatedTimedBlock.prototype;
  dart.addTypeTests(timeline.AggregatedTimedBlock);
  dart.addTypeCaches(timeline.AggregatedTimedBlock);
  dart.setLibraryUri(timeline.AggregatedTimedBlock, I[0]);
  dart.setFieldSignature(timeline.AggregatedTimedBlock, () => dart.global.Object.setPrototypeOf({
    name: dart.finalFieldType(core.String),
    duration: dart.finalFieldType(core.double),
    count: dart.finalFieldType(core.int)
  }, dart.getFields(dart.global.Object.getPrototypeOf(timeline.AggregatedTimedBlock))));
  dart.defineExtensionMethods(timeline.AggregatedTimedBlock, ['toString']);
  var _chain = dart.privateName(timeline, "_chain");
  var _slice = dart.privateName(timeline, "_slice");
  var _pointer = dart.privateName(timeline, "_pointer");
  var _length = dart.privateName(timeline, "_length");
  timeline._Float64ListChain = class _Float64ListChain extends core.Object {
    static ['_#new#tearOff']() {
      return new timeline._Float64ListChain.new();
    }
    get length() {
      return this[_length];
    }
    add(element) {
      this[_slice][$_set](this[_pointer], element);
      this[_pointer] = this[_pointer] + 1;
      this[_length] = this[_length] + 1;
      if (this[_pointer] >= 500) {
        this[_chain][$add](this[_slice]);
        this[_slice] = _native_typed_data.NativeFloat64List.new(500);
        this[_pointer] = 0;
      }
    }
    extractElements() {
      let result = T.JSArrayOfdouble().of([]);
      this[_chain][$forEach](T.IterableOfdoubleTovoid().as(dart.bind(result, $addAll)));
      for (let i = 0; i < this[_pointer]; i = i + 1) {
        result[$add](this[_slice][$_get](i));
      }
      return result;
    }
  };
  (timeline._Float64ListChain.new = function() {
    this[_chain] = T.JSArrayOfFloat64List().of([]);
    this[_slice] = _native_typed_data.NativeFloat64List.new(500);
    this[_pointer] = 0;
    this[_length] = 0;
    ;
  }).prototype = timeline._Float64ListChain.prototype;
  dart.addTypeTests(timeline._Float64ListChain);
  dart.addTypeCaches(timeline._Float64ListChain);
  dart.setMethodSignature(timeline._Float64ListChain, () => dart.global.Object.setPrototypeOf({
    add: dart.fnType(dart.void, [core.double]),
    extractElements: dart.fnType(core.List$(core.double), [])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(timeline._Float64ListChain))));
  dart.setGetterSignature(timeline._Float64ListChain, () => dart.global.Object.setPrototypeOf({length: core.int}, dart.getGetters(dart.global.Object.getPrototypeOf(timeline._Float64ListChain))));
  dart.setLibraryUri(timeline._Float64ListChain, I[0]);
  dart.setFieldSignature(timeline._Float64ListChain, () => dart.global.Object.setPrototypeOf({
    [_chain]: dart.finalFieldType(core.List$(typed_data.Float64List)),
    [_slice]: dart.fieldType(typed_data.Float64List),
    [_pointer]: dart.fieldType(core.int),
    [_length]: dart.fieldType(core.int)
  }, dart.getFields(dart.global.Object.getPrototypeOf(timeline._Float64ListChain))));
  timeline._StringListChain = class _StringListChain extends core.Object {
    static ['_#new#tearOff']() {
      return new timeline._StringListChain.new();
    }
    get length() {
      return this[_length];
    }
    add(element) {
      this[_slice][$_set](this[_pointer], element);
      this[_pointer] = this[_pointer] + 1;
      this[_length] = this[_length] + 1;
      if (this[_pointer] >= 500) {
        this[_chain][$add](this[_slice]);
        this[_slice] = T.ListOfStringN().filled(500, null);
        this[_pointer] = 0;
      }
    }
    extractElements() {
      let result = T.JSArrayOfString().of([]);
      for (let slice of this[_chain]) {
        for (let element of slice) {
          result[$add](dart.nullCheck(element));
        }
      }
      for (let i = 0; i < this[_pointer]; i = i + 1) {
        result[$add](dart.nullCheck(this[_slice][$_get](i)));
      }
      return result;
    }
  };
  (timeline._StringListChain.new = function() {
    this[_chain] = T.JSArrayOfListOfStringN().of([]);
    this[_slice] = T.ListOfStringN().filled(500, null);
    this[_pointer] = 0;
    this[_length] = 0;
    ;
  }).prototype = timeline._StringListChain.prototype;
  dart.addTypeTests(timeline._StringListChain);
  dart.addTypeCaches(timeline._StringListChain);
  dart.setMethodSignature(timeline._StringListChain, () => dart.global.Object.setPrototypeOf({
    add: dart.fnType(dart.void, [core.String]),
    extractElements: dart.fnType(core.List$(core.String), [])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(timeline._StringListChain))));
  dart.setGetterSignature(timeline._StringListChain, () => dart.global.Object.setPrototypeOf({length: core.int}, dart.getGetters(dart.global.Object.getPrototypeOf(timeline._StringListChain))));
  dart.setLibraryUri(timeline._StringListChain, I[0]);
  dart.setFieldSignature(timeline._StringListChain, () => dart.global.Object.setPrototypeOf({
    [_chain]: dart.finalFieldType(core.List$(core.List$(dart.nullable(core.String)))),
    [_slice]: dart.fieldType(core.List$(dart.nullable(core.String))),
    [_pointer]: dart.fieldType(core.int),
    [_length]: dart.fieldType(core.int)
  }, dart.getFields(dart.global.Object.getPrototypeOf(timeline._StringListChain))));
  var _starts = dart.privateName(timeline, "_starts");
  var _finishes = dart.privateName(timeline, "_finishes");
  var _names = dart.privateName(timeline, "_names");
  timeline._BlockBuffer = class _BlockBuffer extends core.Object {
    computeTimings() {
      if (!(timeline._BlockBuffer._stackPointer === 0)) dart.assertFailed("Invalid sequence of `startSync` and `finishSync`.\n" + "The operation stack was not empty. The following operations are still " + "waiting to be finished via the `finishSync` method:\n" + T.ListOfString().generate(timeline._BlockBuffer._stackPointer, dart.fn(i => dart.nullCheck(timeline._BlockBuffer._nameStack[$_get](i)), T.intToString()))[$join](", "), I[1], 381, 7, "_stackPointer == 0");
      let result = T.JSArrayOfTimedBlock().of([]);
      let length = this[_finishes].length;
      let starts = this[_starts].extractElements();
      let finishes = this[_finishes].extractElements();
      let names = this[_names].extractElements();
      if (!(starts[$length] === length)) dart.assertFailed(null, I[1], 394, 12, "starts.length == length");
      if (!(finishes[$length] === length)) dart.assertFailed(null, I[1], 395, 12, "finishes.length == length");
      if (!(names[$length] === length)) dart.assertFailed(null, I[1], 396, 12, "names.length == length");
      for (let i = 0; i < length; i = i + 1) {
        result[$add](new timeline.TimedBlock.new({start: starts[$_get](i), end: finishes[$_get](i), name: names[$_get](i)}));
      }
      return result;
    }
    startSync(name, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let flow = opts && 'flow' in opts ? opts.flow : null;
      timeline._BlockBuffer._startStack[$_set](timeline._BlockBuffer._stackPointer, _timeline_web.performanceTimestamp);
      timeline._BlockBuffer._nameStack[$_set](timeline._BlockBuffer._stackPointer, name);
      timeline._BlockBuffer._stackPointer = timeline._BlockBuffer._stackPointer + 1;
    }
    finishSync() {
      if (!(timeline._BlockBuffer._stackPointer > 0)) dart.assertFailed("Invalid sequence of `startSync` and `finishSync`.\nAttempted to finish timing a block of code, but there are no pending `startSync` calls.", I[1], 417, 7, "_stackPointer > 0");
      let finishTime = _timeline_web.performanceTimestamp;
      let startTime = timeline._BlockBuffer._startStack[$_get](timeline._BlockBuffer._stackPointer - 1);
      let name = dart.nullCheck(timeline._BlockBuffer._nameStack[$_get](timeline._BlockBuffer._stackPointer - 1));
      timeline._BlockBuffer._stackPointer = timeline._BlockBuffer._stackPointer - 1;
      this[_starts].add(startTime);
      this[_finishes].add(finishTime);
      this[_names].add(name);
    }
    static ['_#new#tearOff']() {
      return new timeline._BlockBuffer.new();
    }
  };
  (timeline._BlockBuffer.new = function() {
    this[_starts] = new timeline._Float64ListChain.new();
    this[_finishes] = new timeline._Float64ListChain.new();
    this[_names] = new timeline._StringListChain.new();
    ;
  }).prototype = timeline._BlockBuffer.prototype;
  dart.addTypeTests(timeline._BlockBuffer);
  dart.addTypeCaches(timeline._BlockBuffer);
  dart.setMethodSignature(timeline._BlockBuffer, () => dart.global.Object.setPrototypeOf({
    computeTimings: dart.fnType(core.List$(timeline.TimedBlock), []),
    startSync: dart.fnType(dart.void, [core.String], {arguments: dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), flow: dart.nullable(developer.Flow)}, {}),
    finishSync: dart.fnType(dart.void, [])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(timeline._BlockBuffer))));
  dart.setLibraryUri(timeline._BlockBuffer, I[0]);
  dart.setFieldSignature(timeline._BlockBuffer, () => dart.global.Object.setPrototypeOf({
    [_starts]: dart.finalFieldType(timeline._Float64ListChain),
    [_finishes]: dart.finalFieldType(timeline._Float64ListChain),
    [_names]: dart.finalFieldType(timeline._StringListChain)
  }, dart.getFields(dart.global.Object.getPrototypeOf(timeline._BlockBuffer))));
  dart.setStaticFieldSignature(timeline._BlockBuffer, () => ['_stackDepth', '_startStack', '_nameStack', '_stackPointer']);
  dart.defineLazy(timeline._BlockBuffer, {
    /*timeline._BlockBuffer._stackDepth*/get _stackDepth() {
      return 1000;
    },
    /*timeline._BlockBuffer._startStack*/get _startStack() {
      return _native_typed_data.NativeFloat64List.new(1000);
    },
    /*timeline._BlockBuffer._nameStack*/get _nameStack() {
      return T.ListOfStringN().filled(1000, null);
    },
    /*timeline._BlockBuffer._stackPointer*/get _stackPointer() {
      return 0;
    },
    set _stackPointer(value) {}
  }, false);
  dart.defineLazy(timeline, {
    /*timeline._kSliceSize*/get _kSliceSize() {
      return 500;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/foundation/timeline.dart", {
    "package:flutter/src/foundation/timeline.dart": timeline
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["timeline.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/foundation/timeline.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__timeline: timeline
  };
}));

//# sourceMappingURL=timeline.dart.lib.js.map
