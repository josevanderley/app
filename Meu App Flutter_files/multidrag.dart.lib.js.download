// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/gestures/multidrag.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/drag.dart', 'packages/flutter/src/gestures/gesture_settings.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/recognizer.dart'], (function load__packages__flutter__src__gestures__multidrag_dart(dart_sdk, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__drag$46dart, packages__flutter__src__gestures__gesture_settings$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__recognizer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const drag = packages__flutter__src__gestures__drag$46dart.src__gestures__drag;
  const gesture_settings = packages__flutter__src__gestures__gesture_settings$46dart.src__gestures__gesture_settings;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  var multidrag = Object.create(dart.library);
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $isEmpty = dartx.isEmpty;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    IdentityMapOfint$MultiDragPointerState: () => (T.IdentityMapOfint$MultiDragPointerState = dart.constFn(_js_helper.IdentityMap$(core.int, multidrag.MultiDragPointerState)))(),
    intTobool: () => (T.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    DragN: () => (T.DragN = dart.constFn(dart.nullable(drag.Drag)))(),
    OffsetToDragN: () => (T.OffsetToDragN = dart.constFn(dart.fnType(T.DragN(), [ui.Offset])))(),
    VoidToDragN: () => (T.VoidToDragN = dart.constFn(dart.fnType(T.DragN(), [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(multidrag.MultiDragGestureRecognizer._defaultButtonAcceptBehavior, T.intTobool());
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 500000
      }, core.Duration.prototype));
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "file:///C:/Dev/flutter/packages/flutter/lib/src/gestures/multidrag.dart",
    "package:flutter/src/gestures/multidrag.dart"
  ];
  var gestureSettings$ = dart.privateName(multidrag, "MultiDragPointerState.gestureSettings");
  var initialPosition$ = dart.privateName(multidrag, "MultiDragPointerState.initialPosition");
  var kind$ = dart.privateName(multidrag, "MultiDragPointerState.kind");
  var _client = dart.privateName(multidrag, "_client");
  var _pendingDelta = dart.privateName(multidrag, "_pendingDelta");
  var _lastPendingEventTimestamp = dart.privateName(multidrag, "_lastPendingEventTimestamp");
  var _arenaEntry = dart.privateName(multidrag, "_arenaEntry");
  var _velocityTracker = dart.privateName(multidrag, "_velocityTracker");
  var _setArenaEntry = dart.privateName(multidrag, "_setArenaEntry");
  var _move = dart.privateName(multidrag, "_move");
  var _startDrag = dart.privateName(multidrag, "_startDrag");
  var _up = dart.privateName(multidrag, "_up");
  var _cancel = dart.privateName(multidrag, "_cancel");
  multidrag.MultiDragPointerState = class MultiDragPointerState extends core.Object {
    get gestureSettings() {
      return this[gestureSettings$];
    }
    set gestureSettings(value) {
      super.gestureSettings = value;
    }
    get initialPosition() {
      return this[initialPosition$];
    }
    set initialPosition(value) {
      super.initialPosition = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get pendingDelta() {
      return this[_pendingDelta];
    }
    [_setArenaEntry](entry) {
      if (!(this[_arenaEntry] == null)) dart.assertFailed(null, I[0], 71, 12, "_arenaEntry == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 72, 12, "pendingDelta != null");
      if (!(this[_client] == null)) dart.assertFailed(null, I[0], 73, 12, "_client == null");
      this[_arenaEntry] = entry;
    }
    resolve(disposition) {
      dart.nullCheck(this[_arenaEntry]).resolve(disposition);
    }
    [_move](event) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 85, 12, "_arenaEntry != null");
      if (!event.synthesized) {
        this[_velocityTracker].addPosition(event.timeStamp, event.position);
      }
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, I[0], 90, 14, "pendingDelta == null");
        dart.nullCheck(this[_client]).update(new drag_details.DragUpdateDetails.new({sourceTimeStamp: event.timeStamp, delta: event.delta, globalPosition: event.position}));
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 98, 14, "pendingDelta != null");
        this[_pendingDelta] = dart.nullCheck(this[_pendingDelta])['+'](event.delta);
        this[_lastPendingEventTimestamp] = event.timeStamp;
        this.checkForResolutionAfterMove();
      }
    }
    checkForResolutionAfterMove() {
    }
    rejected() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 124, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, I[0], 125, 12, "_client == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 126, 12, "pendingDelta != null");
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_arenaEntry] = null;
    }
    [_startDrag](client) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 133, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, I[0], 134, 12, "_client == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 135, 12, "pendingDelta != null");
      this[_client] = client;
      let details = new drag_details.DragUpdateDetails.new({sourceTimeStamp: this[_lastPendingEventTimestamp], delta: dart.nullCheck(this.pendingDelta), globalPosition: this.initialPosition});
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      dart.nullCheck(this[_client]).update(details);
    }
    [_up]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 149, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, I[0], 151, 14, "pendingDelta == null");
        let details = new drag_details.DragEndDetails.new({velocity: this[_velocityTracker].getVelocity()});
        let client = dart.nullCheck(this[_client]);
        this[_client] = null;
        client.end(details);
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 158, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    [_cancel]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, I[0], 165, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, I[0], 167, 14, "pendingDelta == null");
        let client = dart.nullCheck(this[_client]);
        this[_client] = null;
        client.cancel();
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 173, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    dispose() {
      let t$360;
      t$360 = this[_arenaEntry];
      t$360 == null ? null : t$360.resolve(arena.GestureDisposition.rejected);
      this[_arenaEntry] = null;
      if (!dart.fn(() => {
        this[_pendingDelta] = null;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 185, 12, "() {\r\n      _pendingDelta = null;\r\n      return true;\r\n    }()");
    }
  };
  (multidrag.MultiDragPointerState.new = function(initialPosition, kind, gestureSettings) {
    this[_client] = null;
    this[_pendingDelta] = ui.Offset.zero;
    this[_lastPendingEventTimestamp] = null;
    this[_arenaEntry] = null;
    this[initialPosition$] = initialPosition;
    this[kind$] = kind;
    this[gestureSettings$] = gestureSettings;
    this[_velocityTracker] = new velocity_tracker.VelocityTracker.withKind(kind);
    ;
  }).prototype = multidrag.MultiDragPointerState.prototype;
  dart.addTypeTests(multidrag.MultiDragPointerState);
  dart.addTypeCaches(multidrag.MultiDragPointerState);
  dart.setMethodSignature(multidrag.MultiDragPointerState, () => dart.global.Object.setPrototypeOf({
    [_setArenaEntry]: dart.fnType(dart.void, [arena.GestureArenaEntry]),
    resolve: dart.fnType(dart.void, [arena.GestureDisposition]),
    [_move]: dart.fnType(dart.void, [events.PointerMoveEvent]),
    checkForResolutionAfterMove: dart.fnType(dart.void, []),
    rejected: dart.fnType(dart.void, []),
    [_startDrag]: dart.fnType(dart.void, [drag.Drag]),
    [_up]: dart.fnType(dart.void, []),
    [_cancel]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.MultiDragPointerState))));
  dart.setGetterSignature(multidrag.MultiDragPointerState, () => dart.global.Object.setPrototypeOf({pendingDelta: dart.nullable(ui.Offset)}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.MultiDragPointerState))));
  dart.setLibraryUri(multidrag.MultiDragPointerState, I[1]);
  dart.setFieldSignature(multidrag.MultiDragPointerState, () => dart.global.Object.setPrototypeOf({
    gestureSettings: dart.finalFieldType(dart.nullable(gesture_settings.DeviceGestureSettings)),
    initialPosition: dart.finalFieldType(ui.Offset),
    [_velocityTracker]: dart.finalFieldType(velocity_tracker.VelocityTracker),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    [_client]: dart.fieldType(dart.nullable(drag.Drag)),
    [_pendingDelta]: dart.fieldType(dart.nullable(ui.Offset)),
    [_lastPendingEventTimestamp]: dart.fieldType(dart.nullable(core.Duration)),
    [_arenaEntry]: dart.fieldType(dart.nullable(arena.GestureArenaEntry))
  }, dart.getFields(dart.global.Object.getPrototypeOf(multidrag.MultiDragPointerState))));
  var onStart = dart.privateName(multidrag, "MultiDragGestureRecognizer.onStart");
  var _pointers = dart.privateName(multidrag, "_pointers");
  var _handleEvent = dart.privateName(multidrag, "_handleEvent");
  var _removeState = dart.privateName(multidrag, "_removeState");
  multidrag.MultiDragGestureRecognizer = class MultiDragGestureRecognizer extends recognizer.GestureRecognizer {
    get onStart() {
      return this[onStart];
    }
    set onStart(value) {
      this[onStart] = value;
    }
    static _defaultButtonAcceptBehavior(buttons) {
      return buttons === 1;
    }
    addAllowedPointer(event) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 235, 12, "_pointers != null");
      if (!!dart.nullCheck(this[_pointers])[$containsKey](event.pointer)) dart.assertFailed(null, I[0], 236, 12, "!_pointers!.containsKey(event.pointer)");
      let state = this.createNewPointerState(event);
      dart.nullCheck(this[_pointers])[$_set](event.pointer, state);
      binding.GestureBinding.instance.pointerRouter.addRoute(event.pointer, dart.bind(this, _handleEvent));
      state[_setArenaEntry](binding.GestureBinding.instance.gestureArena.add(event.pointer, this));
    }
    [_handleEvent](event) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 250, 12, "_pointers != null");
      if (!dart.nullCheck(this[_pointers])[$containsKey](event.pointer)) dart.assertFailed(null, I[0], 251, 12, "_pointers!.containsKey(event.pointer)");
      let state = dart.nullCheck(dart.nullCheck(this[_pointers])[$_get](event.pointer));
      if (events.PointerMoveEvent.is(event)) {
        state[_move](event);
      } else if (events.PointerUpEvent.is(event)) {
        if (!event.delta._equals(ui.Offset.zero)) dart.assertFailed(null, I[0], 257, 14, "event.delta == Offset.zero");
        state[_up]();
        this[_removeState](event.pointer);
      } else if (events.PointerCancelEvent.is(event)) {
        if (!event.delta._equals(ui.Offset.zero)) dart.assertFailed(null, I[0], 262, 14, "event.delta == Offset.zero");
        state[_cancel]();
        this[_removeState](event.pointer);
      } else if (!events.PointerDownEvent.is(event)) {
        if (!false) dart.assertFailed(null, I[0], 270, 14, "false");
      }
    }
    acceptGesture(pointer) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 276, 12, "_pointers != null");
      let state = dart.nullCheck(this[_pointers])[$_get](pointer);
      if (state == null) {
        return;
      }
      state.accepted(dart.fn(initialPosition => this[_startDrag](initialPosition, pointer), T.OffsetToDragN()));
    }
    [_startDrag](initialPosition, pointer) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 285, 12, "_pointers != null");
      let state = dart.nullCheck(dart.nullCheck(this[_pointers])[$_get](pointer));
      if (!(state[_pendingDelta] != null)) dart.assertFailed(null, I[0], 287, 12, "state._pendingDelta != null");
      let drag = null;
      if (this.onStart != null) {
        drag = this.invokeCallback(T.DragN(), "onStart", dart.fn(() => dart.nullCheck(this.onStart)(initialPosition), T.VoidToDragN()));
      }
      if (drag != null) {
        state[_startDrag](drag);
      } else {
        this[_removeState](pointer);
      }
      return drag;
    }
    rejectGesture(pointer) {
      if (!(this[_pointers] != null)) dart.assertFailed(null, I[0], 302, 12, "_pointers != null");
      if (dart.nullCheck(this[_pointers])[$containsKey](pointer)) {
        let state = dart.nullCheck(dart.nullCheck(this[_pointers])[$_get](pointer));
        state.rejected();
        this[_removeState](pointer);
      }
    }
    [_removeState](pointer) {
      if (this[_pointers] == null) {
        return;
      }
      if (!dart.nullCheck(this[_pointers])[$containsKey](pointer)) dart.assertFailed(null, I[0], 316, 12, "_pointers!.containsKey(pointer)");
      binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, _handleEvent));
      dart.nullCheck(dart.nullCheck(this[_pointers])[$remove](pointer)).dispose();
    }
    dispose() {
      dart.nullCheck(this[_pointers])[$keys][$toList]()[$forEach](dart.bind(this, _removeState));
      if (!dart.nullCheck(this[_pointers])[$isEmpty]) dart.assertFailed(null, I[0], 324, 12, "_pointers!.isEmpty");
      this[_pointers] = null;
      super.dispose();
    }
  };
  (multidrag.MultiDragGestureRecognizer.new = function(opts) {
    let t$360;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[onStart] = null;
    this[_pointers] = new (T.IdentityMapOfint$MultiDragPointerState()).new();
    dart.global.Object.getPrototypeOf(multidrag.MultiDragGestureRecognizer).new.call(this, {allowedButtonsFilter: (t$360 = allowedButtonsFilter, t$360 == null ? C[0] || CT.C0 : t$360), debugOwner: debugOwner, supportedDevices: supportedDevices});
    ;
  }).prototype = multidrag.MultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.MultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.MultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.MultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    [_handleEvent]: dart.fnType(dart.void, [events.PointerEvent]),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    [_startDrag]: dart.fnType(dart.nullable(drag.Drag), [ui.Offset, core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_removeState]: dart.fnType(dart.void, [core.int])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.MultiDragGestureRecognizer))));
  dart.setStaticMethodSignature(multidrag.MultiDragGestureRecognizer, () => ['_defaultButtonAcceptBehavior']);
  dart.setLibraryUri(multidrag.MultiDragGestureRecognizer, I[1]);
  dart.setFieldSignature(multidrag.MultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({
    onStart: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(drag.Drag), [ui.Offset]))),
    [_pointers]: dart.fieldType(dart.nullable(core.Map$(core.int, multidrag.MultiDragPointerState)))
  }, dart.getFields(dart.global.Object.getPrototypeOf(multidrag.MultiDragGestureRecognizer))));
  multidrag._ImmediatePointerState = class _ImmediatePointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, kind, gestureSettings) {
      return new multidrag._ImmediatePointerState.new(initialPosition, kind, gestureSettings);
    }
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 335, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).distance > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._ImmediatePointerState.new = function(initialPosition, kind, gestureSettings) {
    dart.global.Object.getPrototypeOf(multidrag._ImmediatePointerState).new.call(this, initialPosition, kind, gestureSettings);
    ;
  }).prototype = multidrag._ImmediatePointerState.prototype;
  dart.addTypeTests(multidrag._ImmediatePointerState);
  dart.addTypeCaches(multidrag._ImmediatePointerState);
  dart.setMethodSignature(multidrag._ImmediatePointerState, () => dart.global.Object.setPrototypeOf({accepted: dart.fnType(dart.void, [dart.fnType(dart.nullable(drag.Drag), [ui.Offset])])}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._ImmediatePointerState))));
  dart.setLibraryUri(multidrag._ImmediatePointerState, I[1]);
  multidrag.ImmediateMultiDragGestureRecognizer = class ImmediateMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.ImmediateMultiDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._ImmediatePointerState.new(event.position, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "multidrag";
    }
  };
  (multidrag.ImmediateMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(multidrag.ImmediateMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.ImmediateMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.ImmediateMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.ImmediateMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: dart.fnType(multidrag.MultiDragPointerState, [events.PointerDownEvent])}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.ImmediateMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: core.String}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.ImmediateMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.ImmediateMultiDragGestureRecognizer, I[1]);
  multidrag._HorizontalPointerState = class _HorizontalPointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, kind, gestureSettings) {
      return new multidrag._HorizontalPointerState.new(initialPosition, kind, gestureSettings);
    }
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 388, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).dx[$abs]() > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._HorizontalPointerState.new = function(initialPosition, kind, gestureSettings) {
    dart.global.Object.getPrototypeOf(multidrag._HorizontalPointerState).new.call(this, initialPosition, kind, gestureSettings);
    ;
  }).prototype = multidrag._HorizontalPointerState.prototype;
  dart.addTypeTests(multidrag._HorizontalPointerState);
  dart.addTypeCaches(multidrag._HorizontalPointerState);
  dart.setMethodSignature(multidrag._HorizontalPointerState, () => dart.global.Object.setPrototypeOf({accepted: dart.fnType(dart.void, [dart.fnType(dart.nullable(drag.Drag), [ui.Offset])])}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._HorizontalPointerState))));
  dart.setLibraryUri(multidrag._HorizontalPointerState, I[1]);
  multidrag.HorizontalMultiDragGestureRecognizer = class HorizontalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.HorizontalMultiDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._HorizontalPointerState.new(event.position, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "horizontal multidrag";
    }
  };
  (multidrag.HorizontalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(multidrag.HorizontalMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.HorizontalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.HorizontalMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.HorizontalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: dart.fnType(multidrag.MultiDragPointerState, [events.PointerDownEvent])}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.HorizontalMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: core.String}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.HorizontalMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.HorizontalMultiDragGestureRecognizer, I[1]);
  multidrag._VerticalPointerState = class _VerticalPointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, kind, gestureSettings) {
      return new multidrag._VerticalPointerState.new(initialPosition, kind, gestureSettings);
    }
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 441, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).dy[$abs]() > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._VerticalPointerState.new = function(initialPosition, kind, gestureSettings) {
    dart.global.Object.getPrototypeOf(multidrag._VerticalPointerState).new.call(this, initialPosition, kind, gestureSettings);
    ;
  }).prototype = multidrag._VerticalPointerState.prototype;
  dart.addTypeTests(multidrag._VerticalPointerState);
  dart.addTypeCaches(multidrag._VerticalPointerState);
  dart.setMethodSignature(multidrag._VerticalPointerState, () => dart.global.Object.setPrototypeOf({accepted: dart.fnType(dart.void, [dart.fnType(dart.nullable(drag.Drag), [ui.Offset])])}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._VerticalPointerState))));
  dart.setLibraryUri(multidrag._VerticalPointerState, I[1]);
  multidrag.VerticalMultiDragGestureRecognizer = class VerticalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    static ['_#new#tearOff'](opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.VerticalMultiDragGestureRecognizer.new({debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._VerticalPointerState.new(event.position, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "vertical multidrag";
    }
  };
  (multidrag.VerticalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    dart.global.Object.getPrototypeOf(multidrag.VerticalMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.VerticalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.VerticalMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.VerticalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.VerticalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: dart.fnType(multidrag.MultiDragPointerState, [events.PointerDownEvent])}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.VerticalMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.VerticalMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: core.String}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.VerticalMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.VerticalMultiDragGestureRecognizer, I[1]);
  var _timer = dart.privateName(multidrag, "_timer");
  var _starter = dart.privateName(multidrag, "_starter");
  var _delayPassed = dart.privateName(multidrag, "_delayPassed");
  var _ensureTimerStopped = dart.privateName(multidrag, "_ensureTimerStopped");
  multidrag._DelayedPointerState = class _DelayedPointerState extends multidrag.MultiDragPointerState {
    static ['_#new#tearOff'](initialPosition, delay, kind, gestureSettings) {
      return new multidrag._DelayedPointerState.new(initialPosition, delay, kind, gestureSettings);
    }
    [_delayPassed]() {
      if (!(this[_timer] != null)) dart.assertFailed(null, I[0], 497, 12, "_timer != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 498, 12, "pendingDelta != null");
      if (!(dart.nullCheck(this.pendingDelta).distance <= events.computeHitSlop(this.kind, this.gestureSettings))) dart.assertFailed(null, I[0], 499, 12, "pendingDelta!.distance <= computeHitSlop(kind, gestureSettings)");
      this[_timer] = null;
      if (this[_starter] != null) {
        dart.nullCheck(this[_starter])(this.initialPosition);
        this[_starter] = null;
      } else {
        this.resolve(arena.GestureDisposition.accepted);
      }
      if (!(this[_starter] == null)) dart.assertFailed(null, I[0], 507, 12, "_starter == null");
    }
    [_ensureTimerStopped]() {
      let t$360;
      t$360 = this[_timer];
      t$360 == null ? null : t$360.cancel();
      this[_timer] = null;
    }
    accepted(starter) {
      if (!(this[_starter] == null)) dart.assertFailed(null, I[0], 517, 12, "_starter == null");
      if (this[_timer] == null) {
        starter(this.initialPosition);
      } else {
        this[_starter] = starter;
      }
    }
    checkForResolutionAfterMove() {
      if (this[_timer] == null) {
        if (!(this[_starter] != null)) dart.assertFailed(null, I[0], 533, 14, "_starter != null");
        return;
      }
      if (!(this.pendingDelta != null)) dart.assertFailed(null, I[0], 536, 12, "pendingDelta != null");
      if (dart.nullCheck(this.pendingDelta).distance > events.computeHitSlop(this.kind, this.gestureSettings)) {
        this.resolve(arena.GestureDisposition.rejected);
        this[_ensureTimerStopped]();
      }
    }
    dispose() {
      this[_ensureTimerStopped]();
      super.dispose();
    }
  };
  (multidrag._DelayedPointerState.new = function(initialPosition, delay, kind, gestureSettings) {
    this[_timer] = null;
    this[_starter] = null;
    dart.global.Object.getPrototypeOf(multidrag._DelayedPointerState).new.call(this, initialPosition, kind, gestureSettings);
    this[_timer] = async.Timer.new(delay, dart.bind(this, _delayPassed));
  }).prototype = multidrag._DelayedPointerState.prototype;
  dart.addTypeTests(multidrag._DelayedPointerState);
  dart.addTypeCaches(multidrag._DelayedPointerState);
  dart.setMethodSignature(multidrag._DelayedPointerState, () => dart.global.Object.setPrototypeOf({
    [_delayPassed]: dart.fnType(dart.void, []),
    [_ensureTimerStopped]: dart.fnType(dart.void, []),
    accepted: dart.fnType(dart.void, [dart.fnType(dart.nullable(drag.Drag), [ui.Offset])])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag._DelayedPointerState))));
  dart.setLibraryUri(multidrag._DelayedPointerState, I[1]);
  dart.setFieldSignature(multidrag._DelayedPointerState, () => dart.global.Object.setPrototypeOf({
    [_timer]: dart.fieldType(dart.nullable(async.Timer)),
    [_starter]: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(drag.Drag), [ui.Offset])))
  }, dart.getFields(dart.global.Object.getPrototypeOf(multidrag._DelayedPointerState))));
  var delay$ = dart.privateName(multidrag, "DelayedMultiDragGestureRecognizer.delay");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  multidrag.DelayedMultiDragGestureRecognizer = class DelayedMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer {
    get delay() {
      return this[delay$];
    }
    set delay(value) {
      super.delay = value;
    }
    static ['_#new#tearOff'](opts) {
      let delay = opts && 'delay' in opts ? opts.delay : C[1] || CT.C1;
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
      let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
      return new multidrag.DelayedMultiDragGestureRecognizer.new({delay: delay, debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    }
    createNewPointerState(event) {
      return new multidrag._DelayedPointerState.new(event.position, this.delay, event.kind, this.gestureSettings);
    }
    get debugDescription() {
      return "long multidrag";
    }
  };
  (multidrag.DelayedMultiDragGestureRecognizer.new = function(opts) {
    let delay = opts && 'delay' in opts ? opts.delay : C[1] || CT.C1;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let supportedDevices = opts && 'supportedDevices' in opts ? opts.supportedDevices : null;
    let allowedButtonsFilter = opts && 'allowedButtonsFilter' in opts ? opts.allowedButtonsFilter : null;
    this[delay$] = delay;
    dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer).new.call(this, {debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter});
    ;
  }).prototype = multidrag.DelayedMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.DelayedMultiDragGestureRecognizer);
  dart.addTypeCaches(multidrag.DelayedMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.DelayedMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({createNewPointerState: dart.fnType(multidrag.MultiDragPointerState, [events.PointerDownEvent])}, dart.getMethods(dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer))));
  dart.setGetterSignature(multidrag.DelayedMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({debugDescription: core.String}, dart.getGetters(dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer))));
  dart.setLibraryUri(multidrag.DelayedMultiDragGestureRecognizer, I[1]);
  dart.setFieldSignature(multidrag.DelayedMultiDragGestureRecognizer, () => dart.global.Object.setPrototypeOf({delay: dart.finalFieldType(core.Duration)}, dart.getFields(dart.global.Object.getPrototypeOf(multidrag.DelayedMultiDragGestureRecognizer))));
  dart.trackLibraries("packages/flutter/src/gestures/multidrag.dart", {
    "package:flutter/src/gestures/multidrag.dart": multidrag
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["multidrag.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/gestures/multidrag.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__multidrag: multidrag
  };
}));

//# sourceMappingURL=multidrag.dart.lib.js.map
