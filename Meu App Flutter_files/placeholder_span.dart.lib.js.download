// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/placeholder_span.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/flutter/src/services/mouse_tracking.dart', 'packages/flutter/src/services/text_boundary.dart', 'packages/flutter/src/foundation/math.dart', 'packages/flutter/src/services/text_editing.dart'], (function load__packages__flutter__src__painting__placeholder_span_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__flutter__src__services__mouse_tracking$46dart, packages__flutter__src__services__text_boundary$46dart, packages__flutter__src__foundation__math$46dart, packages__flutter__src__services__text_editing$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const mouse_tracking = packages__flutter__src__services__mouse_tracking$46dart.src__services__mouse_tracking;
  const text_boundary = packages__flutter__src__services__text_boundary$46dart.src__services__text_boundary;
  const math$ = packages__flutter__src__foundation__math$46dart.src__foundation__math;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  var placeholder_span = Object.create(dart.library);
  var strut_style = Object.create(dart.library);
  var text_style = Object.create(dart.library);
  var text_span = Object.create(dart.library);
  var inline_span = Object.create(dart.library);
  var text_painter = Object.create(dart.library);
  var $add = dartx.add;
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $any = dartx.any;
  var $forEach = dartx.forEach;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $length = dartx.length;
  var $clamp = dartx.clamp;
  var $_get = dartx._get;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $isEmpty = dartx.isEmpty;
  var $join = dartx.join;
  var $isNotEmpty = dartx.isNotEmpty;
  var $codeUnitAt = dartx.codeUnitAt;
  var $_equals = dartx._equals;
  var $toRadixString = dartx.toRadixString;
  var $toUpperCase = dartx.toUpperCase;
  var $padLeft = dartx.padLeft;
  var $ceilToDouble = dartx.ceilToDouble;
  var $isFinite = dartx.isFinite;
  var $isNaN = dartx.isNaN;
  var $floorToDouble = dartx.floorToDouble;
  var $isInfinite = dartx.isInfinite;
  var $last = dartx.last;
  var $first = dartx.first;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    EnumPropertyOfPlaceholderAlignment: () => (T.EnumPropertyOfPlaceholderAlignment = dart.constFn(diagnostics.EnumProperty$(ui.PlaceholderAlignment)))(),
    EnumPropertyOfTextBaseline: () => (T.EnumPropertyOfTextBaseline = dart.constFn(diagnostics.EnumProperty$(ui.TextBaseline)))(),
    InlineSpanTobool: () => (T.InlineSpanTobool = dart.constFn(dart.fnType(core.bool, [inline_span.InlineSpan])))(),
    JSArrayOfInlineSpanSemanticsInformation: () => (T.JSArrayOfInlineSpanSemanticsInformation = dart.constFn(_interceptors.JSArray$(inline_span.InlineSpanSemanticsInformation)))(),
    StringToString: () => (T.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    IterablePropertyOfString: () => (T.IterablePropertyOfString = dart.constFn(diagnostics.IterableProperty$(core.String)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    DiagnosticsPropertyOfFontWeight: () => (T.DiagnosticsPropertyOfFontWeight = dart.constFn(diagnostics.DiagnosticsProperty$(ui.FontWeight)))(),
    EnumPropertyOfFontStyle: () => (T.EnumPropertyOfFontStyle = dart.constFn(diagnostics.EnumProperty$(ui.FontStyle)))(),
    DiagnosticsNodeTobool: () => (T.DiagnosticsNodeTobool = dart.constFn(dart.fnType(core.bool, [diagnostics.DiagnosticsNode])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    EnumPropertyOfTextLeadingDistribution: () => (T.EnumPropertyOfTextLeadingDistribution = dart.constFn(diagnostics.EnumProperty$(ui.TextLeadingDistribution)))(),
    DiagnosticsPropertyOfLocale: () => (T.DiagnosticsPropertyOfLocale = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Locale)))(),
    DiagnosticsPropertyOfPaint: () => (T.DiagnosticsPropertyOfPaint = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Paint)))(),
    DiagnosticsPropertyOfTextDecoration: () => (T.DiagnosticsPropertyOfTextDecoration = dart.constFn(diagnostics.DiagnosticsProperty$(ui.TextDecoration)))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    EnumPropertyOfTextOverflow: () => (T.EnumPropertyOfTextOverflow = dart.constFn(diagnostics.EnumProperty$(text_painter.TextOverflow)))(),
    JSArrayOfStringAttribute: () => (T.JSArrayOfStringAttribute = dart.constFn(_interceptors.JSArray$(ui.StringAttribute)))(),
    DiagnosticsPropertyOfGestureRecognizer: () => (T.DiagnosticsPropertyOfGestureRecognizer = dart.constFn(diagnostics.DiagnosticsProperty$(recognizer.GestureRecognizer)))(),
    FunctionN: () => (T.FunctionN = dart.constFn(dart.nullable(core.Function)))(),
    FlagsSummaryOfFunctionN: () => (T.FlagsSummaryOfFunctionN = dart.constFn(diagnostics.FlagsSummary$(T.FunctionN())))(),
    IdentityMapOfString$FunctionN: () => (T.IdentityMapOfString$FunctionN = dart.constFn(_js_helper.IdentityMap$(core.String, T.FunctionN())))(),
    DiagnosticsPropertyOfMouseCursor: () => (T.DiagnosticsPropertyOfMouseCursor = dart.constFn(diagnostics.DiagnosticsProperty$(mouse_cursor.MouseCursor)))(),
    InlineSpanToDiagnosticsNode: () => (T.InlineSpanToDiagnosticsNode = dart.constFn(dart.fnType(diagnostics.DiagnosticsNode, [inline_span.InlineSpan])))(),
    JSArrayOfTextBox: () => (T.JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))(),
    TextBoxToTextBox: () => (T.TextBoxToTextBox = dart.constFn(dart.fnType(ui.TextBox, [ui.TextBox])))(),
    VoidToTextAlign: () => (T.VoidToTextAlign = dart.constFn(dart.fnType(ui.TextAlign, [])))(),
    VoidToTextDirection: () => (T.VoidToTextDirection = dart.constFn(dart.fnType(ui.TextDirection, [])))(),
    VoidTodouble: () => (T.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    VoidToOffset: () => (T.VoidToOffset = dart.constFn(dart.fnType(ui.Offset, [])))(),
    LineMetricsToLineMetrics: () => (T.LineMetricsToLineMetrics = dart.constFn(dart.fnType(ui.LineMetrics, [ui.LineMetrics])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "bottom",
        [_Enum_index]: 4
      }, ui.PlaceholderAlignment.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [debugLabel$]: null,
        [forceStrutHeight$]: null,
        [leading$]: 0,
        [fontStyle$]: null,
        [fontWeight$]: null,
        [leadingDistribution$]: null,
        [height$]: 0,
        [fontSize$]: null,
        [_package]: null,
        [_fontFamilyFallback]: null,
        [fontFamily$]: null
      }, strut_style.StrutStyle.prototype));
    },
    get C2() {
      return C[2] = dart.constList([], diagnostics.DiagnosticsNode);
    },
    get C3() {
      return C[3] = dart.constList([], ui.StringAttribute);
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [stringAttributes$]: C[3] || CT.C3,
        [requiresOwnNode]: true,
        [isPlaceholder$]: true,
        [recognizer$0]: null,
        [semanticsLabel$0]: null,
        [text$0]: "￼"
      }, inline_span.InlineSpanSemanticsInformation.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "clip",
        [_Enum_index]: 0
      }, text_painter.TextOverflow.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "fade",
        [_Enum_index]: 1
      }, text_painter.TextOverflow.prototype));
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ellipsis",
        [_Enum_index]: 2
      }, text_painter.TextOverflow.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "visible",
        [_Enum_index]: 3
      }, text_painter.TextOverflow.prototype));
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9], text_painter.TextOverflow);
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "top",
        [_Enum_index]: 3
      }, ui.PlaceholderAlignment.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "middle",
        [_Enum_index]: 5
      }, ui.PlaceholderAlignment.prototype));
    },
    get C12() {
      return C[12] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "aboveBaseline",
        [_Enum_index]: 1
      }, ui.PlaceholderAlignment.prototype));
    },
    get C13() {
      return C[13] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "belowBaseline",
        [_Enum_index]: 2
      }, ui.PlaceholderAlignment.prototype));
    },
    get C14() {
      return C[14] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "baseline",
        [_Enum_index]: 0
      }, ui.PlaceholderAlignment.prototype));
    },
    get C16() {
      return C[16] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      }, ui.Size.prototype));
    },
    get C15() {
      return C[15] = dart.const(Object.setPrototypeOf({
        [baseline$0]: null,
        [baselineOffset$]: null,
        [alignment$0]: C[0] || CT.C0,
        [size$]: C[16] || CT.C16
      }, text_painter.PlaceholderDimensions.prototype));
    },
    get C18() {
      return C[18] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "parent",
        [_Enum_index]: 0
      }, text_painter.TextWidthBasis.prototype));
    },
    get C19() {
      return C[19] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "longestLine",
        [_Enum_index]: 1
      }, text_painter.TextWidthBasis.prototype));
    },
    get C17() {
      return C[17] = dart.constList([C[18] || CT.C18, C[19] || CT.C19], text_painter.TextWidthBasis);
    },
    get C20() {
      return C[20] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "alphabetic",
        [_Enum_index]: 0
      }, ui.TextBaseline.prototype));
    },
    get C21() {
      return C[21] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ideographic",
        [_Enum_index]: 1
      }, ui.TextBaseline.prototype));
    },
    get C22() {
      return C[22] = dart.const(Object.setPrototypeOf({
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 1 / 0
      }, ui.Offset.prototype));
    },
    get C23() {
      return C[23] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "start",
        [_Enum_index]: 4
      }, ui.TextAlign.prototype));
    },
    get C24() {
      return C[24] = dart.const(Object.setPrototypeOf({
        [ParagraphConstraints_width]: 1 / 0
      }, ui.ParagraphConstraints.prototype));
    },
    get C25() {
      return C[25] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "left",
        [_Enum_index]: 0
      }, ui.TextAlign.prototype));
    },
    get C26() {
      return C[26] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "right",
        [_Enum_index]: 1
      }, ui.TextAlign.prototype));
    },
    get C27() {
      return C[27] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "center",
        [_Enum_index]: 2
      }, ui.TextAlign.prototype));
    },
    get C28() {
      return C[28] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      }, ui.TextDirection.prototype));
    },
    get C29() {
      return C[29] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      }, ui.TextDirection.prototype));
    },
    get C30() {
      return C[30] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "justify",
        [_Enum_index]: 3
      }, ui.TextAlign.prototype));
    },
    get C31() {
      return C[31] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "end",
        [_Enum_index]: 5
      }, ui.TextAlign.prototype));
    },
    get C32() {
      return C[32] = dart.const(Object.setPrototypeOf({
        [lineVerticalOffset$]: 0
      }, text_painter._EmptyLineCaretMetrics.prototype));
    },
    get C33() {
      return C[33] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "upstream",
        [_Enum_index]: 0
      }, ui.TextAffinity.prototype));
    },
    get C34() {
      return C[34] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "downstream",
        [_Enum_index]: 1
      }, ui.TextAffinity.prototype));
    },
    get C35() {
      return C[35] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "tight",
        [_Enum_index]: 0
      }, ui.BoxHeightStyle.prototype));
    },
    get C36() {
      return C[36] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "tight",
        [_Enum_index]: 0
      }, ui.BoxWidthStyle.prototype));
    },
    get C37() {
      return C[37] = dart.constList([], ui.LineMetrics);
    }
  }, false);
  var C = Array(38).fill(void 0);
  var I = [
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/placeholder_span.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/inline_span.dart",
    "package:flutter/src/painting/inline_span.dart",
    "package:flutter/src/painting/placeholder_span.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/strut_style.dart",
    "package:flutter/src/painting/strut_style.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/text_style.dart",
    "package:flutter/src/painting/text_style.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/text_span.dart",
    "package:flutter/src/painting/text_span.dart",
    "package:flutter/src/painting/text_painter.dart",
    "file:///C:/Dev/flutter/packages/flutter/lib/src/painting/text_painter.dart"
  ];
  var alignment$ = dart.privateName(placeholder_span, "PlaceholderSpan.alignment");
  var baseline$ = dart.privateName(placeholder_span, "PlaceholderSpan.baseline");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var style$ = dart.privateName(inline_span, "InlineSpan.style");
  inline_span.InlineSpan = class InlineSpan extends diagnostics.DiagnosticableTree {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    getSpanForPosition(position) {
      if (!this.debugAssertIsValid()) dart.assertFailed(null, I[1], 255, 12, "debugAssertIsValid()");
      let offset = new inline_span.Accumulator.new();
      let result = null;
      this.visitChildren(dart.fn(span => {
        result = span.getSpanForPositionVisitor(position, offset);
        return result == null;
      }, T.InlineSpanTobool()));
      return result;
    }
    toPlainText(opts) {
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      let buffer = new core.StringBuffer.new();
      this.computeToPlainText(buffer, {includeSemanticsLabels: includeSemanticsLabels, includePlaceholders: includePlaceholders});
      return buffer.toString();
    }
    getSemanticsInformation() {
      let collector = T.JSArrayOfInlineSpanSemanticsInformation().of([]);
      this.computeSemanticsInformation(collector);
      return collector;
    }
    codeUnitAt(index) {
      if (index < 0) {
        return null;
      }
      let offset = new inline_span.Accumulator.new();
      let result = null;
      this.visitChildren(dart.fn(span => {
        result = span.codeUnitAtVisitor(index, offset);
        return result == null;
      }, T.InlineSpanTobool()));
      return result;
    }
    debugAssertIsValid() {
      return true;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return inline_span.InlineSpan.is(other) && dart.equals(other.style, this.style);
    }
    get hashCode() {
      return dart.hashCode(this.style);
    }
    debugFillProperties(properties) {
      let t$360;
      super.debugFillProperties(properties);
      properties.defaultDiagnosticsTreeStyle = diagnostics.DiagnosticsTreeStyle.whitespace;
      t$360 = this.style;
      t$360 == null ? null : t$360.debugFillProperties(properties);
    }
  };
  (inline_span.InlineSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    this[style$] = style;
    dart.global.Object.getPrototypeOf(inline_span.InlineSpan).new.call(this);
    ;
  }).prototype = inline_span.InlineSpan.prototype;
  dart.addTypeTests(inline_span.InlineSpan);
  dart.addTypeCaches(inline_span.InlineSpan);
  dart.setMethodSignature(inline_span.InlineSpan, () => dart.global.Object.setPrototypeOf({
    getSpanForPosition: dart.fnType(dart.nullable(inline_span.InlineSpan), [ui.TextPosition]),
    toPlainText: dart.fnType(core.String, [], {includePlaceholders: core.bool, includeSemanticsLabels: core.bool}, {}),
    getSemanticsInformation: dart.fnType(core.List$(inline_span.InlineSpanSemanticsInformation), []),
    codeUnitAt: dart.fnType(dart.nullable(core.int), [core.int]),
    debugAssertIsValid: dart.fnType(core.bool, [])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(inline_span.InlineSpan))));
  dart.setLibraryUri(inline_span.InlineSpan, I[2]);
  dart.setFieldSignature(inline_span.InlineSpan, () => dart.global.Object.setPrototypeOf({style: dart.finalFieldType(dart.nullable(text_style.TextStyle))}, dart.getFields(dart.global.Object.getPrototypeOf(inline_span.InlineSpan))));
  dart.defineExtensionMethods(inline_span.InlineSpan, ['_equals']);
  dart.defineExtensionAccessors(inline_span.InlineSpan, ['hashCode']);
  placeholder_span.PlaceholderSpan = class PlaceholderSpan extends inline_span.InlineSpan {
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get baseline() {
      return this[baseline$];
    }
    set baseline(value) {
      super.baseline = value;
    }
    computeToPlainText(buffer, opts) {
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      if (includePlaceholders) {
        buffer.writeCharCode(65532);
      }
    }
    computeSemanticsInformation(collector) {
      collector[$add](inline_span.InlineSpanSemanticsInformation.placeholder);
    }
    describeSemantics(offset, semanticsOffsets, semanticsElements) {
      semanticsOffsets[$add](offset.value);
      semanticsOffsets[$add](offset.value + 1);
      semanticsElements[$add](null);
      offset.increment(1);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfPlaceholderAlignment()).new("alignment", this.alignment, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfTextBaseline()).new("baseline", this.baseline, {defaultValue: null}));
    }
    debugAssertIsValid() {
      if (!false) dart.assertFailed("Consider implementing the WidgetSpan interface instead.", I[0], 99, 12, "false");
      return super.debugAssertIsValid();
    }
  };
  (placeholder_span.PlaceholderSpan.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let style = opts && 'style' in opts ? opts.style : null;
    this[alignment$] = alignment;
    this[baseline$] = baseline;
    dart.global.Object.getPrototypeOf(placeholder_span.PlaceholderSpan).new.call(this, {style: style});
    ;
  }).prototype = placeholder_span.PlaceholderSpan.prototype;
  dart.addTypeTests(placeholder_span.PlaceholderSpan);
  dart.addTypeCaches(placeholder_span.PlaceholderSpan);
  dart.setMethodSignature(placeholder_span.PlaceholderSpan, () => dart.global.Object.setPrototypeOf({
    computeToPlainText: dart.fnType(dart.void, [core.StringBuffer], {includePlaceholders: core.bool, includeSemanticsLabels: core.bool}, {}),
    computeSemanticsInformation: dart.fnType(dart.void, [core.List$(inline_span.InlineSpanSemanticsInformation)]),
    describeSemantics: dart.fnType(dart.void, [inline_span.Accumulator, core.List$(core.int), core.List])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(placeholder_span.PlaceholderSpan))));
  dart.setLibraryUri(placeholder_span.PlaceholderSpan, I[3]);
  dart.setFieldSignature(placeholder_span.PlaceholderSpan, () => dart.global.Object.setPrototypeOf({
    alignment: dart.finalFieldType(ui.PlaceholderAlignment),
    baseline: dart.finalFieldType(dart.nullable(ui.TextBaseline))
  }, dart.getFields(dart.global.Object.getPrototypeOf(placeholder_span.PlaceholderSpan))));
  dart.setStaticFieldSignature(placeholder_span.PlaceholderSpan, () => ['placeholderCodeUnit']);
  dart.defineLazy(placeholder_span.PlaceholderSpan, {
    /*placeholder_span.PlaceholderSpan.placeholderCodeUnit*/get placeholderCodeUnit() {
      return 65532;
    }
  }, false);
  var fontFamily$ = dart.privateName(strut_style, "StrutStyle.fontFamily");
  var _fontFamilyFallback = dart.privateName(strut_style, "StrutStyle._fontFamilyFallback");
  var _package = dart.privateName(strut_style, "StrutStyle._package");
  var fontSize$ = dart.privateName(strut_style, "StrutStyle.fontSize");
  var height$ = dart.privateName(strut_style, "StrutStyle.height");
  var leadingDistribution$ = dart.privateName(strut_style, "StrutStyle.leadingDistribution");
  var fontWeight$ = dart.privateName(strut_style, "StrutStyle.fontWeight");
  var fontStyle$ = dart.privateName(strut_style, "StrutStyle.fontStyle");
  var leading$ = dart.privateName(strut_style, "StrutStyle.leading");
  var forceStrutHeight$ = dart.privateName(strut_style, "StrutStyle.forceStrutHeight");
  var debugLabel$ = dart.privateName(strut_style, "StrutStyle.debugLabel");
  var _fontFamilyFallback$ = dart.privateName(strut_style, "_fontFamilyFallback");
  var _package$ = dart.privateName(strut_style, "_package");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  strut_style.StrutStyle = class StrutStyle extends Object_Diagnosticable$36 {
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get [_fontFamilyFallback$]() {
      return this[_fontFamilyFallback];
    }
    set [_fontFamilyFallback$](value) {
      super[_fontFamilyFallback$] = value;
    }
    get [_package$]() {
      return this[_package];
    }
    set [_package$](value) {
      super[_package$] = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get leadingDistribution() {
      return this[leadingDistribution$];
    }
    set leadingDistribution(value) {
      super.leadingDistribution = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get leading() {
      return this[leading$];
    }
    set leading(value) {
      super.leading = value;
    }
    get forceStrutHeight() {
      return this[forceStrutHeight$];
    }
    set forceStrutHeight(value) {
      super.forceStrutHeight = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static ['_#new#tearOff'](opts) {
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
      let leading = opts && 'leading' in opts ? opts.leading : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      return new strut_style.StrutStyle.new({fontFamily: fontFamily, fontFamilyFallback: fontFamilyFallback, fontSize: fontSize, height: height, leadingDistribution: leadingDistribution, leading: leading, fontWeight: fontWeight, fontStyle: fontStyle, forceStrutHeight: forceStrutHeight, debugLabel: debugLabel, package: $package});
    }
    static ['_#fromTextStyle#tearOff'](textStyle, opts) {
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
      let leading = opts && 'leading' in opts ? opts.leading : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      return new strut_style.StrutStyle.fromTextStyle(textStyle, {fontFamily: fontFamily, fontFamilyFallback: fontFamilyFallback, fontSize: fontSize, height: height, leadingDistribution: leadingDistribution, leading: leading, fontWeight: fontWeight, fontStyle: fontStyle, forceStrutHeight: forceStrutHeight, debugLabel: debugLabel, package: $package});
    }
    get fontFamilyFallback() {
      if (this[_package$] != null && this[_fontFamilyFallback$] != null) {
        return dart.nullCheck(this[_fontFamilyFallback$])[$map](core.String, dart.fn(family => "packages/" + dart.str(this[_package$]) + "/" + family, T.StringToString()))[$toList]();
      }
      return this[_fontFamilyFallback$];
    }
    compareTo(other) {
      if (this === other) {
        return basic_types.RenderComparison.identical;
      }
      if (this.fontFamily != other.fontFamily || this.fontSize != other.fontSize || !dart.equals(this.fontWeight, other.fontWeight) || this.fontStyle != other.fontStyle || this.height != other.height || this.leading != other.leading || this.forceStrutHeight != other.forceStrutHeight || !collections.listEquals(core.String, this.fontFamilyFallback, other.fontFamilyFallback)) {
        return basic_types.RenderComparison.layout;
      }
      return basic_types.RenderComparison.identical;
    }
    inheritFromTextStyle(other) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4;
      if (other == null) {
        return this;
      }
      return new strut_style.StrutStyle.new({fontFamily: (t$360 = this.fontFamily, t$360 == null ? other.fontFamily : t$360), fontFamilyFallback: (t$360$ = this.fontFamilyFallback, t$360$ == null ? other.fontFamilyFallback : t$360$), fontSize: (t$360$0 = this.fontSize, t$360$0 == null ? other.fontSize : t$360$0), height: (t$360$1 = this.height, t$360$1 == null ? other.height : t$360$1), leading: this.leading, fontWeight: (t$360$2 = this.fontWeight, t$360$2 == null ? other.fontWeight : t$360$2), fontStyle: (t$360$3 = this.fontStyle, t$360$3 == null ? other.fontStyle : t$360$3), forceStrutHeight: this.forceStrutHeight, debugLabel: (t$360$4 = this.debugLabel, t$360$4 == null ? other.debugLabel : t$360$4)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return strut_style.StrutStyle.is(other) && other.fontFamily == this.fontFamily && other.fontSize == this.fontSize && dart.equals(other.fontWeight, this.fontWeight) && other.fontStyle == this.fontStyle && other.height == this.height && other.leading == this.leading && other.forceStrutHeight == this.forceStrutHeight;
    }
    get hashCode() {
      return core.Object.hash(this.fontFamily, this.fontSize, this.fontWeight, this.fontStyle, this.height, this.leading, this.forceStrutHeight);
    }
    toStringShort() {
      return object.objectRuntimeType(this, "StrutStyle");
    }
    debugFillProperties(properties, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : "";
      super.debugFillProperties(properties);
      if (this.debugLabel != null) {
        properties.add(new diagnostics.MessageProperty.new(prefix + "debugLabel", dart.nullCheck(this.debugLabel)));
      }
      let styles = T.JSArrayOfDiagnosticsNode().of([new diagnostics.StringProperty.new(prefix + "family", this.fontFamily, {defaultValue: null, quoted: false}), new (T.IterablePropertyOfString()).new(prefix + "familyFallback", this.fontFamilyFallback, {defaultValue: null}), new diagnostics.DoubleProperty.new(prefix + "size", this.fontSize, {defaultValue: null})]);
      let weightDescription = null;
      if (this.fontWeight != null) {
        weightDescription = "w" + dart.str(dart.nullCheck(this.fontWeight).index + 1) + "00";
      }
      styles[$add](new (T.DiagnosticsPropertyOfFontWeight()).new(prefix + "weight", this.fontWeight, {description: weightDescription, defaultValue: null}));
      styles[$add](new (T.EnumPropertyOfFontStyle()).new(prefix + "style", this.fontStyle, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(prefix + "height", this.height, {unit: "x", defaultValue: null}));
      styles[$add](new diagnostics.FlagProperty.new(prefix + "forceStrutHeight", {value: this.forceStrutHeight, ifTrue: prefix + "<strut height forced>", ifFalse: prefix + "<strut height normal>"}));
      let styleSpecified = styles[$any](dart.fn(n => !n.isFiltered(diagnostics.DiagnosticLevel.info), T.DiagnosticsNodeTobool()));
      styles[$forEach](dart.bind(properties, 'add'));
      if (!styleSpecified) {
        properties.add(new diagnostics.FlagProperty.new("forceStrutHeight", {value: this.forceStrutHeight, ifTrue: prefix + "<strut height forced>", ifFalse: prefix + "<strut height normal>"}));
      }
    }
  };
  (strut_style.StrutStyle.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[fontSize$] = fontSize;
    this[height$] = height;
    this[leadingDistribution$] = leadingDistribution;
    this[leading$] = leading;
    this[fontWeight$] = fontWeight;
    this[fontStyle$] = fontStyle;
    this[forceStrutHeight$] = forceStrutHeight;
    this[debugLabel$] = debugLabel;
    this[fontFamily$] = $package == null ? fontFamily : "packages/" + dart.str($package) + "/" + dart.str(fontFamily);
    this[_fontFamilyFallback] = fontFamilyFallback;
    this[_package] = $package;
    if (!(fontSize == null || dart.notNull(fontSize) > 0)) dart.assertFailed(null, I[4], 314, 15, "fontSize == null || fontSize > 0");
    if (!(leading == null || dart.notNull(leading) >= 0)) dart.assertFailed(null, I[4], 315, 15, "leading == null || leading >= 0");
    if (!($package == null || fontFamily != null || fontFamilyFallback != null)) dart.assertFailed(null, I[4], 316, 15, "package == null || (fontFamily != null || fontFamilyFallback != null)");
    ;
  }).prototype = strut_style.StrutStyle.prototype;
  (strut_style.StrutStyle.fromTextStyle = function(textStyle, opts) {
    let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[leading$] = leading;
    this[forceStrutHeight$] = forceStrutHeight;
    if (!(fontSize == null || dart.notNull(fontSize) > 0)) dart.assertFailed(null, I[4], 350, 15, "fontSize == null || fontSize > 0");
    if (!(leading == null || dart.notNull(leading) >= 0)) dart.assertFailed(null, I[4], 351, 15, "leading == null || leading >= 0");
    if (!($package == null || fontFamily != null || fontFamilyFallback != null)) dart.assertFailed(null, I[4], 352, 15, "package == null || fontFamily != null || fontFamilyFallback != null");
    this[fontFamily$] = fontFamily != null ? $package == null ? fontFamily : "packages/" + dart.str($package) + "/" + dart.str(fontFamily) : textStyle.fontFamily;
    this[_fontFamilyFallback] = (t$360 = fontFamilyFallback, t$360 == null ? textStyle.fontFamilyFallback : t$360);
    this[height$] = (t$360$ = height, t$360$ == null ? textStyle.height : t$360$);
    this[leadingDistribution$] = (t$360$0 = leadingDistribution, t$360$0 == null ? textStyle.leadingDistribution : t$360$0);
    this[fontSize$] = (t$360$1 = fontSize, t$360$1 == null ? textStyle.fontSize : t$360$1);
    this[fontWeight$] = (t$360$2 = fontWeight, t$360$2 == null ? textStyle.fontWeight : t$360$2);
    this[fontStyle$] = (t$360$3 = fontStyle, t$360$3 == null ? textStyle.fontStyle : t$360$3);
    this[debugLabel$] = (t$360$4 = debugLabel, t$360$4 == null ? textStyle.debugLabel : t$360$4);
    this[_package] = $package;
    ;
  }).prototype = strut_style.StrutStyle.prototype;
  dart.addTypeTests(strut_style.StrutStyle);
  dart.addTypeCaches(strut_style.StrutStyle);
  dart.setMethodSignature(strut_style.StrutStyle, () => dart.global.Object.setPrototypeOf({
    compareTo: dart.fnType(basic_types.RenderComparison, [strut_style.StrutStyle]),
    inheritFromTextStyle: dart.fnType(strut_style.StrutStyle, [dart.nullable(text_style.TextStyle)]),
    debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder], {prefix: core.String}, {})
  }, dart.getMethods(dart.global.Object.getPrototypeOf(strut_style.StrutStyle))));
  dart.setGetterSignature(strut_style.StrutStyle, () => dart.global.Object.setPrototypeOf({fontFamilyFallback: dart.nullable(core.List$(core.String))}, dart.getGetters(dart.global.Object.getPrototypeOf(strut_style.StrutStyle))));
  dart.setLibraryUri(strut_style.StrutStyle, I[5]);
  dart.setFieldSignature(strut_style.StrutStyle, () => dart.global.Object.setPrototypeOf({
    fontFamily: dart.finalFieldType(dart.nullable(core.String)),
    [_fontFamilyFallback$]: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    [_package$]: dart.finalFieldType(dart.nullable(core.String)),
    fontSize: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    leadingDistribution: dart.finalFieldType(dart.nullable(ui.TextLeadingDistribution)),
    fontWeight: dart.finalFieldType(dart.nullable(ui.FontWeight)),
    fontStyle: dart.finalFieldType(dart.nullable(ui.FontStyle)),
    leading: dart.finalFieldType(dart.nullable(core.double)),
    forceStrutHeight: dart.finalFieldType(dart.nullable(core.bool)),
    debugLabel: dart.finalFieldType(dart.nullable(core.String))
  }, dart.getFields(dart.global.Object.getPrototypeOf(strut_style.StrutStyle))));
  dart.setStaticFieldSignature(strut_style.StrutStyle, () => ['disabled']);
  dart.defineExtensionMethods(strut_style.StrutStyle, ['_equals']);
  dart.defineExtensionAccessors(strut_style.StrutStyle, ['hashCode']);
  dart.defineLazy(strut_style.StrutStyle, {
    /*strut_style.StrutStyle.disabled*/get disabled() {
      return C[1] || CT.C1;
    }
  }, false);
  var inherit$ = dart.privateName(text_style, "TextStyle.inherit");
  var color$ = dart.privateName(text_style, "TextStyle.color");
  var backgroundColor$ = dart.privateName(text_style, "TextStyle.backgroundColor");
  var fontFamily$0 = dart.privateName(text_style, "TextStyle.fontFamily");
  var _fontFamilyFallback$0 = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var _package$0 = dart.privateName(text_style, "TextStyle._package");
  var fontSize$0 = dart.privateName(text_style, "TextStyle.fontSize");
  var fontWeight$0 = dart.privateName(text_style, "TextStyle.fontWeight");
  var fontStyle$0 = dart.privateName(text_style, "TextStyle.fontStyle");
  var letterSpacing$ = dart.privateName(text_style, "TextStyle.letterSpacing");
  var wordSpacing$ = dart.privateName(text_style, "TextStyle.wordSpacing");
  var textBaseline$ = dart.privateName(text_style, "TextStyle.textBaseline");
  var height$0 = dart.privateName(text_style, "TextStyle.height");
  var leadingDistribution$0 = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var locale$ = dart.privateName(text_style, "TextStyle.locale");
  var foreground$ = dart.privateName(text_style, "TextStyle.foreground");
  var background$ = dart.privateName(text_style, "TextStyle.background");
  var decoration$ = dart.privateName(text_style, "TextStyle.decoration");
  var decorationColor$ = dart.privateName(text_style, "TextStyle.decorationColor");
  var decorationStyle$ = dart.privateName(text_style, "TextStyle.decorationStyle");
  var decorationThickness$ = dart.privateName(text_style, "TextStyle.decorationThickness");
  var debugLabel$0 = dart.privateName(text_style, "TextStyle.debugLabel");
  var shadows$ = dart.privateName(text_style, "TextStyle.shadows");
  var fontFeatures$ = dart.privateName(text_style, "TextStyle.fontFeatures");
  var fontVariations$ = dart.privateName(text_style, "TextStyle.fontVariations");
  var overflow$ = dart.privateName(text_style, "TextStyle.overflow");
  var _fontFamilyFallback$1 = dart.privateName(text_style, "_fontFamilyFallback");
  var _package$1 = dart.privateName(text_style, "_package");
  var _fontFamily = dart.privateName(text_style, "_fontFamily");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  text_style.TextStyle = class TextStyle extends Object_Diagnosticable$36$ {
    get inherit() {
      return this[inherit$];
    }
    set inherit(value) {
      super.inherit = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get fontFamily() {
      return this[fontFamily$0];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get [_fontFamilyFallback$1]() {
      return this[_fontFamilyFallback$0];
    }
    set [_fontFamilyFallback$1](value) {
      super[_fontFamilyFallback$1] = value;
    }
    get [_package$1]() {
      return this[_package$0];
    }
    set [_package$1](value) {
      super[_package$1] = value;
    }
    get fontSize() {
      return this[fontSize$0];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontWeight() {
      return this[fontWeight$0];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$0];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get textBaseline() {
      return this[textBaseline$];
    }
    set textBaseline(value) {
      super.textBaseline = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get leadingDistribution() {
      return this[leadingDistribution$0];
    }
    set leadingDistribution(value) {
      super.leadingDistribution = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get foreground() {
      return this[foreground$];
    }
    set foreground(value) {
      super.foreground = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get decorationThickness() {
      return this[decorationThickness$];
    }
    set decorationThickness(value) {
      super.decorationThickness = value;
    }
    get debugLabel() {
      return this[debugLabel$0];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get shadows() {
      return this[shadows$];
    }
    set shadows(value) {
      super.shadows = value;
    }
    get fontFeatures() {
      return this[fontFeatures$];
    }
    set fontFeatures(value) {
      super.fontFeatures = value;
    }
    get fontVariations() {
      return this[fontVariations$];
    }
    set fontVariations(value) {
      super.fontVariations = value;
    }
    get overflow() {
      return this[overflow$];
    }
    set overflow(value) {
      super.overflow = value;
    }
    static ['_#new#tearOff'](opts) {
      let inherit = opts && 'inherit' in opts ? opts.inherit : true;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let fontVariations = opts && 'fontVariations' in opts ? opts.fontVariations : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      return new text_style.TextStyle.new({inherit: inherit, color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, leadingDistribution: leadingDistribution, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, fontVariations: fontVariations, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, debugLabel: debugLabel, fontFamily: fontFamily, fontFamilyFallback: fontFamilyFallback, package: $package, overflow: overflow});
    }
    get fontFamilyFallback() {
      let t$360;
      return this[_package$1] == null ? this[_fontFamilyFallback$1] : (t$360 = this[_fontFamilyFallback$1], t$360 == null ? null : t$360[$map](core.String, dart.fn(str => "packages/" + dart.str(this[_package$1]) + "/" + str, T.StringToString()))[$toList]());
    }
    get [_fontFamily]() {
      let t$360, t$360$, t$360$0;
      if (this[_package$1] != null) {
        let fontFamilyPrefix = "packages/" + dart.str(this[_package$1]) + "/";
        if (!dart.test((t$360$ = (t$360 = this.fontFamily, t$360 == null ? null : t$360[$startsWith](fontFamilyPrefix)), t$360$ == null ? true : t$360$))) dart.assertFailed(null, I[6], 827, 14, "fontFamily?.startsWith(fontFamilyPrefix) ?? true");
        t$360$0 = this.fontFamily;
        return t$360$0 == null ? null : t$360$0[$substring](fontFamilyPrefix.length);
      }
      return this.fontFamily;
    }
    copyWith(opts) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5, t$360$6, t$360$7, t$360$8, t$360$9, t$360$10, t$360$11, t$360$12, t$360$13, t$360$14, t$360$15, t$360$16, t$360$17, t$360$18, t$360$19, t$360$20, t$360$21, t$360$22;
      let inherit = opts && 'inherit' in opts ? opts.inherit : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let fontVariations = opts && 'fontVariations' in opts ? opts.fontVariations : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      if (!(color == null || foreground == null)) dart.assertFailed(text_style._kColorForegroundWarning, I[6], 870, 12, "color == null || foreground == null");
      if (!(backgroundColor == null || background == null)) dart.assertFailed(text_style._kColorBackgroundWarning, I[6], 871, 12, "backgroundColor == null || background == null");
      let newDebugLabel = null;
      if (!dart.fn(() => {
        let t$360;
        if (this.debugLabel != null) {
          newDebugLabel = (t$360 = debugLabel, t$360 == null ? "(" + dart.str(this.debugLabel) + ").copyWith" : t$360);
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[6], 873, 12, "() {\r\n      if (this.debugLabel != null) {\r\n        newDebugLabel = debugLabel ?? '(${this.debugLabel}).copyWith';\r\n      }\r\n      return true;\r\n    }()");
      return new text_style.TextStyle.new({inherit: (t$360 = inherit, t$360 == null ? this.inherit : t$360), color: this.foreground == null && foreground == null ? (t$360$ = color, t$360$ == null ? this.color : t$360$) : null, backgroundColor: this.background == null && background == null ? (t$360$0 = backgroundColor, t$360$0 == null ? this.backgroundColor : t$360$0) : null, fontSize: (t$360$1 = fontSize, t$360$1 == null ? this.fontSize : t$360$1), fontWeight: (t$360$2 = fontWeight, t$360$2 == null ? this.fontWeight : t$360$2), fontStyle: (t$360$3 = fontStyle, t$360$3 == null ? this.fontStyle : t$360$3), letterSpacing: (t$360$4 = letterSpacing, t$360$4 == null ? this.letterSpacing : t$360$4), wordSpacing: (t$360$5 = wordSpacing, t$360$5 == null ? this.wordSpacing : t$360$5), textBaseline: (t$360$6 = textBaseline, t$360$6 == null ? this.textBaseline : t$360$6), height: (t$360$7 = height, t$360$7 == null ? this.height : t$360$7), leadingDistribution: (t$360$8 = leadingDistribution, t$360$8 == null ? this.leadingDistribution : t$360$8), locale: (t$360$9 = locale, t$360$9 == null ? this.locale : t$360$9), foreground: (t$360$10 = foreground, t$360$10 == null ? this.foreground : t$360$10), background: (t$360$11 = background, t$360$11 == null ? this.background : t$360$11), shadows: (t$360$12 = shadows, t$360$12 == null ? this.shadows : t$360$12), fontFeatures: (t$360$13 = fontFeatures, t$360$13 == null ? this.fontFeatures : t$360$13), fontVariations: (t$360$14 = fontVariations, t$360$14 == null ? this.fontVariations : t$360$14), decoration: (t$360$15 = decoration, t$360$15 == null ? this.decoration : t$360$15), decorationColor: (t$360$16 = decorationColor, t$360$16 == null ? this.decorationColor : t$360$16), decorationStyle: (t$360$17 = decorationStyle, t$360$17 == null ? this.decorationStyle : t$360$17), decorationThickness: (t$360$18 = decorationThickness, t$360$18 == null ? this.decorationThickness : t$360$18), debugLabel: newDebugLabel, fontFamily: (t$360$19 = fontFamily, t$360$19 == null ? this[_fontFamily] : t$360$19), fontFamilyFallback: (t$360$20 = fontFamilyFallback, t$360$20 == null ? this[_fontFamilyFallback$1] : t$360$20), package: (t$360$21 = $package, t$360$21 == null ? this[_package$1] : t$360$21), overflow: (t$360$22 = overflow, t$360$22 == null ? this.overflow : t$360$22)});
    }
    apply(opts) {
      let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5, t$360$6, t$360$7, t$360$8, t$360$9, t$360$10, t$360$11, t$360$12, t$360$13;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThicknessFactor = opts && 'decorationThicknessFactor' in opts ? opts.decorationThicknessFactor : 1;
      let decorationThicknessDelta = opts && 'decorationThicknessDelta' in opts ? opts.decorationThicknessDelta : 0;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let fontSizeFactor = opts && 'fontSizeFactor' in opts ? opts.fontSizeFactor : 1;
      let fontSizeDelta = opts && 'fontSizeDelta' in opts ? opts.fontSizeDelta : 0;
      let fontWeightDelta = opts && 'fontWeightDelta' in opts ? opts.fontWeightDelta : 0;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacingFactor = opts && 'letterSpacingFactor' in opts ? opts.letterSpacingFactor : 1;
      let letterSpacingDelta = opts && 'letterSpacingDelta' in opts ? opts.letterSpacingDelta : 0;
      let wordSpacingFactor = opts && 'wordSpacingFactor' in opts ? opts.wordSpacingFactor : 1;
      let wordSpacingDelta = opts && 'wordSpacingDelta' in opts ? opts.wordSpacingDelta : 0;
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : 1;
      let heightDelta = opts && 'heightDelta' in opts ? opts.heightDelta : 0;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let fontVariations = opts && 'fontVariations' in opts ? opts.fontVariations : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      if (!(this.fontSize != null || fontSizeFactor === 1.0 && fontSizeDelta === 0.0)) dart.assertFailed(null, I[6], 968, 12, "fontSize != null || (fontSizeFactor == 1.0 && fontSizeDelta == 0.0)");
      if (!(this.fontWeight != null || fontWeightDelta === 0.0)) dart.assertFailed(null, I[6], 969, 12, "fontWeight != null || fontWeightDelta == 0.0");
      if (!(this.letterSpacing != null || letterSpacingFactor === 1.0 && letterSpacingDelta === 0.0)) dart.assertFailed(null, I[6], 970, 12, "letterSpacing != null || (letterSpacingFactor == 1.0 && letterSpacingDelta == 0.0)");
      if (!(this.wordSpacing != null || wordSpacingFactor === 1.0 && wordSpacingDelta === 0.0)) dart.assertFailed(null, I[6], 971, 12, "wordSpacing != null || (wordSpacingFactor == 1.0 && wordSpacingDelta == 0.0)");
      if (!(this.decorationThickness != null || decorationThicknessFactor === 1.0 && decorationThicknessDelta === 0.0)) dart.assertFailed(null, I[6], 972, 12, "decorationThickness != null || (decorationThicknessFactor == 1.0 && decorationThicknessDelta == 0.0)");
      let modifiedDebugLabel = null;
      if (!dart.fn(() => {
        if (this.debugLabel != null) {
          modifiedDebugLabel = "(" + dart.str(this.debugLabel) + ").apply";
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[6], 975, 12, "() {\r\n      if (debugLabel != null) {\r\n        modifiedDebugLabel = '($debugLabel).apply';\r\n      }\r\n      return true;\r\n    }()");
      return new text_style.TextStyle.new({inherit: this.inherit, color: this.foreground == null ? (t$360 = color, t$360 == null ? this.color : t$360) : null, backgroundColor: this.background == null ? (t$360$ = backgroundColor, t$360$ == null ? this.backgroundColor : t$360$) : null, fontFamily: (t$360$0 = fontFamily, t$360$0 == null ? this[_fontFamily] : t$360$0), fontFamilyFallback: (t$360$1 = fontFamilyFallback, t$360$1 == null ? this[_fontFamilyFallback$1] : t$360$1), fontSize: this.fontSize == null ? null : dart.nullCheck(this.fontSize) * fontSizeFactor + fontSizeDelta, fontWeight: this.fontWeight == null ? null : ui.FontWeight.values[$_get]((dart.nullCheck(this.fontWeight).index + fontWeightDelta)[$clamp](0, ui.FontWeight.values[$length] - 1)), fontStyle: (t$360$2 = fontStyle, t$360$2 == null ? this.fontStyle : t$360$2), letterSpacing: this.letterSpacing == null ? null : dart.nullCheck(this.letterSpacing) * letterSpacingFactor + letterSpacingDelta, wordSpacing: this.wordSpacing == null ? null : dart.nullCheck(this.wordSpacing) * wordSpacingFactor + wordSpacingDelta, textBaseline: (t$360$3 = textBaseline, t$360$3 == null ? this.textBaseline : t$360$3), height: this.height == null ? null : dart.nullCheck(this.height) * heightFactor + heightDelta, leadingDistribution: (t$360$4 = leadingDistribution, t$360$4 == null ? this.leadingDistribution : t$360$4), locale: (t$360$5 = locale, t$360$5 == null ? this.locale : t$360$5), foreground: this.foreground, background: this.background, shadows: (t$360$6 = shadows, t$360$6 == null ? this.shadows : t$360$6), fontFeatures: (t$360$7 = fontFeatures, t$360$7 == null ? this.fontFeatures : t$360$7), fontVariations: (t$360$8 = fontVariations, t$360$8 == null ? this.fontVariations : t$360$8), decoration: (t$360$9 = decoration, t$360$9 == null ? this.decoration : t$360$9), decorationColor: (t$360$10 = decorationColor, t$360$10 == null ? this.decorationColor : t$360$10), decorationStyle: (t$360$11 = decorationStyle, t$360$11 == null ? this.decorationStyle : t$360$11), decorationThickness: this.decorationThickness == null ? null : dart.nullCheck(this.decorationThickness) * decorationThicknessFactor + decorationThicknessDelta, overflow: (t$360$12 = overflow, t$360$12 == null ? this.overflow : t$360$12), package: (t$360$13 = $package, t$360$13 == null ? this[_package$1] : t$360$13), debugLabel: modifiedDebugLabel});
    }
    merge(other) {
      if (other == null) {
        return this;
      }
      if (!other.inherit) {
        return other;
      }
      let mergedDebugLabel = null;
      if (!dart.fn(() => {
        let t$360, t$360$;
        if (other.debugLabel != null || this.debugLabel != null) {
          mergedDebugLabel = "(" + dart.str((t$360 = this.debugLabel, t$360 == null ? "unknown" : t$360)) + ").merge(" + dart.str((t$360$ = other.debugLabel, t$360$ == null ? "unknown" : t$360$)) + ")";
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[6], 1042, 12, "() {\r\n      if (other.debugLabel != null || debugLabel != null) {\r\n        mergedDebugLabel = '(${debugLabel ?? _kDefaultDebugLabel}).merge(${other.debugLabel ?? _kDefaultDebugLabel})';\r\n      }\r\n      return true;\r\n    }()");
      return this.copyWith({color: other.color, backgroundColor: other.backgroundColor, fontSize: other.fontSize, fontWeight: other.fontWeight, fontStyle: other.fontStyle, letterSpacing: other.letterSpacing, wordSpacing: other.wordSpacing, textBaseline: other.textBaseline, height: other.height, leadingDistribution: other.leadingDistribution, locale: other.locale, foreground: other.foreground, background: other.background, shadows: other.shadows, fontFeatures: other.fontFeatures, fontVariations: other.fontVariations, decoration: other.decoration, decorationColor: other.decorationColor, decorationStyle: other.decorationStyle, decorationThickness: other.decorationThickness, debugLabel: mergedDebugLabel, fontFamily: other[_fontFamily], fontFamilyFallback: other[_fontFamilyFallback$1], package: other[_package$1], overflow: other.overflow});
    }
    static lerp(a, b, t) {
      let t$361, t$361$, t$361$0, t$361$1, t$361$2, t$361$3, t$361$4, t$361$5, t$362, t$361$6, t$362$, t$361$7, t$362$0, t$361$8, t$362$1, t$361$9, t$361$10, t$361$11;
      if (a == b) {
        return a;
      }
      let lerpDebugLabel = null;
      if (!dart.fn(() => {
        let t$360, t$360$, t$360$0, t$360$1;
        lerpDebugLabel = "lerp(" + dart.str((t$360$ = (t$360 = a, t$360 == null ? null : t$360.debugLabel), t$360$ == null ? "unknown" : t$360$)) + " ⎯" + t[$toStringAsFixed](1) + "→ " + dart.str((t$360$1 = (t$360$0 = b, t$360$0 == null ? null : t$360$0.debugLabel), t$360$1 == null ? "unknown" : t$360$1)) + ")";
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[6], 1106, 12, "() {\r\n      lerpDebugLabel = 'lerp(${a?.debugLabel ?? _kDefaultDebugLabel} ⎯${t.toStringAsFixed(1)}→ ${b?.debugLabel ?? _kDefaultDebugLabel})';\r\n      return true;\r\n    }()");
      if (a == null) {
        return new text_style.TextStyle.new({inherit: dart.nullCheck(b).inherit, color: ui.Color.lerp(null, b.color, t), backgroundColor: ui.Color.lerp(null, b.backgroundColor, t), fontSize: t < 0.5 ? null : b.fontSize, fontWeight: ui.FontWeight.lerp(null, b.fontWeight, t), fontStyle: t < 0.5 ? null : b.fontStyle, letterSpacing: t < 0.5 ? null : b.letterSpacing, wordSpacing: t < 0.5 ? null : b.wordSpacing, textBaseline: t < 0.5 ? null : b.textBaseline, height: t < 0.5 ? null : b.height, leadingDistribution: t < 0.5 ? null : b.leadingDistribution, locale: t < 0.5 ? null : b.locale, foreground: t < 0.5 ? null : b.foreground, background: t < 0.5 ? null : b.background, shadows: t < 0.5 ? null : b.shadows, fontFeatures: t < 0.5 ? null : b.fontFeatures, fontVariations: t < 0.5 ? null : b.fontVariations, decoration: t < 0.5 ? null : b.decoration, decorationColor: ui.Color.lerp(null, b.decorationColor, t), decorationStyle: t < 0.5 ? null : b.decorationStyle, decorationThickness: t < 0.5 ? null : b.decorationThickness, debugLabel: lerpDebugLabel, fontFamily: t < 0.5 ? null : b[_fontFamily], fontFamilyFallback: t < 0.5 ? null : b[_fontFamilyFallback$1], package: t < 0.5 ? null : b[_package$1], overflow: t < 0.5 ? null : b.overflow});
      }
      if (b == null) {
        return new text_style.TextStyle.new({inherit: a.inherit, color: ui.Color.lerp(a.color, null, t), backgroundColor: ui.Color.lerp(null, a.backgroundColor, t), fontSize: t < 0.5 ? a.fontSize : null, fontWeight: ui.FontWeight.lerp(a.fontWeight, null, t), fontStyle: t < 0.5 ? a.fontStyle : null, letterSpacing: t < 0.5 ? a.letterSpacing : null, wordSpacing: t < 0.5 ? a.wordSpacing : null, textBaseline: t < 0.5 ? a.textBaseline : null, height: t < 0.5 ? a.height : null, leadingDistribution: t < 0.5 ? a.leadingDistribution : null, locale: t < 0.5 ? a.locale : null, foreground: t < 0.5 ? a.foreground : null, background: t < 0.5 ? a.background : null, shadows: t < 0.5 ? a.shadows : null, fontFeatures: t < 0.5 ? a.fontFeatures : null, fontVariations: t < 0.5 ? a.fontVariations : null, decoration: t < 0.5 ? a.decoration : null, decorationColor: ui.Color.lerp(a.decorationColor, null, t), decorationStyle: t < 0.5 ? a.decorationStyle : null, decorationThickness: t < 0.5 ? a.decorationThickness : null, debugLabel: lerpDebugLabel, fontFamily: t < 0.5 ? a[_fontFamily] : null, fontFamilyFallback: t < 0.5 ? a[_fontFamilyFallback$1] : null, package: t < 0.5 ? a[_package$1] : null, overflow: t < 0.5 ? a.overflow : null});
      }
      if (!dart.fn(() => {
        if (a.inherit === b.inherit) {
          return true;
        }
        let nullFields = (() => {
          let t$360 = T.JSArrayOfString().of([]);
          if (a.foreground == null && b.foreground == null && a.color == null && b.color == null) t$360.push("color");
          if (a.background == null && b.background == null && a.backgroundColor == null && b.backgroundColor == null) t$360.push("backgroundColor");
          if (a.fontSize == null && b.fontSize == null) t$360.push("fontSize");
          if (a.letterSpacing == null && b.letterSpacing == null) t$360.push("letterSpacing");
          if (a.wordSpacing == null && b.wordSpacing == null) t$360.push("wordSpacing");
          if (a.height == null && b.height == null) t$360.push("height");
          if (a.decorationColor == null && b.decorationColor == null) t$360.push("decorationColor");
          if (a.decorationThickness == null && b.decorationThickness == null) t$360.push("decorationThickness");
          return t$360;
        })();
        if (nullFields[$isEmpty]) {
          return true;
        }
        dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Failed to interpolate TextStyles with different inherit values."), new assertions.ErrorSpacer.new(), new assertions.ErrorDescription.new("The TextStyles being interpolated were:"), a.toDiagnosticsNode({name: "from", style: diagnostics.DiagnosticsTreeStyle.singleLine}), b.toDiagnosticsNode({name: "to", style: diagnostics.DiagnosticsTreeStyle.singleLine}), new assertions.ErrorDescription.new("The following fields are unspecified in both TextStyles:\n" + nullFields[$map](core.String, dart.fn(name => "\"" + name + "\"", T.StringToString()))[$join](", ") + ".\n" + "When \"inherit\" changes during the transition, these fields may " + "observe abrupt value changes as a result, causing \"jump\"s in the " + "transition."), new assertions.ErrorSpacer.new(), new assertions.ErrorHint.new("In general, TextStyle.lerp only works well when both TextStyles have the same \"inherit\" value, and specify the same fields."), new assertions.ErrorHint.new("If the TextStyles were directly created by you, consider bringing them to parity to ensure a smooth transition."), new assertions.ErrorSpacer.new(), new assertions.ErrorHint.new("If one of the TextStyles being lerped is significantly more elaborate than the other, and has \"inherited\" set to false, it is often because it is merged with another TextStyle before being lerped. Comparing the \"debugLabel\"s of the two TextStyles may help identify if that was the case."), new assertions.ErrorHint.new("For example, you may see this error message when trying to lerp between \"ThemeData()\" and \"Theme.of(context)\". This is because TextStyles from \"Theme.of(context)\" are merged with TextStyles from another theme and thus are more elaborate than the TextStyles from \"ThemeData()\" (which is reflected in their \"debugLabel\"s -- TextStyles from \"Theme.of(context)\" should have labels in the form of \"(<A TextStyle>).merge(<Another TextStyle>)\"). It is recommended to only lerp ThemeData with matching TextStyles.")])));
      }, T.VoidTobool())()) dart.assertFailed(null, I[6], 1173, 12, "() {\r\n      if (a.inherit == b.inherit) {\r\n        return true;\r\n      }\r\n\r\n      final List<String> nullFields = <String>[\r\n        if (a.foreground == null && b.foreground == null && a.color == null && b.color == null) 'color',\r\n        if (a.background == null && b.background == null && a.backgroundColor == null && b.backgroundColor == null) 'backgroundColor',\r\n        if (a.fontSize == null && b.fontSize == null) 'fontSize',\r\n        if (a.letterSpacing == null && b.letterSpacing == null) 'letterSpacing',\r\n        if (a.wordSpacing == null && b.wordSpacing == null) 'wordSpacing',\r\n        if (a.height == null && b.height == null) 'height',\r\n        if (a.decorationColor == null && b.decorationColor == null) 'decorationColor',\r\n        if (a.decorationThickness == null && b.decorationThickness == null) 'decorationThickness',\r\n      ];\r\n      if (nullFields.isEmpty) {\r\n        return true;\r\n      }\r\n\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('Failed to interpolate TextStyles with different inherit values.'),\r\n        ErrorSpacer(),\r\n        ErrorDescription('The TextStyles being interpolated were:'),\r\n        a.toDiagnosticsNode(name: 'from', style: DiagnosticsTreeStyle.singleLine),\r\n        b.toDiagnosticsNode(name: 'to', style: DiagnosticsTreeStyle.singleLine),\r\n        ErrorDescription(\r\n          'The following fields are unspecified in both TextStyles:\\n'\r\n          '${nullFields.map((String name) => '\"$name\"').join(', ')}.\\n'\r\n          'When \"inherit\" changes during the transition, these fields may '\r\n          'observe abrupt value changes as a result, causing \"jump\"s in the '\r\n          'transition.'\r\n        ),\r\n        ErrorSpacer(),\r\n        ErrorHint(\r\n          'In general, TextStyle.lerp only works well when both TextStyles have '\r\n          'the same \"inherit\" value, and specify the same fields.',\r\n        ),\r\n        ErrorHint(\r\n          'If the TextStyles were directly created by you, consider bringing '\r\n          'them to parity to ensure a smooth transition.'\r\n        ),\r\n        ErrorSpacer(),\r\n        ErrorHint(\r\n          'If one of the TextStyles being lerped is significantly more elaborate '\r\n          'than the other, and has \"inherited\" set to false, it is often because '\r\n          'it is merged with another TextStyle before being lerped. Comparing '\r\n          'the \"debugLabel\"s of the two TextStyles may help identify if that was '\r\n          'the case.'\r\n        ),\r\n        ErrorHint(\r\n          'For example, you may see this error message when trying to lerp '\r\n          'between \"ThemeData()\" and \"Theme.of(context)\". This is because '\r\n          'TextStyles from \"Theme.of(context)\" are merged with TextStyles from '\r\n          'another theme and thus are more elaborate than the TextStyles from '\r\n          '\"ThemeData()\" (which is reflected in their \"debugLabel\"s -- '\r\n          'TextStyles from \"Theme.of(context)\" should have labels in the form of '\r\n          '\"(<A TextStyle>).merge(<Another TextStyle>)\"). It is recommended to '\r\n          'only lerp ThemeData with matching TextStyles.'\r\n        ),\r\n      ]);\r\n    }()");
      return new text_style.TextStyle.new({inherit: t < 0.5 ? a.inherit : b.inherit, color: a.foreground == null && b.foreground == null ? ui.Color.lerp(a.color, b.color, t) : null, backgroundColor: a.background == null && b.background == null ? ui.Color.lerp(a.backgroundColor, b.backgroundColor, t) : null, fontSize: ui.lerpDouble((t$361 = a.fontSize, t$361 == null ? b.fontSize : t$361), (t$361$ = b.fontSize, t$361$ == null ? a.fontSize : t$361$), t), fontWeight: ui.FontWeight.lerp(a.fontWeight, b.fontWeight, t), fontStyle: t < 0.5 ? a.fontStyle : b.fontStyle, letterSpacing: ui.lerpDouble((t$361$0 = a.letterSpacing, t$361$0 == null ? b.letterSpacing : t$361$0), (t$361$1 = b.letterSpacing, t$361$1 == null ? a.letterSpacing : t$361$1), t), wordSpacing: ui.lerpDouble((t$361$2 = a.wordSpacing, t$361$2 == null ? b.wordSpacing : t$361$2), (t$361$3 = b.wordSpacing, t$361$3 == null ? a.wordSpacing : t$361$3), t), textBaseline: t < 0.5 ? a.textBaseline : b.textBaseline, height: ui.lerpDouble((t$361$4 = a.height, t$361$4 == null ? b.height : t$361$4), (t$361$5 = b.height, t$361$5 == null ? a.height : t$361$5), t), leadingDistribution: t < 0.5 ? a.leadingDistribution : b.leadingDistribution, locale: t < 0.5 ? a.locale : b.locale, foreground: a.foreground != null || b.foreground != null ? t < 0.5 ? (t$361$6 = a.foreground, t$361$6 == null ? (t$362 = ui.Paint.new(), (() => {
          t$362.color = dart.nullCheck(a.color);
          return t$362;
        })()) : t$361$6) : (t$361$7 = b.foreground, t$361$7 == null ? (t$362$ = ui.Paint.new(), (() => {
          t$362$.color = dart.nullCheck(b.color);
          return t$362$;
        })()) : t$361$7) : null, background: a.background != null || b.background != null ? t < 0.5 ? (t$361$8 = a.background, t$361$8 == null ? (t$362$0 = ui.Paint.new(), (() => {
          t$362$0.color = dart.nullCheck(a.backgroundColor);
          return t$362$0;
        })()) : t$361$8) : (t$361$9 = b.background, t$361$9 == null ? (t$362$1 = ui.Paint.new(), (() => {
          t$362$1.color = dart.nullCheck(b.backgroundColor);
          return t$362$1;
        })()) : t$361$9) : null, shadows: t < 0.5 ? a.shadows : b.shadows, fontFeatures: t < 0.5 ? a.fontFeatures : b.fontFeatures, fontVariations: t < 0.5 ? a.fontVariations : b.fontVariations, decoration: t < 0.5 ? a.decoration : b.decoration, decorationColor: ui.Color.lerp(a.decorationColor, b.decorationColor, t), decorationStyle: t < 0.5 ? a.decorationStyle : b.decorationStyle, decorationThickness: ui.lerpDouble((t$361$10 = a.decorationThickness, t$361$10 == null ? b.decorationThickness : t$361$10), (t$361$11 = b.decorationThickness, t$361$11 == null ? a.decorationThickness : t$361$11), t), debugLabel: lerpDebugLabel, fontFamily: t < 0.5 ? a[_fontFamily] : b[_fontFamily], fontFamilyFallback: t < 0.5 ? a[_fontFamilyFallback$1] : b[_fontFamilyFallback$1], package: t < 0.5 ? a[_package$1] : b[_package$1], overflow: t < 0.5 ? a.overflow : b.overflow});
    }
    getTextStyle(opts) {
      let t$362, t$361;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      return ui.TextStyle.new({color: this.color, decoration: this.decoration, decorationColor: this.decorationColor, decorationStyle: this.decorationStyle, decorationThickness: this.decorationThickness, fontWeight: this.fontWeight, fontStyle: this.fontStyle, textBaseline: this.textBaseline, leadingDistribution: this.leadingDistribution, fontFamily: this.fontFamily, fontFamilyFallback: this.fontFamilyFallback, fontSize: this.fontSize == null ? null : dart.nullCheck(this.fontSize) * textScaleFactor, letterSpacing: this.letterSpacing, wordSpacing: this.wordSpacing, height: this.height, locale: this.locale, foreground: this.foreground, background: (t$361 = this.background, t$361 == null ? this.backgroundColor != null ? (t$362 = ui.Paint.new(), (() => {
          t$362.color = dart.nullCheck(this.backgroundColor);
          return t$362;
        })()) : null : t$361), shadows: this.shadows, fontFeatures: this.fontFeatures, fontVariations: this.fontVariations});
    }
    getParagraphStyle(opts) {
      let t$361, t$361$, t$361$0, t$361$1, t$361$2, t$361$3, t$361$4;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[6], 1326, 12, "maxLines == null || maxLines > 0");
      let leadingDistribution = this.leadingDistribution;
      let effectiveTextHeightBehavior = (t$361 = textHeightBehavior, t$361 == null ? leadingDistribution == null ? null : new ui.TextHeightBehavior.new({leadingDistribution: leadingDistribution}) : t$361);
      return ui.ParagraphStyle.new({textAlign: textAlign, textDirection: textDirection, fontWeight: (t$361$ = fontWeight, t$361$ == null ? this.fontWeight : t$361$), fontStyle: (t$361$0 = fontStyle, t$361$0 == null ? this.fontStyle : t$361$0), fontFamily: (t$361$1 = fontFamily, t$361$1 == null ? this.fontFamily : t$361$1), fontSize: dart.notNull((t$361$3 = (t$361$2 = fontSize, t$361$2 == null ? this.fontSize : t$361$2), t$361$3 == null ? 14 : t$361$3)) * textScaleFactor, height: (t$361$4 = height, t$361$4 == null ? this.height : t$361$4), textHeightBehavior: effectiveTextHeightBehavior, strutStyle: strutStyle == null ? null : ui.StrutStyle.new({fontFamily: strutStyle.fontFamily, fontFamilyFallback: strutStyle.fontFamilyFallback, fontSize: strutStyle.fontSize == null ? null : dart.nullCheck(strutStyle.fontSize) * textScaleFactor, height: strutStyle.height, leading: strutStyle.leading, fontWeight: strutStyle.fontWeight, fontStyle: strutStyle.fontStyle, forceStrutHeight: strutStyle.forceStrutHeight}), maxLines: maxLines, ellipsis: ellipsis, locale: locale});
    }
    compareTo(other) {
      if (this === other) {
        return basic_types.RenderComparison.identical;
      }
      if (this.inherit !== other.inherit || this.fontFamily != other.fontFamily || this.fontSize != other.fontSize || !dart.equals(this.fontWeight, other.fontWeight) || this.fontStyle != other.fontStyle || this.letterSpacing != other.letterSpacing || this.wordSpacing != other.wordSpacing || this.textBaseline != other.textBaseline || this.height != other.height || this.leadingDistribution != other.leadingDistribution || !dart.equals(this.locale, other.locale) || !dart.equals(this.foreground, other.foreground) || !dart.equals(this.background, other.background) || !collections.listEquals(ui.Shadow, this.shadows, other.shadows) || !collections.listEquals(ui.FontFeature, this.fontFeatures, other.fontFeatures) || !collections.listEquals(ui.FontVariation, this.fontVariations, other.fontVariations) || !collections.listEquals(core.String, this.fontFamilyFallback, other.fontFamilyFallback) || this.overflow != other.overflow) {
        return basic_types.RenderComparison.layout;
      }
      if (!dart.equals(this.color, other.color) || !dart.equals(this.backgroundColor, other.backgroundColor) || !dart.equals(this.decoration, other.decoration) || !dart.equals(this.decorationColor, other.decorationColor) || this.decorationStyle != other.decorationStyle || this.decorationThickness != other.decorationThickness) {
        return basic_types.RenderComparison.paint;
      }
      return basic_types.RenderComparison.identical;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return text_style.TextStyle.is(other) && other.inherit === this.inherit && dart.equals(other.color, this.color) && dart.equals(other.backgroundColor, this.backgroundColor) && other.fontSize == this.fontSize && dart.equals(other.fontWeight, this.fontWeight) && other.fontStyle == this.fontStyle && other.letterSpacing == this.letterSpacing && other.wordSpacing == this.wordSpacing && other.textBaseline == this.textBaseline && other.height == this.height && other.leadingDistribution == this.leadingDistribution && dart.equals(other.locale, this.locale) && dart.equals(other.foreground, this.foreground) && dart.equals(other.background, this.background) && collections.listEquals(ui.Shadow, other.shadows, this.shadows) && collections.listEquals(ui.FontFeature, other.fontFeatures, this.fontFeatures) && collections.listEquals(ui.FontVariation, other.fontVariations, this.fontVariations) && dart.equals(other.decoration, this.decoration) && dart.equals(other.decorationColor, this.decorationColor) && other.decorationStyle == this.decorationStyle && other.decorationThickness == this.decorationThickness && other.fontFamily == this.fontFamily && collections.listEquals(core.String, other.fontFamilyFallback, this.fontFamilyFallback) && other[_package$1] == this[_package$1] && other.overflow == this.overflow;
    }
    get hashCode() {
      let fontFamilyFallback = this.fontFamilyFallback;
      let fontHash = core.Object.hash(this.decorationStyle, this.decorationThickness, this.fontFamily, fontFamilyFallback == null ? null : core.Object.hashAll(fontFamilyFallback), this[_package$1], this.overflow);
      let shadows = this.shadows;
      let fontFeatures = this.fontFeatures;
      let fontVariations = this.fontVariations;
      return core.Object.hash(this.inherit, this.color, this.backgroundColor, this.fontSize, this.fontWeight, this.fontStyle, this.letterSpacing, this.wordSpacing, this.textBaseline, this.height, this.leadingDistribution, this.locale, this.foreground, this.background, shadows == null ? null : core.Object.hashAll(shadows), fontFeatures == null ? null : core.Object.hashAll(fontFeatures), fontVariations == null ? null : core.Object.hashAll(fontVariations), this.decoration, this.decorationColor, fontHash);
    }
    toStringShort() {
      return object.objectRuntimeType(this, "TextStyle");
    }
    debugFillProperties(properties, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : "";
      super.debugFillProperties(properties);
      if (this.debugLabel != null) {
        properties.add(new diagnostics.MessageProperty.new(prefix + "debugLabel", dart.nullCheck(this.debugLabel)));
      }
      let styles = T.JSArrayOfDiagnosticsNode().of([new colors.ColorProperty.new(prefix + "color", this.color, {defaultValue: null}), new colors.ColorProperty.new(prefix + "backgroundColor", this.backgroundColor, {defaultValue: null}), new diagnostics.StringProperty.new(prefix + "family", this.fontFamily, {defaultValue: null, quoted: false}), new (T.IterablePropertyOfString()).new(prefix + "familyFallback", this.fontFamilyFallback, {defaultValue: null}), new diagnostics.DoubleProperty.new(prefix + "size", this.fontSize, {defaultValue: null})]);
      let weightDescription = null;
      if (this.fontWeight != null) {
        weightDescription = dart.str(dart.nullCheck(this.fontWeight).index + 1) + "00";
      }
      styles[$add](new (T.DiagnosticsPropertyOfFontWeight()).new(prefix + "weight", this.fontWeight, {description: weightDescription, defaultValue: null}));
      styles[$add](new (T.EnumPropertyOfFontStyle()).new(prefix + "style", this.fontStyle, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(prefix + "letterSpacing", this.letterSpacing, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(prefix + "wordSpacing", this.wordSpacing, {defaultValue: null}));
      styles[$add](new (T.EnumPropertyOfTextBaseline()).new(prefix + "baseline", this.textBaseline, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(prefix + "height", this.height, {unit: "x", defaultValue: null}));
      styles[$add](new (T.EnumPropertyOfTextLeadingDistribution()).new(prefix + "leadingDistribution", this.leadingDistribution, {defaultValue: null}));
      styles[$add](new (T.DiagnosticsPropertyOfLocale()).new(prefix + "locale", this.locale, {defaultValue: null}));
      styles[$add](new (T.DiagnosticsPropertyOfPaint()).new(prefix + "foreground", this.foreground, {defaultValue: null}));
      styles[$add](new (T.DiagnosticsPropertyOfPaint()).new(prefix + "background", this.background, {defaultValue: null}));
      if (this.decoration != null || this.decorationColor != null || this.decorationStyle != null || this.decorationThickness != null) {
        let decorationDescription = T.JSArrayOfString().of([]);
        if (this.decorationStyle != null) {
          decorationDescription[$add](core['EnumName|get#name'](dart.nullCheck(this.decorationStyle)));
        }
        styles[$add](new colors.ColorProperty.new(prefix + "decorationColor", this.decorationColor, {defaultValue: null, level: diagnostics.DiagnosticLevel.fine}));
        if (this.decorationColor != null) {
          decorationDescription[$add](dart.str(this.decorationColor));
        }
        styles[$add](new (T.DiagnosticsPropertyOfTextDecoration()).new(prefix + "decoration", this.decoration, {defaultValue: null, level: diagnostics.DiagnosticLevel.hidden}));
        if (this.decoration != null) {
          decorationDescription[$add](dart.str(this.decoration));
        }
        if (!decorationDescription[$isNotEmpty]) dart.assertFailed(null, I[6], 1533, 14, "decorationDescription.isNotEmpty");
        styles[$add](new diagnostics.MessageProperty.new(prefix + "decoration", decorationDescription[$join](" ")));
        styles[$add](new diagnostics.DoubleProperty.new(prefix + "decorationThickness", this.decorationThickness, {unit: "x", defaultValue: null}));
      }
      let styleSpecified = styles[$any](dart.fn(n => !n.isFiltered(diagnostics.DiagnosticLevel.info), T.DiagnosticsNodeTobool()));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new(prefix + "inherit", this.inherit, {level: !styleSpecified && this.inherit ? diagnostics.DiagnosticLevel.fine : diagnostics.DiagnosticLevel.info}));
      styles[$forEach](dart.bind(properties, 'add'));
      if (!styleSpecified) {
        properties.add(new diagnostics.FlagProperty.new("inherit", {value: this.inherit, ifTrue: prefix + "<all styles inherited>", ifFalse: prefix + "<no style specified>"}));
      }
      styles[$add](new (T.EnumPropertyOfTextOverflow()).new(prefix + "overflow", this.overflow, {defaultValue: null}));
    }
  };
  (text_style.TextStyle.new = function(opts) {
    let inherit = opts && 'inherit' in opts ? opts.inherit : true;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leadingDistribution = opts && 'leadingDistribution' in opts ? opts.leadingDistribution : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let shadows = opts && 'shadows' in opts ? opts.shadows : null;
    let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
    let fontVariations = opts && 'fontVariations' in opts ? opts.fontVariations : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    this[inherit$] = inherit;
    this[color$] = color;
    this[backgroundColor$] = backgroundColor;
    this[fontSize$0] = fontSize;
    this[fontWeight$0] = fontWeight;
    this[fontStyle$0] = fontStyle;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[textBaseline$] = textBaseline;
    this[height$0] = height;
    this[leadingDistribution$0] = leadingDistribution;
    this[locale$] = locale;
    this[foreground$] = foreground;
    this[background$] = background;
    this[shadows$] = shadows;
    this[fontFeatures$] = fontFeatures;
    this[fontVariations$] = fontVariations;
    this[decoration$] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[decorationThickness$] = decorationThickness;
    this[debugLabel$0] = debugLabel;
    this[overflow$] = overflow;
    this[fontFamily$0] = $package == null ? fontFamily : "packages/" + dart.str($package) + "/" + dart.str(fontFamily);
    this[_fontFamilyFallback$0] = fontFamilyFallback;
    this[_package$0] = $package;
    if (!(color == null || foreground == null)) dart.assertFailed(text_style._kColorForegroundWarning, I[6], 507, 15, "color == null || foreground == null");
    if (!(backgroundColor == null || background == null)) dart.assertFailed(text_style._kColorBackgroundWarning, I[6], 508, 15, "backgroundColor == null || background == null");
    ;
  }).prototype = text_style.TextStyle.prototype;
  dart.addTypeTests(text_style.TextStyle);
  dart.addTypeCaches(text_style.TextStyle);
  dart.setMethodSignature(text_style.TextStyle, () => dart.global.Object.setPrototypeOf({
    copyWith: dart.fnType(text_style.TextStyle, [], {background: dart.nullable(ui.Paint), backgroundColor: dart.nullable(ui.Color), color: dart.nullable(ui.Color), debugLabel: dart.nullable(core.String), decoration: dart.nullable(ui.TextDecoration), decorationColor: dart.nullable(ui.Color), decorationStyle: dart.nullable(ui.TextDecorationStyle), decorationThickness: dart.nullable(core.double), fontFamily: dart.nullable(core.String), fontFamilyFallback: dart.nullable(core.List$(core.String)), fontFeatures: dart.nullable(core.List$(ui.FontFeature)), fontSize: dart.nullable(core.double), fontStyle: dart.nullable(ui.FontStyle), fontVariations: dart.nullable(core.List$(ui.FontVariation)), fontWeight: dart.nullable(ui.FontWeight), foreground: dart.nullable(ui.Paint), height: dart.nullable(core.double), inherit: dart.nullable(core.bool), leadingDistribution: dart.nullable(ui.TextLeadingDistribution), letterSpacing: dart.nullable(core.double), locale: dart.nullable(ui.Locale), overflow: dart.nullable(text_painter.TextOverflow), package: dart.nullable(core.String), shadows: dart.nullable(core.List$(ui.Shadow)), textBaseline: dart.nullable(ui.TextBaseline), wordSpacing: dart.nullable(core.double)}, {}),
    apply: dart.fnType(text_style.TextStyle, [], {backgroundColor: dart.nullable(ui.Color), color: dart.nullable(ui.Color), decoration: dart.nullable(ui.TextDecoration), decorationColor: dart.nullable(ui.Color), decorationStyle: dart.nullable(ui.TextDecorationStyle), decorationThicknessDelta: core.double, decorationThicknessFactor: core.double, fontFamily: dart.nullable(core.String), fontFamilyFallback: dart.nullable(core.List$(core.String)), fontFeatures: dart.nullable(core.List$(ui.FontFeature)), fontSizeDelta: core.double, fontSizeFactor: core.double, fontStyle: dart.nullable(ui.FontStyle), fontVariations: dart.nullable(core.List$(ui.FontVariation)), fontWeightDelta: core.int, heightDelta: core.double, heightFactor: core.double, leadingDistribution: dart.nullable(ui.TextLeadingDistribution), letterSpacingDelta: core.double, letterSpacingFactor: core.double, locale: dart.nullable(ui.Locale), overflow: dart.nullable(text_painter.TextOverflow), package: dart.nullable(core.String), shadows: dart.nullable(core.List$(ui.Shadow)), textBaseline: dart.nullable(ui.TextBaseline), wordSpacingDelta: core.double, wordSpacingFactor: core.double}, {}),
    merge: dart.fnType(text_style.TextStyle, [dart.nullable(text_style.TextStyle)]),
    getTextStyle: dart.fnType(ui.TextStyle, [], {textScaleFactor: core.double}, {}),
    getParagraphStyle: dart.fnType(ui.ParagraphStyle, [], {ellipsis: dart.nullable(core.String), fontFamily: dart.nullable(core.String), fontSize: dart.nullable(core.double), fontStyle: dart.nullable(ui.FontStyle), fontWeight: dart.nullable(ui.FontWeight), height: dart.nullable(core.double), locale: dart.nullable(ui.Locale), maxLines: dart.nullable(core.int), strutStyle: dart.nullable(strut_style.StrutStyle), textAlign: dart.nullable(ui.TextAlign), textDirection: dart.nullable(ui.TextDirection), textHeightBehavior: dart.nullable(ui.TextHeightBehavior), textScaleFactor: core.double}, {}),
    compareTo: dart.fnType(basic_types.RenderComparison, [text_style.TextStyle]),
    debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder], {prefix: core.String}, {})
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_style.TextStyle))));
  dart.setStaticMethodSignature(text_style.TextStyle, () => ['lerp']);
  dart.setGetterSignature(text_style.TextStyle, () => dart.global.Object.setPrototypeOf({
    fontFamilyFallback: dart.nullable(core.List$(core.String)),
    [_fontFamily]: dart.nullable(core.String)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_style.TextStyle))));
  dart.setLibraryUri(text_style.TextStyle, I[7]);
  dart.setFieldSignature(text_style.TextStyle, () => dart.global.Object.setPrototypeOf({
    inherit: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    fontFamily: dart.finalFieldType(dart.nullable(core.String)),
    [_fontFamilyFallback$1]: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    [_package$1]: dart.finalFieldType(dart.nullable(core.String)),
    fontSize: dart.finalFieldType(dart.nullable(core.double)),
    fontWeight: dart.finalFieldType(dart.nullable(ui.FontWeight)),
    fontStyle: dart.finalFieldType(dart.nullable(ui.FontStyle)),
    letterSpacing: dart.finalFieldType(dart.nullable(core.double)),
    wordSpacing: dart.finalFieldType(dart.nullable(core.double)),
    textBaseline: dart.finalFieldType(dart.nullable(ui.TextBaseline)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    leadingDistribution: dart.finalFieldType(dart.nullable(ui.TextLeadingDistribution)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    foreground: dart.finalFieldType(dart.nullable(ui.Paint)),
    background: dart.finalFieldType(dart.nullable(ui.Paint)),
    decoration: dart.finalFieldType(dart.nullable(ui.TextDecoration)),
    decorationColor: dart.finalFieldType(dart.nullable(ui.Color)),
    decorationStyle: dart.finalFieldType(dart.nullable(ui.TextDecorationStyle)),
    decorationThickness: dart.finalFieldType(dart.nullable(core.double)),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    shadows: dart.finalFieldType(dart.nullable(core.List$(ui.Shadow))),
    fontFeatures: dart.finalFieldType(dart.nullable(core.List$(ui.FontFeature))),
    fontVariations: dart.finalFieldType(dart.nullable(core.List$(ui.FontVariation))),
    overflow: dart.finalFieldType(dart.nullable(text_painter.TextOverflow))
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_style.TextStyle))));
  dart.defineExtensionMethods(text_style.TextStyle, ['_equals']);
  dart.defineExtensionAccessors(text_style.TextStyle, ['hashCode']);
  dart.defineLazy(text_style, {
    /*text_style._kDefaultDebugLabel*/get _kDefaultDebugLabel() {
      return "unknown";
    },
    /*text_style._kColorForegroundWarning*/get _kColorForegroundWarning() {
      return "Cannot provide both a color and a foreground\nThe color argument is just a shorthand for \"foreground: Paint()..color = color\".";
    },
    /*text_style._kColorBackgroundWarning*/get _kColorBackgroundWarning() {
      return "Cannot provide both a backgroundColor and a background\nThe backgroundColor argument is just a shorthand for \"background: Paint()..color = color\".";
    },
    /*text_style._kDefaultFontSize*/get _kDefaultFontSize() {
      return 14;
    }
  }, false);
  var text$ = dart.privateName(text_span, "TextSpan.text");
  var children$ = dart.privateName(text_span, "TextSpan.children");
  var recognizer$ = dart.privateName(text_span, "TextSpan.recognizer");
  var mouseCursor$ = dart.privateName(text_span, "TextSpan.mouseCursor");
  var onEnter$ = dart.privateName(text_span, "TextSpan.onEnter");
  var onExit$ = dart.privateName(text_span, "TextSpan.onExit");
  var semanticsLabel$ = dart.privateName(text_span, "TextSpan.semanticsLabel");
  var locale$0 = dart.privateName(text_span, "TextSpan.locale");
  var spellOut$ = dart.privateName(text_span, "TextSpan.spellOut");
  text_span.TextSpan = class TextSpan extends inline_span.InlineSpan {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get recognizer() {
      return this[recognizer$];
    }
    set recognizer(value) {
      super.recognizer = value;
    }
    get mouseCursor() {
      return this[mouseCursor$];
    }
    set mouseCursor(value) {
      super.mouseCursor = value;
    }
    get onEnter() {
      return this[onEnter$];
    }
    set onEnter(value) {
      super.onEnter = value;
    }
    get onExit() {
      return this[onExit$];
    }
    set onExit(value) {
      super.onExit = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get locale() {
      return this[locale$0];
    }
    set locale(value) {
      super.locale = value;
    }
    get spellOut() {
      return this[spellOut$];
    }
    set spellOut(value) {
      super.spellOut = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let children = opts && 'children' in opts ? opts.children : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
      let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
      let onEnter = opts && 'onEnter' in opts ? opts.onEnter : null;
      let onExit = opts && 'onExit' in opts ? opts.onExit : null;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let spellOut = opts && 'spellOut' in opts ? opts.spellOut : null;
      return new text_span.TextSpan.new({text: text, children: children, style: style, recognizer: recognizer, mouseCursor: mouseCursor, onEnter: onEnter, onExit: onExit, semanticsLabel: semanticsLabel, locale: locale, spellOut: spellOut});
    }
    get cursor() {
      return this.mouseCursor;
    }
    get validForMouseTracker() {
      return true;
    }
    handleEvent(event, entry) {
      let t$361;
      if (events.PointerDownEvent.is(event)) {
        t$361 = this.recognizer;
        t$361 == null ? null : t$361.addPointer(event);
      }
    }
    build(builder, opts) {
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let dimensions = opts && 'dimensions' in opts ? opts.dimensions : null;
      if (!this.debugAssertIsValid()) dart.assertFailed(null, I[8], 273, 12, "debugAssertIsValid()");
      let hasStyle = this.style != null;
      if (hasStyle) {
        builder.pushStyle(dart.nullCheck(this.style).getTextStyle({textScaleFactor: textScaleFactor}));
      }
      if (this.text != null) {
        try {
          builder.addText(dart.nullCheck(this.text));
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (core.ArgumentError.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "painting library", context: new assertions.ErrorDescription.new("while building a TextSpan")}));
            builder.addText("�");
          } else
            throw t$36$35e;
        }
      }
      let children = this.children;
      if (children != null) {
        for (let child of children) {
          child.build(builder, {textScaleFactor: textScaleFactor, dimensions: dimensions});
        }
      }
      if (hasStyle) {
        builder.pop();
      }
    }
    visitChildren(visitor) {
      if (this.text != null && !visitor(this)) {
        return false;
      }
      let children = this.children;
      if (children != null) {
        for (let child of children) {
          if (!child.visitChildren(visitor)) {
            return false;
          }
        }
      }
      return true;
    }
    visitDirectChildren(visitor) {
      let children = this.children;
      if (children != null) {
        for (let child of children) {
          if (!visitor(child)) {
            return false;
          }
        }
      }
      return true;
    }
    getSpanForPositionVisitor(position, offset) {
      if (this.text == null) {
        return null;
      }
      let affinity = position.affinity;
      let targetOffset = position.offset;
      let endOffset = offset.value + dart.nullCheck(this.text).length;
      if (offset.value === targetOffset && affinity === ui.TextAffinity.downstream || offset.value < targetOffset && targetOffset < endOffset || endOffset === targetOffset && affinity === ui.TextAffinity.upstream) {
        return this;
      }
      offset.increment(dart.nullCheck(this.text).length);
      return null;
    }
    computeToPlainText(buffer, opts) {
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      if (!this.debugAssertIsValid()) dart.assertFailed(null, I[8], 365, 12, "debugAssertIsValid()");
      if (this.semanticsLabel != null && includeSemanticsLabels) {
        buffer.write(this.semanticsLabel);
      } else if (this.text != null) {
        buffer.write(this.text);
      }
      if (this.children != null) {
        for (let child of dart.nullCheck(this.children)) {
          child.computeToPlainText(buffer, {includeSemanticsLabels: includeSemanticsLabels, includePlaceholders: includePlaceholders});
        }
      }
    }
    computeSemanticsInformation(collector, opts) {
      let t$362, t$362$, t$362$0, t$362$1;
      let inheritedLocale = opts && 'inheritedLocale' in opts ? opts.inheritedLocale : null;
      let inheritedSpellOut = opts && 'inheritedSpellOut' in opts ? opts.inheritedSpellOut : false;
      if (!this.debugAssertIsValid()) dart.assertFailed(null, I[8], 387, 12, "debugAssertIsValid()");
      let effectiveLocale = (t$362 = this.locale, t$362 == null ? inheritedLocale : t$362);
      let effectiveSpellOut = (t$362$ = this.spellOut, t$362$ == null ? inheritedSpellOut : t$362$);
      if (this.text != null) {
        let textLength = (t$362$1 = (t$362$0 = this.semanticsLabel, t$362$0 == null ? null : t$362$0.length), t$362$1 == null ? dart.nullCheck(this.text).length : t$362$1);
        collector[$add](new inline_span.InlineSpanSemanticsInformation.new(dart.nullCheck(this.text), {stringAttributes: (() => {
            let t$362 = T.JSArrayOfStringAttribute().of([]);
            if (effectiveSpellOut && textLength > 0) t$362.push(new ui.SpellOutStringAttribute.new({range: new ui.TextRange.new({start: 0, end: textLength})}));
            if (effectiveLocale != null && textLength > 0) t$362.push(new ui.LocaleStringAttribute.new({locale: effectiveLocale, range: new ui.TextRange.new({start: 0, end: textLength})}));
            return t$362;
          })(), semanticsLabel: this.semanticsLabel, recognizer: this.recognizer}));
      }
      let children = this.children;
      if (children != null) {
        for (let child of children) {
          if (text_span.TextSpan.is(child)) {
            child.computeSemanticsInformation(collector, {inheritedLocale: effectiveLocale, inheritedSpellOut: effectiveSpellOut});
          } else {
            child.computeSemanticsInformation(collector);
          }
        }
      }
    }
    codeUnitAtVisitor(index, offset) {
      let text = this.text;
      if (text == null) {
        return null;
      }
      let localOffset = index - offset.value;
      if (!(localOffset >= 0)) dart.assertFailed(null, I[8], 428, 12, "localOffset >= 0");
      offset.increment(text.length);
      return localOffset < text.length ? text[$codeUnitAt](localOffset) : null;
    }
    describeSemantics(offset, semanticsOffsets, semanticsElements) {
      let t$363, t$363$;
      if (tap.TapGestureRecognizer.is(this.recognizer) || long_press.LongPressGestureRecognizer.is(this.recognizer)) {
        let length = (t$363$ = (t$363 = this.semanticsLabel, t$363 == null ? null : t$363.length), t$363$ == null ? dart.nullCheck(this.text).length : t$363$);
        semanticsOffsets[$add](offset.value);
        semanticsOffsets[$add](offset.value + length);
        semanticsElements[$add](this.recognizer);
      }
      offset.increment(this.text != null ? dart.nullCheck(this.text).length : 0);
    }
    debugAssertIsValid() {
      if (!dart.fn(() => {
        if (this.children != null) {
          for (let child of dart.nullCheck(this.children)) {
            if (!child.debugAssertIsValid()) dart.assertFailed(null, I[8], 465, 18, "child.debugAssertIsValid()");
          }
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[8], 462, 12, "() {\r\n      if (children != null) {\r\n        for (final InlineSpan child in children!) {\r\n          assert(child.debugAssertIsValid());\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      return super.debugAssertIsValid();
    }
    compareTo(other) {
      let t$363, t$363$;
      if (this === other) {
        return basic_types.RenderComparison.identical;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return basic_types.RenderComparison.layout;
      }
      let textSpan = text_span.TextSpan.as(other);
      if (textSpan.text != this.text || (t$363 = this.children, t$363 == null ? null : t$363[$length]) != (t$363$ = textSpan.children, t$363$ == null ? null : t$363$[$length]) || this.style == null !== (textSpan.style == null)) {
        return basic_types.RenderComparison.layout;
      }
      let result = dart.equals(this.recognizer, textSpan.recognizer) ? basic_types.RenderComparison.identical : basic_types.RenderComparison.metadata;
      if (this.style != null) {
        let candidate = dart.nullCheck(this.style).compareTo(dart.nullCheck(textSpan.style));
        if (candidate.index > result.index) {
          result = candidate;
        }
        if (result === basic_types.RenderComparison.layout) {
          return result;
        }
      }
      if (this.children != null) {
        for (let index = 0; index < dart.nullCheck(this.children)[$length]; index = index + 1) {
          let candidate = dart.nullCheck(this.children)[$_get](index).compareTo(dart.nullCheck(textSpan.children)[$_get](index));
          if (candidate.index > result.index) {
            result = candidate;
          }
          if (result === basic_types.RenderComparison.layout) {
            return result;
          }
        }
      }
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      if (!super._equals(other)) {
        return false;
      }
      return text_span.TextSpan.is(other) && other.text == this.text && dart.equals(other.recognizer, this.recognizer) && other.semanticsLabel == this.semanticsLabel && dart.equals(this.onEnter, other.onEnter) && dart.equals(this.onExit, other.onExit) && this.mouseCursor[$_equals](other.mouseCursor) && collections.listEquals(inline_span.InlineSpan, other.children, this.children);
    }
    get hashCode() {
      return core.Object.hash(super.hashCode, this.text, this.recognizer, this.semanticsLabel, this.onEnter, this.onExit, this.mouseCursor, this.children == null ? null : core.Object.hashAll(dart.nullCheck(this.children)));
    }
    toStringShort() {
      return object.objectRuntimeType(this, "TextSpan");
    }
    debugFillProperties(properties) {
      let t$363;
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("text", this.text, {showName: false, defaultValue: null}));
      if (this.style == null && this.text == null && this.children == null) {
        properties.add(diagnostics.DiagnosticsNode.message("(empty)"));
      }
      properties.add(new (T.DiagnosticsPropertyOfGestureRecognizer()).new("recognizer", this.recognizer, {description: (t$363 = this.recognizer, t$363 == null ? null : dart.runtimeType(t$363).toString()), defaultValue: null}));
      properties.add(new (T.FlagsSummaryOfFunctionN()).new("callbacks", new (T.IdentityMapOfString$FunctionN()).from(["enter", this.onEnter, "exit", this.onExit])));
      properties.add(new (T.DiagnosticsPropertyOfMouseCursor()).new("mouseCursor", this.cursor, {defaultValue: mouse_cursor.MouseCursor.defer}));
      if (this.semanticsLabel != null) {
        properties.add(new diagnostics.StringProperty.new("semanticsLabel", this.semanticsLabel));
      }
    }
    debugDescribeChildren() {
      let t$363, t$363$;
      t$363$ = (t$363 = this.children, t$363 == null ? null : t$363[$map](diagnostics.DiagnosticsNode, dart.fn(child => child.toDiagnosticsNode(), T.InlineSpanToDiagnosticsNode()))[$toList]());
      return t$363$ == null ? C[2] || CT.C2 : t$363$;
    }
  };
  (text_span.TextSpan.new = function(opts) {
    let t$361;
    let text = opts && 'text' in opts ? opts.text : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let onEnter = opts && 'onEnter' in opts ? opts.onEnter : null;
    let onExit = opts && 'onExit' in opts ? opts.onExit : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let spellOut = opts && 'spellOut' in opts ? opts.spellOut : null;
    this[text$] = text;
    this[children$] = children;
    this[recognizer$] = recognizer;
    this[onEnter$] = onEnter;
    this[onExit$] = onExit;
    this[semanticsLabel$] = semanticsLabel;
    this[locale$0] = locale;
    this[spellOut$] = spellOut;
    this[mouseCursor$] = (t$361 = mouseCursor, t$361 == null ? recognizer == null ? mouse_cursor.MouseCursor.defer : mouse_cursor.SystemMouseCursors.click : t$361);
    if (!!(text == null && semanticsLabel != null)) dart.assertFailed(null, I[8], 83, 15, "!(text == null && semanticsLabel != null)");
    dart.global.Object.getPrototypeOf(text_span.TextSpan).new.call(this, {style: style});
    ;
  }).prototype = text_span.TextSpan.prototype;
  dart.addTypeTests(text_span.TextSpan);
  dart.addTypeCaches(text_span.TextSpan);
  text_span.TextSpan[dart.implements] = () => [hit_test.HitTestTarget, mouse_tracking.MouseTrackerAnnotation];
  dart.setMethodSignature(text_span.TextSpan, () => dart.global.Object.setPrototypeOf({
    handleEvent: dart.fnType(dart.void, [events.PointerEvent, hit_test.HitTestEntry$(hit_test.HitTestTarget)]),
    build: dart.fnType(dart.void, [ui.ParagraphBuilder], {dimensions: dart.nullable(core.List$(text_painter.PlaceholderDimensions)), textScaleFactor: core.double}, {}),
    visitChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [inline_span.InlineSpan])]),
    visitDirectChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [inline_span.InlineSpan])]),
    getSpanForPositionVisitor: dart.fnType(dart.nullable(inline_span.InlineSpan), [ui.TextPosition, inline_span.Accumulator]),
    computeToPlainText: dart.fnType(dart.void, [core.StringBuffer], {includePlaceholders: core.bool, includeSemanticsLabels: core.bool}, {}),
    computeSemanticsInformation: dart.fnType(dart.void, [core.List$(inline_span.InlineSpanSemanticsInformation)], {inheritedLocale: dart.nullable(ui.Locale), inheritedSpellOut: core.bool}, {}),
    codeUnitAtVisitor: dart.fnType(dart.nullable(core.int), [core.int, inline_span.Accumulator]),
    describeSemantics: dart.fnType(dart.void, [inline_span.Accumulator, core.List$(core.int), core.List]),
    compareTo: dart.fnType(basic_types.RenderComparison, [inline_span.InlineSpan])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_span.TextSpan))));
  dart.setGetterSignature(text_span.TextSpan, () => dart.global.Object.setPrototypeOf({
    cursor: mouse_cursor.MouseCursor,
    validForMouseTracker: core.bool
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_span.TextSpan))));
  dart.setLibraryUri(text_span.TextSpan, I[9]);
  dart.setFieldSignature(text_span.TextSpan, () => dart.global.Object.setPrototypeOf({
    text: dart.finalFieldType(dart.nullable(core.String)),
    children: dart.finalFieldType(dart.nullable(core.List$(inline_span.InlineSpan))),
    recognizer: dart.finalFieldType(dart.nullable(recognizer.GestureRecognizer)),
    mouseCursor: dart.finalFieldType(mouse_cursor.MouseCursor),
    onEnter: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [events.PointerEnterEvent]))),
    onExit: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [events.PointerExitEvent]))),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    spellOut: dart.finalFieldType(dart.nullable(core.bool))
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_span.TextSpan))));
  dart.defineExtensionMethods(text_span.TextSpan, ['_equals']);
  dart.defineExtensionAccessors(text_span.TextSpan, ['hashCode']);
  var _value$ = dart.privateName(inline_span, "_value");
  inline_span.Accumulator = class Accumulator extends core.Object {
    static ['_#new#tearOff'](_value = 0) {
      return new inline_span.Accumulator.new(_value);
    }
    get value() {
      return this[_value$];
    }
    increment(addend) {
      if (!(addend >= 0)) dart.assertFailed(null, I[1], 31, 12, "addend >= 0");
      this[_value$] = this[_value$] + addend;
    }
  };
  (inline_span.Accumulator.new = function(_value = 0) {
    this[_value$] = _value;
    ;
  }).prototype = inline_span.Accumulator.prototype;
  dart.addTypeTests(inline_span.Accumulator);
  dart.addTypeCaches(inline_span.Accumulator);
  dart.setMethodSignature(inline_span.Accumulator, () => dart.global.Object.setPrototypeOf({increment: dart.fnType(dart.void, [core.int])}, dart.getMethods(dart.global.Object.getPrototypeOf(inline_span.Accumulator))));
  dart.setGetterSignature(inline_span.Accumulator, () => dart.global.Object.setPrototypeOf({value: core.int}, dart.getGetters(dart.global.Object.getPrototypeOf(inline_span.Accumulator))));
  dart.setLibraryUri(inline_span.Accumulator, I[2]);
  dart.setFieldSignature(inline_span.Accumulator, () => dart.global.Object.setPrototypeOf({[_value$]: dart.fieldType(core.int)}, dart.getFields(dart.global.Object.getPrototypeOf(inline_span.Accumulator))));
  var text$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.text");
  var semanticsLabel$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.semanticsLabel");
  var recognizer$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.recognizer");
  var isPlaceholder$ = dart.privateName(inline_span, "InlineSpanSemanticsInformation.isPlaceholder");
  var requiresOwnNode = dart.privateName(inline_span, "InlineSpanSemanticsInformation.requiresOwnNode");
  var stringAttributes$ = dart.privateName(inline_span, "InlineSpanSemanticsInformation.stringAttributes");
  inline_span.InlineSpanSemanticsInformation = class InlineSpanSemanticsInformation extends core.Object {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$0];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get recognizer() {
      return this[recognizer$0];
    }
    set recognizer(value) {
      super.recognizer = value;
    }
    get isPlaceholder() {
      return this[isPlaceholder$];
    }
    set isPlaceholder(value) {
      super.isPlaceholder = value;
    }
    get requiresOwnNode() {
      return this[requiresOwnNode];
    }
    set requiresOwnNode(value) {
      super.requiresOwnNode = value;
    }
    get stringAttributes() {
      return this[stringAttributes$];
    }
    set stringAttributes(value) {
      super.stringAttributes = value;
    }
    static ['_#new#tearOff'](text, opts) {
      let isPlaceholder = opts && 'isPlaceholder' in opts ? opts.isPlaceholder : false;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let stringAttributes = opts && 'stringAttributes' in opts ? opts.stringAttributes : C[3] || CT.C3;
      let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
      return new inline_span.InlineSpanSemanticsInformation.new(text, {isPlaceholder: isPlaceholder, semanticsLabel: semanticsLabel, stringAttributes: stringAttributes, recognizer: recognizer});
    }
    _equals(other) {
      if (other == null) return false;
      return inline_span.InlineSpanSemanticsInformation.is(other) && other.text === this.text && other.semanticsLabel == this.semanticsLabel && dart.equals(other.recognizer, this.recognizer) && other.isPlaceholder === this.isPlaceholder && collections.listEquals(ui.StringAttribute, other.stringAttributes, this.stringAttributes);
    }
    get hashCode() {
      return core.Object.hash(this.text, this.semanticsLabel, this.recognizer, this.isPlaceholder);
    }
    toString() {
      return object.objectRuntimeType(this, "InlineSpanSemanticsInformation") + "{text: " + this.text + ", semanticsLabel: " + dart.str(this.semanticsLabel) + ", recognizer: " + dart.str(this.recognizer) + "}";
    }
  };
  (inline_span.InlineSpanSemanticsInformation.new = function(text, opts) {
    let isPlaceholder = opts && 'isPlaceholder' in opts ? opts.isPlaceholder : false;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let stringAttributes = opts && 'stringAttributes' in opts ? opts.stringAttributes : C[3] || CT.C3;
    let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
    this[text$0] = text;
    this[isPlaceholder$] = isPlaceholder;
    this[semanticsLabel$0] = semanticsLabel;
    this[stringAttributes$] = stringAttributes;
    this[recognizer$0] = recognizer;
    if (!(!isPlaceholder || text === "￼" && semanticsLabel == null && recognizer == null)) dart.assertFailed(null, I[1], 63, 15, "!isPlaceholder || (text == '\\uFFFC' && semanticsLabel == null && recognizer == null)");
    this[requiresOwnNode] = isPlaceholder || recognizer != null;
    ;
  }).prototype = inline_span.InlineSpanSemanticsInformation.prototype;
  dart.addTypeTests(inline_span.InlineSpanSemanticsInformation);
  dart.addTypeCaches(inline_span.InlineSpanSemanticsInformation);
  dart.setLibraryUri(inline_span.InlineSpanSemanticsInformation, I[2]);
  dart.setFieldSignature(inline_span.InlineSpanSemanticsInformation, () => dart.global.Object.setPrototypeOf({
    text: dart.finalFieldType(core.String),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String)),
    recognizer: dart.finalFieldType(dart.nullable(recognizer.GestureRecognizer)),
    isPlaceholder: dart.finalFieldType(core.bool),
    requiresOwnNode: dart.finalFieldType(core.bool),
    stringAttributes: dart.finalFieldType(core.List$(ui.StringAttribute))
  }, dart.getFields(dart.global.Object.getPrototypeOf(inline_span.InlineSpanSemanticsInformation))));
  dart.setStaticFieldSignature(inline_span.InlineSpanSemanticsInformation, () => ['placeholder']);
  dart.defineExtensionMethods(inline_span.InlineSpanSemanticsInformation, ['_equals', 'toString']);
  dart.defineExtensionAccessors(inline_span.InlineSpanSemanticsInformation, ['hashCode']);
  dart.defineLazy(inline_span.InlineSpanSemanticsInformation, {
    /*inline_span.InlineSpanSemanticsInformation.placeholder*/get placeholder() {
      return C[4] || CT.C4;
    }
  }, false);
  inline_span.combineSemanticsInfo = function combineSemanticsInfo(infoList) {
    let t$363;
    let combined = T.JSArrayOfInlineSpanSemanticsInformation().of([]);
    let workingText = "";
    let workingLabel = "";
    let workingAttributes = T.JSArrayOfStringAttribute().of([]);
    for (let info of infoList) {
      if (info.requiresOwnNode) {
        combined[$add](new inline_span.InlineSpanSemanticsInformation.new(workingText, {semanticsLabel: workingLabel, stringAttributes: workingAttributes}));
        workingText = "";
        workingLabel = "";
        workingAttributes = T.JSArrayOfStringAttribute().of([]);
        combined[$add](info);
      } else {
        workingText = workingText + info.text;
        let effectiveLabel = (t$363 = info.semanticsLabel, t$363 == null ? info.text : t$363);
        for (let infoAttribute of info.stringAttributes) {
          workingAttributes[$add](infoAttribute.copy({range: new ui.TextRange.new({start: infoAttribute.range.start + workingLabel.length, end: infoAttribute.range.end + workingLabel.length})}));
        }
        workingLabel = workingLabel + effectiveLabel;
      }
    }
    combined[$add](new inline_span.InlineSpanSemanticsInformation.new(workingText, {semanticsLabel: workingLabel, stringAttributes: workingAttributes}));
    return combined;
  };
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  text_painter.TextOverflow = class TextOverflow extends core._Enum {
    [_enumToString]() {
      return "TextOverflow." + this[_name];
    }
  };
  (text_painter.TextOverflow.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_painter.TextOverflow).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_painter.TextOverflow.prototype;
  dart.addTypeTests(text_painter.TextOverflow);
  dart.addTypeCaches(text_painter.TextOverflow);
  dart.setMethodSignature(text_painter.TextOverflow, () => dart.global.Object.setPrototypeOf({[_enumToString]: dart.fnType(core.String, [])}, dart.getMethods(dart.global.Object.getPrototypeOf(text_painter.TextOverflow))));
  dart.setLibraryUri(text_painter.TextOverflow, I[10]);
  dart.setStaticFieldSignature(text_painter.TextOverflow, () => ['values', 'clip', 'fade', 'ellipsis', 'visible']);
  dart.defineLazy(text_painter.TextOverflow, {
    /*text_painter.TextOverflow.values*/get values() {
      return C[5] || CT.C5;
    },
    /*text_painter.TextOverflow.clip*/get clip() {
      return C[6] || CT.C6;
    },
    /*text_painter.TextOverflow.fade*/get fade() {
      return C[7] || CT.C7;
    },
    /*text_painter.TextOverflow.ellipsis*/get ellipsis() {
      return C[8] || CT.C8;
    },
    /*text_painter.TextOverflow.visible*/get visible() {
      return C[9] || CT.C9;
    }
  }, false);
  var size$ = dart.privateName(text_painter, "PlaceholderDimensions.size");
  var alignment$0 = dart.privateName(text_painter, "PlaceholderDimensions.alignment");
  var baselineOffset$ = dart.privateName(text_painter, "PlaceholderDimensions.baselineOffset");
  var baseline$0 = dart.privateName(text_painter, "PlaceholderDimensions.baseline");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  text_painter.PlaceholderDimensions = class PlaceholderDimensions extends core.Object {
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get baselineOffset() {
      return this[baselineOffset$];
    }
    set baselineOffset(value) {
      super.baselineOffset = value;
    }
    get baseline() {
      return this[baseline$0];
    }
    set baseline(value) {
      super.baseline = value;
    }
    static ['_#new#tearOff'](opts) {
      let size = opts && 'size' in opts ? opts.size : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : null;
      let baselineOffset = opts && 'baselineOffset' in opts ? opts.baselineOffset : null;
      return new text_painter.PlaceholderDimensions.new({size: size, alignment: alignment, baseline: baseline, baselineOffset: baselineOffset});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return text_painter.PlaceholderDimensions.is(other) && other.size._equals(this.size) && other.alignment === this.alignment && other.baseline == this.baseline && other.baselineOffset == this.baselineOffset;
    }
    get hashCode() {
      return core.Object.hash(this.size, this.alignment, this.baseline, this.baselineOffset);
    }
    toString() {
      return (() => {
        let t$365 = null;
        let t$36$350$350 = this.alignment;
        let t$36$350$351 = C[10] || CT.C10;
        let t$36$350$353 = C[0] || CT.C0;
        let t$36$350$355 = C[11] || CT.C11;
        let t$36$350$357 = C[12] || CT.C12;
        let t$36$350$359 = C[13] || CT.C13;
        let t$36$350$3511 = C[14] || CT.C14;
        L0: {
          {
            if (t$36$350$351 === t$36$350$350 || t$36$350$353 === t$36$350$350 || t$36$350$355 === t$36$350$350 || t$36$350$357 === t$36$350$350 || t$36$350$359 === t$36$350$350) {
              t$365 = "PlaceholderDimensions(" + dart.str(this.size) + ", " + dart.str(this.alignment) + ")";
              break L0;
            }
          }
          {
            if (t$36$350$3511 === t$36$350$350) {
              t$365 = "PlaceholderDimensions(" + dart.str(this.size) + ", " + dart.str(this.alignment) + "(" + dart.str(this.baselineOffset) + " from top))";
              break L0;
            }
          }
        }
        return t$365;
      })();
    }
  };
  (text_painter.PlaceholderDimensions.new = function(opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let baselineOffset = opts && 'baselineOffset' in opts ? opts.baselineOffset : null;
    this[size$] = size;
    this[alignment$0] = alignment;
    this[baseline$0] = baseline;
    this[baselineOffset$] = baselineOffset;
    ;
  }).prototype = text_painter.PlaceholderDimensions.prototype;
  dart.addTypeTests(text_painter.PlaceholderDimensions);
  dart.addTypeCaches(text_painter.PlaceholderDimensions);
  dart.setLibraryUri(text_painter.PlaceholderDimensions, I[10]);
  dart.setFieldSignature(text_painter.PlaceholderDimensions, () => dart.global.Object.setPrototypeOf({
    size: dart.finalFieldType(ui.Size),
    alignment: dart.finalFieldType(ui.PlaceholderAlignment),
    baselineOffset: dart.finalFieldType(dart.nullable(core.double)),
    baseline: dart.finalFieldType(dart.nullable(ui.TextBaseline))
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_painter.PlaceholderDimensions))));
  dart.setStaticFieldSignature(text_painter.PlaceholderDimensions, () => ['empty']);
  dart.defineExtensionMethods(text_painter.PlaceholderDimensions, ['_equals', 'toString']);
  dart.defineExtensionAccessors(text_painter.PlaceholderDimensions, ['hashCode']);
  dart.defineLazy(text_painter.PlaceholderDimensions, {
    /*text_painter.PlaceholderDimensions.empty*/get empty() {
      return C[15] || CT.C15;
    }
  }, false);
  text_painter.TextWidthBasis = class TextWidthBasis extends core._Enum {
    [_enumToString]() {
      return "TextWidthBasis." + this[_name];
    }
  };
  (text_painter.TextWidthBasis.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(text_painter.TextWidthBasis).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = text_painter.TextWidthBasis.prototype;
  dart.addTypeTests(text_painter.TextWidthBasis);
  dart.addTypeCaches(text_painter.TextWidthBasis);
  dart.setMethodSignature(text_painter.TextWidthBasis, () => dart.global.Object.setPrototypeOf({[_enumToString]: dart.fnType(core.String, [])}, dart.getMethods(dart.global.Object.getPrototypeOf(text_painter.TextWidthBasis))));
  dart.setLibraryUri(text_painter.TextWidthBasis, I[10]);
  dart.setStaticFieldSignature(text_painter.TextWidthBasis, () => ['values', 'parent', 'longestLine']);
  dart.defineLazy(text_painter.TextWidthBasis, {
    /*text_painter.TextWidthBasis.values*/get values() {
      return C[17] || CT.C17;
    },
    /*text_painter.TextWidthBasis.parent*/get parent() {
      return C[18] || CT.C18;
    },
    /*text_painter.TextWidthBasis.longestLine*/get longestLine() {
      return C[19] || CT.C19;
    }
  }, false);
  var __WordBoundary_moveByWordBoundary = dart.privateName(text_painter, "_#WordBoundary#moveByWordBoundary");
  var _text$ = dart.privateName(text_painter, "_text");
  var _paragraph$ = dart.privateName(text_painter, "_paragraph");
  var _codePointAt = dart.privateName(text_painter, "_codePointAt");
  var _skipSpacesAndPunctuations = dart.privateName(text_painter, "_skipSpacesAndPunctuations");
  text_painter.WordBoundary = class WordBoundary extends text_boundary.TextBoundary {
    static ['_#_#tearOff'](_text, _paragraph) {
      return new text_painter.WordBoundary.__(_text, _paragraph);
    }
    getTextBoundaryAt(position) {
      return this[_paragraph$].getWordBoundary(new ui.TextPosition.new({offset: math.max(core.int, position, 0)}));
    }
    static _codePointFromSurrogates(highSurrogate, lowSurrogate) {
      if (!text_painter.TextPainter.isHighSurrogate(highSurrogate)) dart.assertFailed("U+" + highSurrogate[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + ") is not a high surrogate.", I[11], 180, 7, "TextPainter.isHighSurrogate(highSurrogate)");
      if (!text_painter.TextPainter.isLowSurrogate(lowSurrogate)) dart.assertFailed("U+" + lowSurrogate[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + ") is not a low surrogate.", I[11], 184, 7, "TextPainter.isLowSurrogate(lowSurrogate)");
      return (highSurrogate << 10 >>> 0) + lowSurrogate + -56613888;
    }
    [_codePointAt](index) {
      let codeUnitAtIndex = this[_text$].codeUnitAt(index);
      if (codeUnitAtIndex == null) {
        return null;
      }
      return (() => {
        let t$3615 = null;
        let t$36$350$350 = dart.notNull(codeUnitAtIndex) & 64512;
        L1: {
          {
            if (55296 === t$36$350$350) {
              t$3615 = text_painter.WordBoundary._codePointFromSurrogates(codeUnitAtIndex, dart.nullCheck(this[_text$].codeUnitAt(index + 1)));
              break L1;
            }
          }
          {
            if (56320 === t$36$350$350) {
              t$3615 = text_painter.WordBoundary._codePointFromSurrogates(dart.nullCheck(this[_text$].codeUnitAt(index - 1)), codeUnitAtIndex);
              break L1;
            }
          }
          {
            {
              t$3615 = codeUnitAtIndex;
              break L1;
            }
          }
        }
        return t$3615;
      })();
    }
    static _isNewline(codePoint) {
      return (() => {
        let t$3617 = null;
        let t$36$350$350 = codePoint;
        L2: {
          {
            if (10 === t$36$350$350 || 133 === t$36$350$350 || 11 === t$36$350$350 || 12 === t$36$350$350 || 8232 === t$36$350$350 || 8233 === t$36$350$350) {
              t$3617 = true;
              break L2;
            }
          }
          {
            {
              t$3617 = false;
              break L2;
            }
          }
        }
        return t$3617;
      })();
    }
    [_skipSpacesAndPunctuations](offset, forward) {
      let innerCodePoint = this[_codePointAt](forward ? offset - 1 : offset);
      let outerCodeUnit = this[_text$].codeUnitAt(forward ? offset : offset - 1);
      let hardBreakRulesApply = innerCodePoint == null || outerCodeUnit == null || text_painter.WordBoundary._isNewline(innerCodePoint) || text_painter.WordBoundary._isNewline(outerCodeUnit);
      return hardBreakRulesApply || !core.RegExp.new("[\\p{Space_Separator}\\p{Punctuation}]", {unicode: true}).hasMatch(core.String.fromCharCode(innerCodePoint));
    }
    get moveByWordBoundary() {
      let t$3620, t$3619;
      t$3619 = this[__WordBoundary_moveByWordBoundary];
      return t$3619 == null ? (t$3620 = new text_painter._UntilTextBoundary.new(this, dart.bind(this, _skipSpacesAndPunctuations)), this[__WordBoundary_moveByWordBoundary] == null ? this[__WordBoundary_moveByWordBoundary] = t$3620 : dart.throw(new _internal.LateError.fieldADI("moveByWordBoundary"))) : t$3619;
    }
  };
  (text_painter.WordBoundary.__ = function(_text, _paragraph) {
    this[__WordBoundary_moveByWordBoundary] = null;
    this[_text$] = _text;
    this[_paragraph$] = _paragraph;
    dart.global.Object.getPrototypeOf(text_painter.WordBoundary).new.call(this);
    ;
  }).prototype = text_painter.WordBoundary.prototype;
  dart.addTypeTests(text_painter.WordBoundary);
  dart.addTypeCaches(text_painter.WordBoundary);
  dart.setMethodSignature(text_painter.WordBoundary, () => dart.global.Object.setPrototypeOf({
    [_codePointAt]: dart.fnType(dart.nullable(core.int), [core.int]),
    [_skipSpacesAndPunctuations]: dart.fnType(core.bool, [core.int, core.bool])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_painter.WordBoundary))));
  dart.setStaticMethodSignature(text_painter.WordBoundary, () => ['_codePointFromSurrogates', '_isNewline']);
  dart.setGetterSignature(text_painter.WordBoundary, () => dart.global.Object.setPrototypeOf({moveByWordBoundary: text_boundary.TextBoundary}, dart.getGetters(dart.global.Object.getPrototypeOf(text_painter.WordBoundary))));
  dart.setLibraryUri(text_painter.WordBoundary, I[10]);
  dart.setFieldSignature(text_painter.WordBoundary, () => dart.global.Object.setPrototypeOf({
    [_text$]: dart.finalFieldType(inline_span.InlineSpan),
    [_paragraph$]: dart.finalFieldType(ui.Paragraph),
    [__WordBoundary_moveByWordBoundary]: dart.fieldType(dart.nullable(text_boundary.TextBoundary))
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_painter.WordBoundary))));
  var _predicate$ = dart.privateName(text_painter, "_UntilTextBoundary._predicate");
  var _textBoundary$ = dart.privateName(text_painter, "_UntilTextBoundary._textBoundary");
  var _predicate = dart.privateName(text_painter, "_predicate");
  var _textBoundary = dart.privateName(text_painter, "_textBoundary");
  text_painter._UntilTextBoundary = class _UntilTextBoundary extends text_boundary.TextBoundary {
    get [_predicate]() {
      return this[_predicate$];
    }
    set [_predicate](value) {
      super[_predicate] = value;
    }
    get [_textBoundary]() {
      return this[_textBoundary$];
    }
    set [_textBoundary](value) {
      super[_textBoundary] = value;
    }
    static ['_#new#tearOff'](_textBoundary, _predicate) {
      return new text_painter._UntilTextBoundary.new(_textBoundary, _predicate);
    }
    getLeadingTextBoundaryAt(position) {
      let t$3620, t$3619;
      if (position < 0) {
        return null;
      }
      let offset = this[_textBoundary].getLeadingTextBoundaryAt(position);
      return offset == null || (t$3619 = offset, t$3620 = false, this[_predicate](t$3619, t$3620)) ? offset : this.getLeadingTextBoundaryAt(dart.notNull(offset) - 1);
    }
    getTrailingTextBoundaryAt(position) {
      let t$3620, t$3619;
      let offset = this[_textBoundary].getTrailingTextBoundaryAt(math.max(core.int, position, 0));
      return offset == null || (t$3619 = offset, t$3620 = true, this[_predicate](t$3619, t$3620)) ? offset : this.getTrailingTextBoundaryAt(offset);
    }
  };
  (text_painter._UntilTextBoundary.new = function(_textBoundary, _predicate) {
    this[_textBoundary$] = _textBoundary;
    this[_predicate$] = _predicate;
    dart.global.Object.getPrototypeOf(text_painter._UntilTextBoundary).new.call(this);
    ;
  }).prototype = text_painter._UntilTextBoundary.prototype;
  dart.addTypeTests(text_painter._UntilTextBoundary);
  dart.addTypeCaches(text_painter._UntilTextBoundary);
  dart.setLibraryUri(text_painter._UntilTextBoundary, I[10]);
  dart.setFieldSignature(text_painter._UntilTextBoundary, () => dart.global.Object.setPrototypeOf({
    [_predicate]: dart.finalFieldType(dart.fnType(core.bool, [core.int, core.bool])),
    [_textBoundary]: dart.finalFieldType(text_boundary.TextBoundary)
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_painter._UntilTextBoundary))));
  text_painter._TextLayout = class _TextLayout extends core.Object {
    static ['_#_#tearOff'](_paragraph) {
      return new text_painter._TextLayout.__(_paragraph);
    }
    static _applyFloatingPointHack(layoutValue) {
      return layoutValue[$ceilToDouble]();
    }
    get debugDisposed() {
      return this[_paragraph$].debugDisposed;
    }
    get width() {
      return text_painter._TextLayout._applyFloatingPointHack(this[_paragraph$].width);
    }
    get height() {
      return text_painter._TextLayout._applyFloatingPointHack(this[_paragraph$].height);
    }
    get minIntrinsicLineExtent() {
      return text_painter._TextLayout._applyFloatingPointHack(this[_paragraph$].minIntrinsicWidth);
    }
    get maxIntrinsicLineExtent() {
      return text_painter._TextLayout._applyFloatingPointHack(this[_paragraph$].maxIntrinsicWidth);
    }
    get longestLine() {
      return text_painter._TextLayout._applyFloatingPointHack(this[_paragraph$].longestLine);
    }
    getDistanceToBaseline(baseline) {
      return (() => {
        let t$3619 = null;
        switch (baseline) {
          case C[20] || CT.C20:
            {
              t$3619 = this[_paragraph$].alphabeticBaseline;
              break;
            }
          case C[21] || CT.C21:
            {
              t$3619 = this[_paragraph$].ideographicBaseline;
              break;
            }
        }
        return t$3619;
      })();
    }
  };
  (text_painter._TextLayout.__ = function(_paragraph) {
    this[_paragraph$] = _paragraph;
    ;
  }).prototype = text_painter._TextLayout.prototype;
  dart.addTypeTests(text_painter._TextLayout);
  dart.addTypeCaches(text_painter._TextLayout);
  dart.setMethodSignature(text_painter._TextLayout, () => dart.global.Object.setPrototypeOf({getDistanceToBaseline: dart.fnType(core.double, [ui.TextBaseline])}, dart.getMethods(dart.global.Object.getPrototypeOf(text_painter._TextLayout))));
  dart.setStaticMethodSignature(text_painter._TextLayout, () => ['_applyFloatingPointHack']);
  dart.setGetterSignature(text_painter._TextLayout, () => dart.global.Object.setPrototypeOf({
    debugDisposed: core.bool,
    width: core.double,
    height: core.double,
    minIntrinsicLineExtent: core.double,
    maxIntrinsicLineExtent: core.double,
    longestLine: core.double
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_painter._TextLayout))));
  dart.setLibraryUri(text_painter._TextLayout, I[10]);
  dart.setFieldSignature(text_painter._TextLayout, () => dart.global.Object.setPrototypeOf({[_paragraph$]: dart.fieldType(ui.Paragraph)}, dart.getFields(dart.global.Object.getPrototypeOf(text_painter._TextLayout))));
  dart.setStaticFieldSignature(text_painter._TextLayout, () => ['_shouldApplyFloatingPointHack']);
  dart.defineLazy(text_painter._TextLayout, {
    /*text_painter._TextLayout._shouldApplyFloatingPointHack*/get _shouldApplyFloatingPointHack() {
      return true;
    }
  }, false);
  var _cachedInlinePlaceholderBoxes = dart.privateName(text_painter, "_cachedInlinePlaceholderBoxes");
  var _cachedLineMetrics = dart.privateName(text_painter, "_cachedLineMetrics");
  var _previousCaretPosition = dart.privateName(text_painter, "_previousCaretPosition");
  var _resizeToFit = dart.privateName(text_painter, "_resizeToFit");
  text_painter._TextPainterLayoutCacheWithOffset = class _TextPainterLayoutCacheWithOffset extends core.Object {
    static ['_#new#tearOff'](layout, textAlignment, minWidth, maxWidth, widthBasis) {
      return new text_painter._TextPainterLayoutCacheWithOffset.new(layout, textAlignment, minWidth, maxWidth, widthBasis);
    }
    get paintOffset() {
      if (this.textAlignment === 0) {
        return ui.Offset.zero;
      }
      if (!this.paragraph.width[$isFinite]) {
        return C[22] || CT.C22;
      }
      let dx = this.textAlignment * (this.contentWidth - this.paragraph.width);
      if (!!dx[$isNaN]) dart.assertFailed(null, I[11], 356, 12, "!dx.isNaN");
      return new ui.Offset.new(dx, 0.0);
    }
    get paragraph() {
      return this.layout[_paragraph$];
    }
    static _contentWidthFor(minWidth, maxWidth, widthBasis, layout) {
      {
        minWidth = minWidth[$floorToDouble]();
        maxWidth = maxWidth[$floorToDouble]();
      }
      return (() => {
        let t$3620 = null;
        switch (widthBasis) {
          case C[19] || CT.C19:
            {
              t$3620 = math$.clampDouble(layout.longestLine, minWidth, maxWidth);
              break;
            }
          case C[18] || CT.C18:
            {
              t$3620 = math$.clampDouble(layout.maxIntrinsicLineExtent, minWidth, maxWidth);
              break;
            }
        }
        return t$3620;
      })();
    }
    [_resizeToFit](minWidth, maxWidth, widthBasis) {
      if (!this.layout.maxIntrinsicLineExtent[$isFinite]) dart.assertFailed(null, I[11], 381, 12, "layout.maxIntrinsicLineExtent.isFinite");
      let newContentWidth = text_painter._TextPainterLayoutCacheWithOffset._contentWidthFor(minWidth, maxWidth, widthBasis, this.layout);
      if (newContentWidth === this.contentWidth) {
        return true;
      }
      if (!(minWidth <= maxWidth)) dart.assertFailed(null, I[11], 397, 12, "minWidth <= maxWidth");
      if (!this.paintOffset.dx[$isFinite] && !this.paragraph.width[$isFinite] && minWidth[$isFinite]) {
        if (!(this.paintOffset.dx === 1 / 0)) dart.assertFailed(null, I[11], 400, 14, "paintOffset.dx == double.infinity");
        if (!(this.paragraph.width === 1 / 0)) dart.assertFailed(null, I[11], 401, 14, "paragraph.width == double.infinity");
        return false;
      }
      let maxIntrinsicWidth = this.paragraph.maxIntrinsicWidth;
      if (this.paragraph.width - maxIntrinsicWidth > -1e-10 && maxWidth - maxIntrinsicWidth > -1e-10) {
        this.contentWidth = newContentWidth;
        return true;
      }
      return false;
    }
    get inlinePlaceholderBoxes() {
      let t$3621;
      t$3621 = this[_cachedInlinePlaceholderBoxes];
      return t$3621 == null ? this[_cachedInlinePlaceholderBoxes] = this.paragraph.getBoxesForPlaceholders() : t$3621;
    }
    get lineMetrics() {
      let t$3621;
      t$3621 = this[_cachedLineMetrics];
      return t$3621 == null ? this[_cachedLineMetrics] = this.paragraph.computeLineMetrics() : t$3621;
    }
  };
  (text_painter._TextPainterLayoutCacheWithOffset.new = function(layout, textAlignment, minWidth, maxWidth, widthBasis) {
    this[_cachedInlinePlaceholderBoxes] = null;
    this[_cachedLineMetrics] = null;
    this[_previousCaretPosition] = null;
    this.layout = layout;
    this.textAlignment = textAlignment;
    this.contentWidth = text_painter._TextPainterLayoutCacheWithOffset._contentWidthFor(minWidth, maxWidth, widthBasis, layout);
    if (!(textAlignment >= 0.0 && textAlignment <= 1.0)) dart.assertFailed(null, I[11], 333, 14, "textAlignment >= 0.0 && textAlignment <= 1.0");
    ;
  }).prototype = text_painter._TextPainterLayoutCacheWithOffset.prototype;
  dart.addTypeTests(text_painter._TextPainterLayoutCacheWithOffset);
  dart.addTypeCaches(text_painter._TextPainterLayoutCacheWithOffset);
  dart.setMethodSignature(text_painter._TextPainterLayoutCacheWithOffset, () => dart.global.Object.setPrototypeOf({[_resizeToFit]: dart.fnType(core.bool, [core.double, core.double, text_painter.TextWidthBasis])}, dart.getMethods(dart.global.Object.getPrototypeOf(text_painter._TextPainterLayoutCacheWithOffset))));
  dart.setStaticMethodSignature(text_painter._TextPainterLayoutCacheWithOffset, () => ['_contentWidthFor']);
  dart.setGetterSignature(text_painter._TextPainterLayoutCacheWithOffset, () => dart.global.Object.setPrototypeOf({
    paintOffset: ui.Offset,
    paragraph: ui.Paragraph,
    inlinePlaceholderBoxes: core.List$(ui.TextBox),
    lineMetrics: core.List$(ui.LineMetrics)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_painter._TextPainterLayoutCacheWithOffset))));
  dart.setLibraryUri(text_painter._TextPainterLayoutCacheWithOffset, I[10]);
  dart.setFieldSignature(text_painter._TextPainterLayoutCacheWithOffset, () => dart.global.Object.setPrototypeOf({
    layout: dart.finalFieldType(text_painter._TextLayout),
    contentWidth: dart.fieldType(core.double),
    textAlignment: dart.finalFieldType(core.double),
    [_cachedInlinePlaceholderBoxes]: dart.fieldType(dart.nullable(core.List$(ui.TextBox))),
    [_cachedLineMetrics]: dart.fieldType(dart.nullable(core.List$(ui.LineMetrics))),
    [_previousCaretPosition]: dart.fieldType(dart.nullable(ui.TextPosition))
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_painter._TextPainterLayoutCacheWithOffset))));
  text_painter._CaretMetrics = class _CaretMetrics extends core.Object {};
  (text_painter._CaretMetrics.new = function() {
    ;
  }).prototype = text_painter._CaretMetrics.prototype;
  dart.addTypeTests(text_painter._CaretMetrics);
  dart.addTypeCaches(text_painter._CaretMetrics);
  dart.setLibraryUri(text_painter._CaretMetrics, I[10]);
  var offset$ = dart.privateName(text_painter, "_LineCaretMetrics.offset");
  var writingDirection$ = dart.privateName(text_painter, "_LineCaretMetrics.writingDirection");
  var fullHeight$ = dart.privateName(text_painter, "_LineCaretMetrics.fullHeight");
  text_painter._LineCaretMetrics = class _LineCaretMetrics extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get writingDirection() {
      return this[writingDirection$];
    }
    set writingDirection(value) {
      super.writingDirection = value;
    }
    get fullHeight() {
      return this[fullHeight$];
    }
    set fullHeight(value) {
      super.fullHeight = value;
    }
    static ['_#new#tearOff'](opts) {
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let writingDirection = opts && 'writingDirection' in opts ? opts.writingDirection : null;
      let fullHeight = opts && 'fullHeight' in opts ? opts.fullHeight : null;
      return new text_painter._LineCaretMetrics.new({offset: offset, writingDirection: writingDirection, fullHeight: fullHeight});
    }
  };
  (text_painter._LineCaretMetrics.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let writingDirection = opts && 'writingDirection' in opts ? opts.writingDirection : null;
    let fullHeight = opts && 'fullHeight' in opts ? opts.fullHeight : null;
    this[offset$] = offset;
    this[writingDirection$] = writingDirection;
    this[fullHeight$] = fullHeight;
    ;
  }).prototype = text_painter._LineCaretMetrics.prototype;
  dart.addTypeTests(text_painter._LineCaretMetrics);
  dart.addTypeCaches(text_painter._LineCaretMetrics);
  text_painter._LineCaretMetrics[dart.implements] = () => [text_painter._CaretMetrics];
  dart.setLibraryUri(text_painter._LineCaretMetrics, I[10]);
  dart.setFieldSignature(text_painter._LineCaretMetrics, () => dart.global.Object.setPrototypeOf({
    offset: dart.finalFieldType(ui.Offset),
    writingDirection: dart.finalFieldType(ui.TextDirection),
    fullHeight: dart.finalFieldType(core.double)
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_painter._LineCaretMetrics))));
  var lineVerticalOffset$ = dart.privateName(text_painter, "_EmptyLineCaretMetrics.lineVerticalOffset");
  text_painter._EmptyLineCaretMetrics = class _EmptyLineCaretMetrics extends core.Object {
    get lineVerticalOffset() {
      return this[lineVerticalOffset$];
    }
    set lineVerticalOffset(value) {
      super.lineVerticalOffset = value;
    }
    static ['_#new#tearOff'](opts) {
      let lineVerticalOffset = opts && 'lineVerticalOffset' in opts ? opts.lineVerticalOffset : null;
      return new text_painter._EmptyLineCaretMetrics.new({lineVerticalOffset: lineVerticalOffset});
    }
  };
  (text_painter._EmptyLineCaretMetrics.new = function(opts) {
    let lineVerticalOffset = opts && 'lineVerticalOffset' in opts ? opts.lineVerticalOffset : null;
    this[lineVerticalOffset$] = lineVerticalOffset;
    ;
  }).prototype = text_painter._EmptyLineCaretMetrics.prototype;
  dart.addTypeTests(text_painter._EmptyLineCaretMetrics);
  dart.addTypeCaches(text_painter._EmptyLineCaretMetrics);
  text_painter._EmptyLineCaretMetrics[dart.implements] = () => [text_painter._CaretMetrics];
  dart.setLibraryUri(text_painter._EmptyLineCaretMetrics, I[10]);
  dart.setFieldSignature(text_painter._EmptyLineCaretMetrics, () => dart.global.Object.setPrototypeOf({lineVerticalOffset: dart.finalFieldType(core.double)}, dart.getFields(dart.global.Object.getPrototypeOf(text_painter._EmptyLineCaretMetrics))));
  var _debugNeedsRelayout = dart.privateName(text_painter, "_debugNeedsRelayout");
  var _layoutCache = dart.privateName(text_painter, "_layoutCache");
  var _rebuildParagraphForPaint = dart.privateName(text_painter, "_rebuildParagraphForPaint");
  var _inputWidth = dart.privateName(text_painter, "_inputWidth");
  var _debugMarkNeedsLayoutCallStack = dart.privateName(text_painter, "_debugMarkNeedsLayoutCallStack");
  var _cachedPlainText = dart.privateName(text_painter, "_cachedPlainText");
  var _placeholderDimensions = dart.privateName(text_painter, "_placeholderDimensions");
  var _layoutTemplate = dart.privateName(text_painter, "_layoutTemplate");
  var __TextPainter__caretMetrics = dart.privateName(text_painter, "_#TextPainter#_caretMetrics");
  var _disposed = dart.privateName(text_painter, "_disposed");
  var _textAlign = dart.privateName(text_painter, "_textAlign");
  var _textDirection = dart.privateName(text_painter, "_textDirection");
  var _textScaleFactor = dart.privateName(text_painter, "_textScaleFactor");
  var _maxLines = dart.privateName(text_painter, "_maxLines");
  var _ellipsis = dart.privateName(text_painter, "_ellipsis");
  var _locale = dart.privateName(text_painter, "_locale");
  var _strutStyle = dart.privateName(text_painter, "_strutStyle");
  var _textWidthBasis = dart.privateName(text_painter, "_textWidthBasis");
  var _textHeightBehavior = dart.privateName(text_painter, "_textHeightBehavior");
  var _debugAssertTextLayoutIsValid = dart.privateName(text_painter, "_debugAssertTextLayoutIsValid");
  var _createParagraphStyle = dart.privateName(text_painter, "_createParagraphStyle");
  var ParagraphConstraints_width = dart.privateName(ui, "ParagraphConstraints.width");
  var _createLayoutTemplate = dart.privateName(text_painter, "_createLayoutTemplate");
  var _createParagraph = dart.privateName(text_painter, "_createParagraph");
  var _getMetricsFromUpstream = dart.privateName(text_painter, "_getMetricsFromUpstream");
  var _getMetricsFromDownstream = dart.privateName(text_painter, "_getMetricsFromDownstream");
  var _computeCaretMetrics = dart.privateName(text_painter, "_computeCaretMetrics");
  var _caretMetrics = dart.privateName(text_painter, "_caretMetrics");
  text_painter.TextPainter = class TextPainter extends core.Object {
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[23] || CT.C23;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[18] || CT.C18;
      let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
      return new text_painter.TextPainter.new({text: text, textAlign: textAlign, textDirection: textDirection, textScaleFactor: textScaleFactor, maxLines: maxLines, ellipsis: ellipsis, locale: locale, strutStyle: strutStyle, textWidthBasis: textWidthBasis, textHeightBehavior: textHeightBehavior});
    }
    static computeWidth(opts) {
      let t$3621;
      let text = opts && 'text' in opts ? opts.text : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[23] || CT.C23;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[18] || CT.C18;
      let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      let painter = (t$3621 = new text_painter.TextPainter.new({text: text, textAlign: textAlign, textDirection: textDirection, textScaleFactor: textScaleFactor, maxLines: maxLines, ellipsis: ellipsis, locale: locale, strutStyle: strutStyle, textWidthBasis: textWidthBasis, textHeightBehavior: textHeightBehavior}), (() => {
        t$3621.layout({minWidth: minWidth, maxWidth: maxWidth});
        return t$3621;
      })());
      try {
        return painter.width;
      } finally {
        painter.dispose();
      }
    }
    static computeMaxIntrinsicWidth(opts) {
      let t$3621;
      let text = opts && 'text' in opts ? opts.text : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[23] || CT.C23;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[18] || CT.C18;
      let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      let painter = (t$3621 = new text_painter.TextPainter.new({text: text, textAlign: textAlign, textDirection: textDirection, textScaleFactor: textScaleFactor, maxLines: maxLines, ellipsis: ellipsis, locale: locale, strutStyle: strutStyle, textWidthBasis: textWidthBasis, textHeightBehavior: textHeightBehavior}), (() => {
        t$3621.layout({minWidth: minWidth, maxWidth: maxWidth});
        return t$3621;
      })());
      try {
        return painter.maxIntrinsicWidth;
      } finally {
        painter.dispose();
      }
    }
    get [_debugAssertTextLayoutIsValid]() {
      if (!!this.debugDisposed) dart.assertFailed(null, I[11], 616, 12, "!debugDisposed");
      if (this[_layoutCache] == null) {
        dart.throw(new assertions.FlutterError.fromParts((() => {
          let t$3621 = T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Text layout not available")]);
          if (this[_debugMarkNeedsLayoutCallStack] != null)
            t$3621.push(new assertions.DiagnosticsStackTrace.new("The calls that first invalidated the text layout were", this[_debugMarkNeedsLayoutCallStack]));
          else
            t$3621.push(new assertions.ErrorDescription.new("The TextPainter has never been laid out."));
          return t$3621;
        })()));
      }
      return true;
    }
    markNeedsLayout() {
      let t$3622;
      if (!dart.fn(() => {
        if (this[_layoutCache] != null) {
          this[_debugMarkNeedsLayoutCallStack] == null ? this[_debugMarkNeedsLayoutCallStack] = core.StackTrace.current : null;
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[11], 636, 12, "() {\r\n      if (_layoutCache != null) {\r\n        _debugMarkNeedsLayoutCallStack ??= StackTrace.current;\r\n      }\r\n      return true;\r\n    }()");
      t$3622 = this[_layoutCache];
      t$3622 == null ? null : t$3622.paragraph.dispose();
      this[_layoutCache] = null;
    }
    get text() {
      return this[_text$];
    }
    set text(value) {
      let t$3622, t$3622$, t$3622$0, t$3622$1, t$3622$2;
      if (!(value == null || value.debugAssertIsValid())) dart.assertFailed(null, I[11], 657, 12, "value == null || value.debugAssertIsValid()");
      if (dart.equals(this[_text$], value)) {
        return;
      }
      if (!dart.equals((t$3622 = this[_text$], t$3622 == null ? null : t$3622.style), (t$3622$ = value, t$3622$ == null ? null : t$3622$.style))) {
        t$3622$0 = this[_layoutTemplate];
        t$3622$0 == null ? null : t$3622$0.dispose();
        this[_layoutTemplate] = null;
      }
      let comparison = value == null ? basic_types.RenderComparison.layout : (t$3622$2 = (t$3622$1 = this[_text$], t$3622$1 == null ? null : t$3622$1.compareTo(value)), t$3622$2 == null ? basic_types.RenderComparison.layout : t$3622$2);
      this[_text$] = value;
      this[_cachedPlainText] = null;
      if (comparison.index >= basic_types.RenderComparison.layout.index) {
        this.markNeedsLayout();
      } else if (comparison.index >= basic_types.RenderComparison.paint.index) {
        this[_rebuildParagraphForPaint] = true;
      }
    }
    get plainText() {
      let t$3622, t$3622$;
      this[_cachedPlainText] == null ? this[_cachedPlainText] = (t$3622 = this[_text$], t$3622 == null ? null : t$3622.toPlainText({includeSemanticsLabels: false})) : null;
      t$3622$ = this[_cachedPlainText];
      return t$3622$ == null ? "" : t$3622$;
    }
    get textAlign() {
      return this[_textAlign];
    }
    set textAlign(value) {
      if (this[_textAlign] === value) {
        return;
      }
      this[_textAlign] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      let t$3622;
      if (this[_textDirection] == value) {
        return;
      }
      this[_textDirection] = value;
      this.markNeedsLayout();
      t$3622 = this[_layoutTemplate];
      t$3622 == null ? null : t$3622.dispose();
      this[_layoutTemplate] = null;
    }
    get textScaleFactor() {
      return this[_textScaleFactor];
    }
    set textScaleFactor(value) {
      let t$3622;
      if (this[_textScaleFactor] === value) {
        return;
      }
      this[_textScaleFactor] = value;
      this.markNeedsLayout();
      t$3622 = this[_layoutTemplate];
      t$3622 == null ? null : t$3622.dispose();
      this[_layoutTemplate] = null;
    }
    get ellipsis() {
      return this[_ellipsis];
    }
    set ellipsis(value) {
      if (!(value == null || value[$isNotEmpty])) dart.assertFailed(null, I[11], 771, 12, "value == null || value.isNotEmpty");
      if (this[_ellipsis] == value) {
        return;
      }
      this[_ellipsis] = value;
      this.markNeedsLayout();
    }
    get locale() {
      return this[_locale];
    }
    set locale(value) {
      if (dart.equals(this[_locale], value)) {
        return;
      }
      this[_locale] = value;
      this.markNeedsLayout();
    }
    get maxLines() {
      return this[_maxLines];
    }
    set maxLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, I[11], 801, 12, "value == null || value > 0");
      if (this[_maxLines] == value) {
        return;
      }
      this[_maxLines] = value;
      this.markNeedsLayout();
    }
    get strutStyle() {
      return this[_strutStyle];
    }
    set strutStyle(value) {
      if (dart.equals(this[_strutStyle], value)) {
        return;
      }
      this[_strutStyle] = value;
      this.markNeedsLayout();
    }
    get textWidthBasis() {
      return this[_textWidthBasis];
    }
    set textWidthBasis(value) {
      if (this[_textWidthBasis] === value) {
        return;
      }
      if (!dart.fn(() => this[_debugNeedsRelayout] = true, T.VoidTobool())()) dart.assertFailed(null, I[11], 840, 12, "() { return _debugNeedsRelayout = true; }()");
      this[_textWidthBasis] = value;
    }
    get textHeightBehavior() {
      return this[_textHeightBehavior];
    }
    set textHeightBehavior(value) {
      if (dart.equals(this[_textHeightBehavior], value)) {
        return;
      }
      this[_textHeightBehavior] = value;
      this.markNeedsLayout();
    }
    get inlinePlaceholderBoxes() {
      let layout = this[_layoutCache];
      if (layout == null) {
        return null;
      }
      let offset = layout.paintOffset;
      if (!offset.dx[$isFinite] || !offset.dy[$isFinite]) {
        return T.JSArrayOfTextBox().of([]);
      }
      let rawBoxes = layout.inlinePlaceholderBoxes;
      if (offset._equals(ui.Offset.zero)) {
        return rawBoxes;
      }
      return rawBoxes[$map](ui.TextBox, dart.fn(box => text_painter.TextPainter._shiftTextBox(box, offset), T.TextBoxToTextBox()))[$toList]({growable: false});
    }
    setPlaceholderDimensions(value) {
      if (value == null || value[$isEmpty] || collections.listEquals(text_painter.PlaceholderDimensions, value, this[_placeholderDimensions])) {
        return;
      }
      if (!dart.fn(() => {
        let placeholderCount = 0;
        dart.nullCheck(this.text).visitChildren(dart.fn(span => {
          if (placeholder_span.PlaceholderSpan.is(span)) {
            placeholderCount = placeholderCount + 1;
          }
          return value[$length] >= placeholderCount;
        }, T.InlineSpanTobool()));
        return placeholderCount === value[$length];
      }, T.VoidTobool())()) dart.assertFailed(null, I[11], 889, 12, "() {\r\n      int placeholderCount = 0;\r\n      text!.visitChildren((InlineSpan span) {\r\n        if (span is PlaceholderSpan) {\r\n          placeholderCount += 1;\r\n        }\r\n        return value.length >= placeholderCount;\r\n      });\r\n      return placeholderCount == value.length;\r\n    }()");
      this[_placeholderDimensions] = value;
      this.markNeedsLayout();
    }
    [_createParagraphStyle](defaultTextDirection = null) {
      let t$3623, t$3622, t$3623$, t$3622$;
      if (!(this.textDirection != null || defaultTextDirection != null)) dart.assertFailed("TextPainter.textDirection must be set to a non-null value before using the TextPainter.", I[11], 907, 12, "textDirection != null || defaultTextDirection != null");
      t$3622$ = (t$3622 = dart.nullCheck(this[_text$]).style, t$3622 == null ? null : t$3622.getParagraphStyle({textAlign: this.textAlign, textDirection: (t$3623 = this.textDirection, t$3623 == null ? defaultTextDirection : t$3623), textScaleFactor: this.textScaleFactor, maxLines: this[_maxLines], textHeightBehavior: this[_textHeightBehavior], ellipsis: this[_ellipsis], locale: this[_locale], strutStyle: this[_strutStyle]}));
      return t$3622$ == null ? ui.ParagraphStyle.new({textAlign: this.textAlign, textDirection: (t$3623$ = this.textDirection, t$3623$ == null ? defaultTextDirection : t$3623$), fontSize: 14 * this.textScaleFactor, maxLines: this.maxLines, textHeightBehavior: this[_textHeightBehavior], ellipsis: this.ellipsis, locale: this.locale}) : t$3622$;
    }
    [_createLayoutTemplate]() {
      let t$3623, t$3622, t$3622$;
      let builder = ui.ParagraphBuilder.new(this[_createParagraphStyle](ui.TextDirection.rtl));
      let textStyle = (t$3622 = this.text, t$3622 == null ? null : (t$3623 = t$3622.style, t$3623 == null ? null : t$3623.getTextStyle({textScaleFactor: this.textScaleFactor})));
      if (textStyle != null) {
        builder.pushStyle(textStyle);
      }
      builder.addText(" ");
      t$3622$ = builder.build();
      return (() => {
        t$3622$.layout(C[24] || CT.C24);
        return t$3622$;
      })();
    }
    get preferredLineHeight() {
      let t$3622;
      return (t$3622 = this[_layoutTemplate], t$3622 == null ? this[_layoutTemplate] = this[_createLayoutTemplate]() : t$3622).height;
    }
    get minIntrinsicWidth() {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 964, 12, "_debugAssertTextLayoutIsValid");
      return dart.nullCheck(this[_layoutCache]).layout.minIntrinsicLineExtent;
    }
    get maxIntrinsicWidth() {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 972, 12, "_debugAssertTextLayoutIsValid");
      return dart.nullCheck(this[_layoutCache]).layout.maxIntrinsicLineExtent;
    }
    get width() {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 980, 12, "_debugAssertTextLayoutIsValid");
      if (!!this[_debugNeedsRelayout]) dart.assertFailed(null, I[11], 981, 12, "!_debugNeedsRelayout");
      return dart.nullCheck(this[_layoutCache]).contentWidth;
    }
    get height() {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 989, 12, "_debugAssertTextLayoutIsValid");
      return dart.nullCheck(this[_layoutCache]).layout.height;
    }
    get size() {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 997, 12, "_debugAssertTextLayoutIsValid");
      if (!!this[_debugNeedsRelayout]) dart.assertFailed(null, I[11], 998, 12, "!_debugNeedsRelayout");
      return new ui.Size.new(this.width, this.height);
    }
    computeDistanceToActualBaseline(baseline) {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1007, 12, "_debugAssertTextLayoutIsValid");
      return dart.nullCheck(this[_layoutCache]).layout.getDistanceToBaseline(baseline);
    }
    get didExceedMaxLines() {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1023, 12, "_debugAssertTextLayoutIsValid");
      return dart.nullCheck(this[_layoutCache]).paragraph.didExceedMaxLines;
    }
    [_createParagraph](text) {
      let builder = ui.ParagraphBuilder.new(this[_createParagraphStyle]());
      text.build(builder, {textScaleFactor: this.textScaleFactor, dimensions: this[_placeholderDimensions]});
      if (!dart.fn(() => {
        this[_debugMarkNeedsLayoutCallStack] = null;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[11], 1032, 12, "() {\r\n      _debugMarkNeedsLayoutCallStack = null;\r\n      return true;\r\n    }()");
      this[_rebuildParagraphForPaint] = false;
      return builder.build();
    }
    layout(opts) {
      let t$3622, t$3622$, t$3622$0, t$3622$1, t$3622$2;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      if (!!maxWidth[$isNaN]) dart.assertFailed(null, I[11], 1050, 12, "!maxWidth.isNaN");
      if (!!minWidth[$isNaN]) dart.assertFailed(null, I[11], 1051, 12, "!minWidth.isNaN");
      if (!dart.fn(() => {
        this[_debugNeedsRelayout] = false;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[11], 1052, 12, "() {\r\n      _debugNeedsRelayout = false;\r\n      return true;\r\n    }()");
      let cachedLayout = this[_layoutCache];
      if (cachedLayout != null && cachedLayout[_resizeToFit](minWidth, maxWidth, this.textWidthBasis)) {
        return;
      }
      let text = this.text;
      if (text == null) {
        dart.throw(new core.StateError.new("TextPainter.text must be set to a non-null value before using the TextPainter."));
      }
      let textDirection = this.textDirection;
      if (textDirection == null) {
        dart.throw(new core.StateError.new("TextPainter.textDirection must be set to a non-null value before using the TextPainter."));
      }
      let paintOffsetAlignment = text_painter.TextPainter._computePaintOffsetFraction(this.textAlign, textDirection);
      let adjustMaxWidth = !maxWidth[$isFinite] && paintOffsetAlignment !== 0;
      let adjustedMaxWidth = !adjustMaxWidth ? maxWidth : (t$3622 = cachedLayout, t$3622 == null ? null : t$3622.layout.maxIntrinsicLineExtent);
      this[_inputWidth] = (t$3622$ = adjustedMaxWidth, t$3622$ == null ? maxWidth : t$3622$);
      let paragraph = (t$3622$2 = (t$3622$1 = (t$3622$0 = cachedLayout, t$3622$0 == null ? null : t$3622$0.paragraph), t$3622$1 == null ? this[_createParagraph](text) : t$3622$1), (() => {
        t$3622$2.layout(new ui.ParagraphConstraints.new({width: this[_inputWidth]}));
        return t$3622$2;
      })());
      let newLayoutCache = new text_painter._TextPainterLayoutCacheWithOffset.new(new text_painter._TextLayout.__(paragraph), paintOffsetAlignment, minWidth, maxWidth, this.textWidthBasis);
      if (adjustedMaxWidth == null && minWidth[$isFinite]) {
        if (!maxWidth[$isInfinite]) dart.assertFailed(null, I[11], 1095, 14, "maxWidth.isInfinite");
        let newInputWidth = newLayoutCache.layout.maxIntrinsicLineExtent;
        paragraph.layout(new ui.ParagraphConstraints.new({width: newInputWidth}));
        this[_inputWidth] = newInputWidth;
      }
      this[_layoutCache] = newLayoutCache;
    }
    paint(canvas, offset) {
      let t$3622;
      let layoutCache = this[_layoutCache];
      if (layoutCache == null) {
        dart.throw(new core.StateError.new("TextPainter.paint called when text geometry was not yet calculated.\nPlease call layout() before paint() to position the text before painting it."));
      }
      if (!layoutCache.paintOffset.dx[$isFinite] || !layoutCache.paintOffset.dy[$isFinite]) {
        return;
      }
      if (this[_rebuildParagraphForPaint]) {
        let debugSize = null;
        if (!dart.fn(() => {
          debugSize = this.size;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[11], 1130, 14, "() {\r\n        debugSize = size;\r\n        return true;\r\n      }()");
        let paragraph = layoutCache.paragraph;
        if (!!this[_inputWidth][$isNaN]) dart.assertFailed(null, I[11], 1139, 14, "!_inputWidth.isNaN");
        layoutCache.layout[_paragraph$] = (t$3622 = this[_createParagraph](dart.nullCheck(this.text)), (() => {
          t$3622.layout(new ui.ParagraphConstraints.new({width: this[_inputWidth]}));
          return t$3622;
        })());
        if (!(paragraph.width === layoutCache.layout[_paragraph$].width)) dart.assertFailed(null, I[11], 1141, 14, "paragraph.width == layoutCache.layout._paragraph.width");
        paragraph.dispose();
        if (!dart.equals(debugSize, this.size)) dart.assertFailed(null, I[11], 1143, 14, "debugSize == size");
      }
      if (!!this[_rebuildParagraphForPaint]) dart.assertFailed(null, I[11], 1145, 12, "!_rebuildParagraphForPaint");
      canvas.drawParagraph(layoutCache.paragraph, offset['+'](layoutCache.paintOffset));
    }
    static _isUTF16(value) {
      return value >= 0 && value <= 1048575;
    }
    static isHighSurrogate(value) {
      if (!text_painter.TextPainter._isUTF16(value)) dart.assertFailed(null, I[11], 1163, 12, "_isUTF16(value)");
      return (value & 64512) === 55296;
    }
    static isLowSurrogate(value) {
      if (!text_painter.TextPainter._isUTF16(value)) dart.assertFailed(null, I[11], 1176, 12, "_isUTF16(value)");
      return (value & 64512) === 56320;
    }
    static _isUnicodeDirectionality(value) {
      return value === 8207 || value === 8206;
    }
    getOffsetAfter(offset) {
      let nextCodeUnit = dart.nullCheck(this[_text$]).codeUnitAt(offset);
      if (nextCodeUnit == null) {
        return null;
      }
      return text_painter.TextPainter.isHighSurrogate(nextCodeUnit) ? offset + 2 : offset + 1;
    }
    getOffsetBefore(offset) {
      let prevCodeUnit = dart.nullCheck(this[_text$]).codeUnitAt(offset - 1);
      if (prevCodeUnit == null) {
        return null;
      }
      return text_painter.TextPainter.isLowSurrogate(prevCodeUnit) ? offset - 2 : offset - 1;
    }
    [_getMetricsFromUpstream](offset) {
      if (!(offset >= 0)) dart.assertFailed(null, I[11], 1216, 12, "offset >= 0");
      let plainTextLength = this.plainText.length;
      if (plainTextLength === 0 || offset > plainTextLength) {
        return null;
      }
      let prevCodeUnit = this.plainText[$codeUnitAt](math.max(core.int, 0, offset - 1));
      let needsSearch = text_painter.TextPainter.isHighSurrogate(prevCodeUnit) || text_painter.TextPainter.isLowSurrogate(prevCodeUnit) || dart.nullCheck(this[_text$]).codeUnitAt(offset) === 8205 || text_painter.TextPainter._isUnicodeDirectionality(prevCodeUnit);
      let graphemeClusterLength = needsSearch ? 2 : 1;
      let boxes = T.JSArrayOfTextBox().of([]);
      while (boxes[$isEmpty]) {
        let prevRuneOffset = offset - graphemeClusterLength;
        boxes = dart.nullCheck(this[_layoutCache]).paragraph.getBoxesForRange(math.max(core.int, 0, prevRuneOffset), offset, {boxHeightStyle: ui.BoxHeightStyle.strut});
        if (boxes[$isEmpty]) {
          if (!needsSearch && prevCodeUnit === 10) {
            break;
          }
          if (prevRuneOffset < -plainTextLength) {
            break;
          }
          graphemeClusterLength = graphemeClusterLength * 2;
          continue;
        }
        let box = boxes[$last].direction === ui.TextDirection.ltr ? boxes[$last] : boxes[$first];
        return prevCodeUnit === 10 ? new text_painter._EmptyLineCaretMetrics.new({lineVerticalOffset: box.bottom}) : new text_painter._LineCaretMetrics.new({offset: new ui.Offset.new(box.end, box.top), writingDirection: box.direction, fullHeight: box.bottom - box.top});
      }
      return null;
    }
    [_getMetricsFromDownstream](offset) {
      if (!(offset >= 0)) dart.assertFailed(null, I[11], 1268, 12, "offset >= 0");
      let plainTextLength = this.plainText.length;
      if (plainTextLength === 0) {
        return null;
      }
      let nextCodeUnit = this.plainText[$codeUnitAt](math.min(core.int, offset, plainTextLength - 1));
      let needsSearch = text_painter.TextPainter.isHighSurrogate(nextCodeUnit) || text_painter.TextPainter.isLowSurrogate(nextCodeUnit) || nextCodeUnit === 8205 || text_painter.TextPainter._isUnicodeDirectionality(nextCodeUnit);
      let graphemeClusterLength = needsSearch ? 2 : 1;
      let boxes = T.JSArrayOfTextBox().of([]);
      while (boxes[$isEmpty]) {
        let nextRuneOffset = offset + graphemeClusterLength;
        boxes = dart.nullCheck(this[_layoutCache]).paragraph.getBoxesForRange(offset, nextRuneOffset, {boxHeightStyle: ui.BoxHeightStyle.strut});
        if (boxes[$isEmpty]) {
          if (!needsSearch) {
            break;
          }
          if (nextRuneOffset >= plainTextLength << 1 >>> 0) {
            break;
          }
          graphemeClusterLength = graphemeClusterLength * 2;
          continue;
        }
        let box = boxes[$first].direction === ui.TextDirection.ltr ? boxes[$first] : boxes[$last];
        return new text_painter._LineCaretMetrics.new({offset: new ui.Offset.new(box.start, box.top), writingDirection: box.direction, fullHeight: box.bottom - box.top});
      }
      return null;
    }
    static _computePaintOffsetFraction(textAlign, textDirection) {
      return (() => {
        let t$3622 = null;
        let t$36$350$350 = dart.recordLiteral("2;", 2, void 0, [textAlign, textDirection]);
        let t$36$350$352 = C[25] || CT.C25;
        let t$36$350$351 = null;
        let t$36$350$351$35isSet = false;
        function t$36$350$351$35func() {
          return t$36$350$351$35isSet ? t$36$350$351 : (t$36$350$351$35isSet = true, t$36$350$351 = t$36$350$350.$1);
        }
        dart.fn(t$36$350$351$35func, T.VoidToTextAlign());
        let t$36$350$355 = C[26] || CT.C26;
        let t$36$350$357 = C[27] || CT.C27;
        let t$36$350$3510 = null;
        let t$36$350$3510$35isSet = false;
        let t$36$350$359 = C[23] || CT.C23;
        function t$36$350$3510$35func() {
          return t$36$350$3510$35isSet ? t$36$350$3510 : (t$36$350$3510$35isSet = true, t$36$350$3510 = t$36$350$359 === t$36$350$351$35func());
        }
        dart.fn(t$36$350$3510$35func, T.VoidTobool());
        let t$36$350$3512 = null;
        let t$36$350$3512$35isSet = false;
        let t$36$350$3511 = C[28] || CT.C28;
        let t$36$350$354 = null;
        let t$36$350$354$35isSet = false;
        function t$36$350$354$35func() {
          return t$36$350$354$35isSet ? t$36$350$354 : (t$36$350$354$35isSet = true, t$36$350$354 = t$36$350$350.$2);
        }
        dart.fn(t$36$350$354$35func, T.VoidToTextDirection());
        function t$36$350$3512$35func() {
          return t$36$350$3512$35isSet ? t$36$350$3512 : (t$36$350$3512$35isSet = true, t$36$350$3512 = t$36$350$3511 === t$36$350$354$35func());
        }
        dart.fn(t$36$350$3512$35func, T.VoidTobool());
        let t$36$350$3514 = null;
        let t$36$350$3514$35isSet = false;
        let t$36$350$3513 = C[29] || CT.C29;
        function t$36$350$3514$35func() {
          return t$36$350$3514$35isSet ? t$36$350$3514 : (t$36$350$3514$35isSet = true, t$36$350$3514 = t$36$350$3513 === t$36$350$354$35func());
        }
        dart.fn(t$36$350$3514$35func, T.VoidTobool());
        let t$36$350$3516 = null;
        let t$36$350$3516$35isSet = false;
        let t$36$350$3515 = C[30] || CT.C30;
        function t$36$350$3516$35func() {
          return t$36$350$3516$35isSet ? t$36$350$3516 : (t$36$350$3516$35isSet = true, t$36$350$3516 = t$36$350$3515 === t$36$350$351$35func());
        }
        dart.fn(t$36$350$3516$35func, T.VoidTobool());
        let t$36$350$3518 = null;
        let t$36$350$3518$35isSet = false;
        let t$36$350$3517 = C[31] || CT.C31;
        function t$36$350$3518$35func() {
          return t$36$350$3518$35isSet ? t$36$350$3518 : (t$36$350$3518$35isSet = true, t$36$350$3518 = t$36$350$3517 === t$36$350$351$35func());
        }
        dart.fn(t$36$350$3518$35func, T.VoidTobool());
        L3: {
          {
            if (t$36$350$352 === t$36$350$351$35func()) {
              t$3622 = 0.0;
              break L3;
            }
          }
          {
            if (t$36$350$355 === t$36$350$351$35func()) {
              t$3622 = 1.0;
              break L3;
            }
          }
          {
            if (t$36$350$357 === t$36$350$351$35func()) {
              t$3622 = 0.5;
              break L3;
            }
          }
          {
            if (t$36$350$3510$35func() && t$36$350$3512$35func()) {
              t$3622 = 0.0;
              break L3;
            }
          }
          {
            if (t$36$350$3510$35func() && t$36$350$3514$35func()) {
              t$3622 = 1.0;
              break L3;
            }
          }
          {
            if (t$36$350$3516$35func() && t$36$350$3512$35func()) {
              t$3622 = 0.0;
              break L3;
            }
          }
          {
            if (t$36$350$3516$35func() && t$36$350$3514$35func()) {
              t$3622 = 1.0;
              break L3;
            }
          }
          {
            if (t$36$350$3518$35func() && t$36$350$3512$35func()) {
              t$3622 = 1.0;
              break L3;
            }
          }
          {
            if (t$36$350$3518$35func() && t$36$350$3514$35func()) {
              t$3622 = 0.0;
              break L3;
            }
          }
        }
        return t$3622;
      })();
    }
    getOffsetForCaret(position, caretPrototype) {
      let caretMetrics = null;
      let layoutCache = dart.nullCheck(this[_layoutCache]);
      if (position.offset < 0) {
        caretMetrics = C[32] || CT.C32;
      } else {
        caretMetrics = this[_computeCaretMetrics](position);
      }
      let rawOffset = null;
      L4: {
        let t$36$350$350 = caretMetrics;
        let t$36$350$352 = null;
        let t$36$350$352$35isSet = false;
        function t$36$350$352$35func() {
          return t$36$350$352$35isSet ? t$36$350$352 : (t$36$350$352$35isSet = true, t$36$350$352 = text_painter._EmptyLineCaretMetrics.as(t$36$350$350).lineVerticalOffset);
        }
        dart.fn(t$36$350$352$35func, T.VoidTodouble());
        let t$36$350$355 = C[28] || CT.C28;
        let t$36$350$354 = null;
        let t$36$350$354$35isSet = false;
        function t$36$350$354$35func() {
          return t$36$350$354$35isSet ? t$36$350$354 : (t$36$350$354$35isSet = true, t$36$350$354 = text_painter._LineCaretMetrics.as(t$36$350$350).writingDirection);
        }
        dart.fn(t$36$350$354$35func, T.VoidToTextDirection());
        let t$36$350$357 = null;
        let t$36$350$357$35isSet = false;
        function t$36$350$357$35func() {
          return t$36$350$357$35isSet ? t$36$350$357 : (t$36$350$357$35isSet = true, t$36$350$357 = text_painter._LineCaretMetrics.as(t$36$350$350).offset);
        }
        dart.fn(t$36$350$357$35func, T.VoidToOffset());
        let t$36$350$358 = C[29] || CT.C29;
        {
          let lineVerticalOffset = null;
          if (text_painter._EmptyLineCaretMetrics.is(t$36$350$350) && typeof t$36$350$352$35func() == 'number' && (lineVerticalOffset = t$36$350$352$35func(), true)) {
            {
              let paintOffsetAlignment = text_painter.TextPainter._computePaintOffsetFraction(this.textAlign, dart.nullCheck(this.textDirection));
              let dx = paintOffsetAlignment === 0 ? 0.0 : paintOffsetAlignment * layoutCache.contentWidth;
              return new ui.Offset.new(dx, lineVerticalOffset);
            }
          }
        }
        {
          let offset = null;
          if (text_painter._LineCaretMetrics.is(t$36$350$350) && t$36$350$355 === t$36$350$354$35func() && ui.Offset.is(t$36$350$357$35func()) && (offset = t$36$350$357$35func(), true)) {
            {
              rawOffset = offset;
              break L4;
            }
          }
        }
        {
          let offset = null;
          if (text_painter._LineCaretMetrics.is(t$36$350$350) && t$36$350$358 === t$36$350$354$35func() && ui.Offset.is(t$36$350$357$35func()) && (offset = t$36$350$357$35func(), true)) {
            {
              rawOffset = new ui.Offset.new(offset.dx - caretPrototype.width, offset.dy);
            }
          }
        }
      }
      let adjustedDx = math$.clampDouble(rawOffset.dx + layoutCache.paintOffset.dx, 0.0, layoutCache.contentWidth);
      return new ui.Offset.new(adjustedDx, rawOffset.dy + layoutCache.paintOffset.dy);
    }
    getFullHeightForCaret(position, caretPrototype) {
      if (position.offset < 0) {
        return null;
      }
      return (() => {
        let t$3665 = null;
        let t$36$350$350 = this[_computeCaretMetrics](position);
        let t$36$350$352 = null;
        let t$36$350$352$35isSet = false;
        function t$36$350$352$35func() {
          return t$36$350$352$35isSet ? t$36$350$352 : (t$36$350$352$35isSet = true, t$36$350$352 = text_painter._LineCaretMetrics.as(t$36$350$350).fullHeight);
        }
        dart.fn(t$36$350$352$35func, T.VoidTodouble());
        L5: {
          {
            let fullHeight = null;
            if (text_painter._LineCaretMetrics.is(t$36$350$350) && typeof t$36$350$352$35func() == 'number' && (fullHeight = t$36$350$352$35func(), true)) {
              t$3665 = fullHeight;
              break L5;
            }
          }
          {
            if (text_painter._EmptyLineCaretMetrics.is(t$36$350$350)) {
              t$3665 = null;
              break L5;
            }
          }
        }
        return t$3665;
      })();
    }
    set [_caretMetrics](_caretMetrics$35param) {
      this[__TextPainter__caretMetrics] = _caretMetrics$35param;
    }
    get [_caretMetrics]() {
      let t$3670;
      t$3670 = this[__TextPainter__caretMetrics];
      return t$3670 == null ? dart.throw(new _internal.LateError.fieldNI("_caretMetrics")) : t$3670;
    }
    [_computeCaretMetrics](position) {
      let t$3671, t$3671$, t$3671$0;
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1387, 12, "_debugAssertTextLayoutIsValid");
      if (!!this[_debugNeedsRelayout]) dart.assertFailed(null, I[11], 1388, 12, "!_debugNeedsRelayout");
      let cachedLayout = dart.nullCheck(this[_layoutCache]);
      if (position._equals(cachedLayout[_previousCaretPosition])) {
        return this[_caretMetrics];
      }
      let offset = position.offset;
      let metrics = (() => {
        let t$3670 = null;
        switch (position.affinity) {
          case C[33] || CT.C33:
            {
              t$3670 = (t$3671 = this[_getMetricsFromUpstream](offset), t$3671 == null ? this[_getMetricsFromDownstream](offset) : t$3671);
              break;
            }
          case C[34] || CT.C34:
            {
              t$3670 = (t$3671$ = this[_getMetricsFromDownstream](offset), t$3671$ == null ? this[_getMetricsFromUpstream](offset) : t$3671$);
              break;
            }
        }
        return t$3670;
      })();
      cachedLayout[_previousCaretPosition] = position;
      return this[_caretMetrics] = (t$3671$0 = metrics, t$3671$0 == null ? C[32] || CT.C32 : t$3671$0);
    }
    getBoxesForSelection(selection, opts) {
      let boxHeightStyle = opts && 'boxHeightStyle' in opts ? opts.boxHeightStyle : C[35] || CT.C35;
      let boxWidthStyle = opts && 'boxWidthStyle' in opts ? opts.boxWidthStyle : C[36] || CT.C36;
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1426, 12, "_debugAssertTextLayoutIsValid");
      if (!selection.isValid) dart.assertFailed(null, I[11], 1427, 12, "selection.isValid");
      if (!!this[_debugNeedsRelayout]) dart.assertFailed(null, I[11], 1428, 12, "!_debugNeedsRelayout");
      let cachedLayout = dart.nullCheck(this[_layoutCache]);
      let offset = cachedLayout.paintOffset;
      if (!offset.dx[$isFinite] || !offset.dy[$isFinite]) {
        return T.JSArrayOfTextBox().of([]);
      }
      let boxes = cachedLayout.paragraph.getBoxesForRange(selection.start, selection.end, {boxHeightStyle: boxHeightStyle, boxWidthStyle: boxWidthStyle});
      return offset._equals(ui.Offset.zero) ? boxes : boxes[$map](ui.TextBox, dart.fn(box => text_painter.TextPainter._shiftTextBox(box, offset), T.TextBoxToTextBox()))[$toList]({growable: false});
    }
    getPositionForOffset(offset) {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1447, 12, "_debugAssertTextLayoutIsValid");
      if (!!this[_debugNeedsRelayout]) dart.assertFailed(null, I[11], 1448, 12, "!_debugNeedsRelayout");
      let cachedLayout = dart.nullCheck(this[_layoutCache]);
      return cachedLayout.paragraph.getPositionForOffset(offset['-'](cachedLayout.paintOffset));
    }
    getWordBoundary(position) {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1463, 12, "_debugAssertTextLayoutIsValid");
      return dart.nullCheck(this[_layoutCache]).paragraph.getWordBoundary(position);
    }
    get wordBoundaries() {
      return new text_painter.WordBoundary.__(dart.nullCheck(this.text), dart.nullCheck(this[_layoutCache]).paragraph);
    }
    getLineBoundary(position) {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1483, 12, "_debugAssertTextLayoutIsValid");
      return dart.nullCheck(this[_layoutCache]).paragraph.getLineBoundary(position);
    }
    static _shiftLineMetrics(metrics, offset) {
      if (!offset.dx[$isFinite]) dart.assertFailed(null, I[11], 1488, 12, "offset.dx.isFinite");
      if (!offset.dy[$isFinite]) dart.assertFailed(null, I[11], 1489, 12, "offset.dy.isFinite");
      return ui.LineMetrics.new({hardBreak: metrics.hardBreak, ascent: metrics.ascent, descent: metrics.descent, unscaledAscent: metrics.unscaledAscent, height: metrics.height, width: metrics.width, left: metrics.left + offset.dx, baseline: metrics.baseline + offset.dy, lineNumber: metrics.lineNumber});
    }
    static _shiftTextBox(box, offset) {
      if (!offset.dx[$isFinite]) dart.assertFailed(null, I[11], 1504, 12, "offset.dx.isFinite");
      if (!offset.dy[$isFinite]) dart.assertFailed(null, I[11], 1505, 12, "offset.dy.isFinite");
      return new ui.TextBox.fromLTRBD(box.left + offset.dx, box.top + offset.dy, box.right + offset.dx, box.bottom + offset.dy, box.direction);
    }
    computeLineMetrics() {
      if (!this[_debugAssertTextLayoutIsValid]) dart.assertFailed(null, I[11], 1527, 12, "_debugAssertTextLayoutIsValid");
      if (!!this[_debugNeedsRelayout]) dart.assertFailed(null, I[11], 1528, 12, "!_debugNeedsRelayout");
      let layout = dart.nullCheck(this[_layoutCache]);
      let offset = layout.paintOffset;
      if (!offset.dx[$isFinite] || !offset.dy[$isFinite]) {
        return C[37] || CT.C37;
      }
      let rawMetrics = layout.lineMetrics;
      return offset._equals(ui.Offset.zero) ? rawMetrics : rawMetrics[$map](ui.LineMetrics, dart.fn(metrics => text_painter.TextPainter._shiftLineMetrics(metrics, offset), T.LineMetricsToLineMetrics()))[$toList]({growable: false});
    }
    get debugDisposed() {
      let t$3671;
      let disposed = null;
      if (!dart.fn(() => {
        disposed = this[_disposed];
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[11], 1547, 12, "() {\r\n      disposed = _disposed;\r\n      return true;\r\n    }()");
      t$3671 = disposed;
      return t$3671 == null ? dart.throw(new core.StateError.new("debugDisposed only available when asserts are on.")) : t$3671;
    }
    dispose() {
      let t$3671, t$3671$;
      if (!dart.fn(() => {
        this[_disposed] = true;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[11], 1558, 12, "() {\r\n      _disposed = true;\r\n      return true;\r\n    }()");
      t$3671 = this[_layoutTemplate];
      t$3671 == null ? null : t$3671.dispose();
      this[_layoutTemplate] = null;
      t$3671$ = this[_layoutCache];
      t$3671$ == null ? null : t$3671$.paragraph.dispose();
      this[_layoutCache] = null;
      this[_text$] = null;
    }
  };
  (text_painter.TextPainter.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[23] || CT.C23;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[18] || CT.C18;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    this[_debugNeedsRelayout] = true;
    this[_layoutCache] = null;
    this[_rebuildParagraphForPaint] = true;
    this[_inputWidth] = 0 / 0;
    this[_debugMarkNeedsLayoutCallStack] = null;
    this[_cachedPlainText] = null;
    this[_placeholderDimensions] = null;
    this[_layoutTemplate] = null;
    this[__TextPainter__caretMetrics] = null;
    this[_disposed] = false;
    if (!(text == null || text.debugAssertIsValid())) dart.assertFailed(null, I[11], 500, 15, "text == null || text.debugAssertIsValid()");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[11], 501, 15, "maxLines == null || maxLines > 0");
    this[_text$] = text;
    this[_textAlign] = textAlign;
    this[_textDirection] = textDirection;
    this[_textScaleFactor] = textScaleFactor;
    this[_maxLines] = maxLines;
    this[_ellipsis] = ellipsis;
    this[_locale] = locale;
    this[_strutStyle] = strutStyle;
    this[_textWidthBasis] = textWidthBasis;
    this[_textHeightBehavior] = textHeightBehavior;
    ;
  }).prototype = text_painter.TextPainter.prototype;
  dart.addTypeTests(text_painter.TextPainter);
  dart.addTypeCaches(text_painter.TextPainter);
  dart.setMethodSignature(text_painter.TextPainter, () => dart.global.Object.setPrototypeOf({
    markNeedsLayout: dart.fnType(dart.void, []),
    setPlaceholderDimensions: dart.fnType(dart.void, [dart.nullable(core.List$(text_painter.PlaceholderDimensions))]),
    [_createParagraphStyle]: dart.fnType(ui.ParagraphStyle, [], [dart.nullable(ui.TextDirection)]),
    [_createLayoutTemplate]: dart.fnType(ui.Paragraph, []),
    computeDistanceToActualBaseline: dart.fnType(core.double, [ui.TextBaseline]),
    [_createParagraph]: dart.fnType(ui.Paragraph, [inline_span.InlineSpan]),
    layout: dart.fnType(dart.void, [], {maxWidth: core.double, minWidth: core.double}, {}),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Offset]),
    getOffsetAfter: dart.fnType(dart.nullable(core.int), [core.int]),
    getOffsetBefore: dart.fnType(dart.nullable(core.int), [core.int]),
    [_getMetricsFromUpstream]: dart.fnType(dart.nullable(text_painter._CaretMetrics), [core.int]),
    [_getMetricsFromDownstream]: dart.fnType(dart.nullable(text_painter._CaretMetrics), [core.int]),
    getOffsetForCaret: dart.fnType(ui.Offset, [ui.TextPosition, ui.Rect]),
    getFullHeightForCaret: dart.fnType(dart.nullable(core.double), [ui.TextPosition, ui.Rect]),
    [_computeCaretMetrics]: dart.fnType(text_painter._CaretMetrics, [ui.TextPosition]),
    getBoxesForSelection: dart.fnType(core.List$(ui.TextBox), [text_editing.TextSelection], {boxHeightStyle: ui.BoxHeightStyle, boxWidthStyle: ui.BoxWidthStyle}, {}),
    getPositionForOffset: dart.fnType(ui.TextPosition, [ui.Offset]),
    getWordBoundary: dart.fnType(ui.TextRange, [ui.TextPosition]),
    getLineBoundary: dart.fnType(ui.TextRange, [ui.TextPosition]),
    computeLineMetrics: dart.fnType(core.List$(ui.LineMetrics), []),
    dispose: dart.fnType(dart.void, [])
  }, dart.getMethods(dart.global.Object.getPrototypeOf(text_painter.TextPainter))));
  dart.setStaticMethodSignature(text_painter.TextPainter, () => ['computeWidth', 'computeMaxIntrinsicWidth', '_isUTF16', 'isHighSurrogate', 'isLowSurrogate', '_isUnicodeDirectionality', '_computePaintOffsetFraction', '_shiftLineMetrics', '_shiftTextBox']);
  dart.setGetterSignature(text_painter.TextPainter, () => dart.global.Object.setPrototypeOf({
    [_debugAssertTextLayoutIsValid]: core.bool,
    text: dart.nullable(inline_span.InlineSpan),
    plainText: core.String,
    textAlign: ui.TextAlign,
    textDirection: dart.nullable(ui.TextDirection),
    textScaleFactor: core.double,
    ellipsis: dart.nullable(core.String),
    locale: dart.nullable(ui.Locale),
    maxLines: dart.nullable(core.int),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    textWidthBasis: text_painter.TextWidthBasis,
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    inlinePlaceholderBoxes: dart.nullable(core.List$(ui.TextBox)),
    preferredLineHeight: core.double,
    minIntrinsicWidth: core.double,
    maxIntrinsicWidth: core.double,
    width: core.double,
    height: core.double,
    size: ui.Size,
    didExceedMaxLines: core.bool,
    [_caretMetrics]: text_painter._CaretMetrics,
    wordBoundaries: text_painter.WordBoundary,
    debugDisposed: core.bool
  }, dart.getGetters(dart.global.Object.getPrototypeOf(text_painter.TextPainter))));
  dart.setSetterSignature(text_painter.TextPainter, () => dart.global.Object.setPrototypeOf({
    text: dart.nullable(inline_span.InlineSpan),
    textAlign: ui.TextAlign,
    textDirection: dart.nullable(ui.TextDirection),
    textScaleFactor: core.double,
    ellipsis: dart.nullable(core.String),
    locale: dart.nullable(ui.Locale),
    maxLines: dart.nullable(core.int),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    textWidthBasis: text_painter.TextWidthBasis,
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    [_caretMetrics]: text_painter._CaretMetrics
  }, dart.getSetters(dart.global.Object.getPrototypeOf(text_painter.TextPainter))));
  dart.setLibraryUri(text_painter.TextPainter, I[10]);
  dart.setFieldSignature(text_painter.TextPainter, () => dart.global.Object.setPrototypeOf({
    [_debugNeedsRelayout]: dart.fieldType(core.bool),
    [_layoutCache]: dart.fieldType(dart.nullable(text_painter._TextPainterLayoutCacheWithOffset)),
    [_rebuildParagraphForPaint]: dart.fieldType(core.bool),
    [_inputWidth]: dart.fieldType(core.double),
    [_debugMarkNeedsLayoutCallStack]: dart.fieldType(dart.nullable(core.StackTrace)),
    [_text$]: dart.fieldType(dart.nullable(inline_span.InlineSpan)),
    [_cachedPlainText]: dart.fieldType(dart.nullable(core.String)),
    [_textAlign]: dart.fieldType(ui.TextAlign),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_textScaleFactor]: dart.fieldType(core.double),
    [_ellipsis]: dart.fieldType(dart.nullable(core.String)),
    [_locale]: dart.fieldType(dart.nullable(ui.Locale)),
    [_maxLines]: dart.fieldType(dart.nullable(core.int)),
    [_strutStyle]: dart.fieldType(dart.nullable(strut_style.StrutStyle)),
    [_textWidthBasis]: dart.fieldType(text_painter.TextWidthBasis),
    [_textHeightBehavior]: dart.fieldType(dart.nullable(ui.TextHeightBehavior)),
    [_placeholderDimensions]: dart.fieldType(dart.nullable(core.List$(text_painter.PlaceholderDimensions))),
    [_layoutTemplate]: dart.fieldType(dart.nullable(ui.Paragraph)),
    [__TextPainter__caretMetrics]: dart.fieldType(dart.nullable(text_painter._CaretMetrics)),
    [_disposed]: dart.fieldType(core.bool)
  }, dart.getFields(dart.global.Object.getPrototypeOf(text_painter.TextPainter))));
  dart.setStaticFieldSignature(text_painter.TextPainter, () => ['_zwjUtf16']);
  dart.defineLazy(text_painter.TextPainter, {
    /*text_painter.TextPainter._zwjUtf16*/get _zwjUtf16() {
      return 8205;
    }
  }, false);
  dart.defineLazy(text_painter, {
    /*text_painter._kDefaultFontSize*/get _kDefaultFontSize() {
      return 14;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/painting/placeholder_span.dart", {
    "package:flutter/src/painting/placeholder_span.dart": placeholder_span,
    "package:flutter/src/painting/strut_style.dart": strut_style,
    "package:flutter/src/painting/text_style.dart": text_style,
    "package:flutter/src/painting/text_span.dart": text_span,
    "package:flutter/src/painting/inline_span.dart": inline_span,
    "package:flutter/src/painting/text_painter.dart": text_painter
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["inline_span.dart","placeholder_span.dart","strut_style.dart","text_style.dart","text_span.dart","text_painter.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/placeholder_span.dart.lib.js"}');
  // Exports:
  return {
    src__painting__placeholder_span: placeholder_span,
    src__painting__strut_style: strut_style,
    src__painting__text_style: text_style,
    src__painting__text_span: text_span,
    src__painting__inline_span: inline_span,
    src__painting__text_painter: text_painter
  };
}));

//# sourceMappingURL=placeholder_span.dart.lib.js.map
