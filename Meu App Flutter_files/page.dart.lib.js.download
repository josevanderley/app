// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.1.3 (stable) (Tue Sep 26 14:25:13 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/material/page.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/widgets/unique_widget.dart', 'packages/flutter/src/material/time.dart'], (function load__packages__flutter__src__material__page_dart(dart_sdk, packages__flutter__src__widgets__unique_widget$46dart, packages__flutter__src__material__time$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const pages = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__pages;
  const route = packages__flutter__src__widgets__unique_widget$46dart.src__cupertino__route;
  const basic = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__framework;
  const animation = packages__flutter__src__widgets__unique_widget$46dart.src__animation__animation;
  const navigator = packages__flutter__src__widgets__unique_widget$46dart.src__widgets__navigator;
  const theme$ = packages__flutter__src__material__time$46dart.src__material__theme;
  var page$ = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [Duration__duration]: 300000
      }, core.Duration.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Location_name]: "Semantics",
        [_Location_column]: 12,
        [_Location_line]: 110,
        [_Location_file]: "file:///C:/Dev/flutter/packages/flutter/lib/src/material/page.dart"
      }, widget_inspector._Location.prototype));
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "file:///C:/Dev/flutter/packages/flutter/lib/src/material/page.dart",
    "package:flutter/src/material/page.dart"
  ];
  var builder$ = dart.privateName(page$, "MaterialPageRoute.builder");
  var maintainState$ = dart.privateName(page$, "MaterialPageRoute.maintainState");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const _is_MaterialRouteTransitionMixin_default = Symbol('_is_MaterialRouteTransitionMixin_default');
  page$.MaterialRouteTransitionMixin$ = dart.generic(T => {
    class MaterialRouteTransitionMixin extends pages.PageRoute$(T) {}
    MaterialRouteTransitionMixin[dart.mixinOn] = PageRoute => class MaterialRouteTransitionMixin extends PageRoute {
      get transitionDuration() {
        return C[0] || CT.C0;
      }
      get barrierColor() {
        return null;
      }
      get barrierLabel() {
        return null;
      }
      canTransitionTo(nextRoute) {
        return page$.MaterialRouteTransitionMixin.is(nextRoute) && !nextRoute.fullscreenDialog || route.CupertinoRouteTransitionMixin.is(nextRoute) && !nextRoute.fullscreenDialog;
      }
      buildPage(context, animation, secondaryAnimation) {
        let result = this.buildContent(context);
        return new basic.Semantics.new({scopesRoute: true, explicitChildNodes: true, child: result, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
      }
      buildTransitions(context, animation, secondaryAnimation, child) {
        let theme = theme$.Theme.of(context).pageTransitionsTheme;
        return theme.buildTransitions(T, this, context, animation, secondaryAnimation, child);
      }
    };
    dart.addTypeTests(MaterialRouteTransitionMixin);
    MaterialRouteTransitionMixin.prototype[_is_MaterialRouteTransitionMixin_default] = true;
    dart.addTypeCaches(MaterialRouteTransitionMixin);
    MaterialRouteTransitionMixin[dart.implements] = () => [pages.PageRoute$(T)];
    dart.setMethodSignature(MaterialRouteTransitionMixin, () => dart.global.Object.setPrototypeOf({buildPage: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])}, dart.getMethods(dart.global.Object.getPrototypeOf(MaterialRouteTransitionMixin))));
    dart.setGetterSignature(MaterialRouteTransitionMixin, () => dart.global.Object.setPrototypeOf({
      transitionDuration: core.Duration,
      barrierColor: dart.nullable(ui.Color),
      barrierLabel: dart.nullable(core.String)
    }, dart.getGetters(dart.global.Object.getPrototypeOf(MaterialRouteTransitionMixin))));
    dart.setLibraryUri(MaterialRouteTransitionMixin, I[1]);
    return MaterialRouteTransitionMixin;
  });
  page$.MaterialRouteTransitionMixin = page$.MaterialRouteTransitionMixin$();
  dart.addTypeTests(page$.MaterialRouteTransitionMixin, _is_MaterialRouteTransitionMixin_default);
  const _is_MaterialPageRoute_default = Symbol('_is_MaterialPageRoute_default');
  page$.MaterialPageRoute$ = dart.generic(T => {
    const PageRoute_MaterialRouteTransitionMixin$36 = class PageRoute_MaterialRouteTransitionMixin extends pages.PageRoute$(T) {};
    (PageRoute_MaterialRouteTransitionMixin$36.new = function(opts) {
      dart.global.Object.getPrototypeOf(PageRoute_MaterialRouteTransitionMixin$36).new.call(this, opts);
    }).prototype = PageRoute_MaterialRouteTransitionMixin$36.prototype;
    dart.applyMixin(PageRoute_MaterialRouteTransitionMixin$36, page$.MaterialRouteTransitionMixin$(T));
    class MaterialPageRoute extends PageRoute_MaterialRouteTransitionMixin$36 {
      get builder() {
        return this[builder$];
      }
      set builder(value) {
        super.builder = value;
      }
      get maintainState() {
        return this[maintainState$];
      }
      set maintainState(value) {
        super.maintainState = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let settings = opts && 'settings' in opts ? opts.settings : null;
        let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
        let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : null;
        let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : null;
        return new (page$.MaterialPageRoute$(T)).new({builder: builder, settings: settings, maintainState: maintainState, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting});
      }
      buildContent(context) {
        let t$360;
        t$360 = context;
        return this.builder(t$360);
      }
      get debugLabel() {
        return super.debugLabel + "(" + dart.str(this.settings.name) + ")";
      }
    }
    (MaterialPageRoute.new = function(opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : true;
      this[builder$] = builder;
      this[maintainState$] = maintainState;
      dart.global.Object.getPrototypeOf(MaterialPageRoute).new.call(this, {settings: settings, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting});
      if (!this.opaque) dart.assertFailed(null, I[0], 44, 12, "opaque");
    }).prototype = MaterialPageRoute.prototype;
    dart.addTypeTests(MaterialPageRoute);
    MaterialPageRoute.prototype[_is_MaterialPageRoute_default] = true;
    dart.addTypeCaches(MaterialPageRoute);
    dart.setMethodSignature(MaterialPageRoute, () => dart.global.Object.setPrototypeOf({buildContent: dart.fnType(framework.Widget, [framework.BuildContext])}, dart.getMethods(dart.global.Object.getPrototypeOf(MaterialPageRoute))));
    dart.setLibraryUri(MaterialPageRoute, I[1]);
    dart.setFieldSignature(MaterialPageRoute, () => dart.global.Object.setPrototypeOf({
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext])),
      maintainState: dart.finalFieldType(core.bool)
    }, dart.getFields(dart.global.Object.getPrototypeOf(MaterialPageRoute))));
    return MaterialPageRoute;
  });
  page$.MaterialPageRoute = page$.MaterialPageRoute$();
  dart.addTypeTests(page$.MaterialPageRoute, _is_MaterialPageRoute_default);
  var child$ = dart.privateName(page$, "MaterialPage.child");
  var maintainState$0 = dart.privateName(page$, "MaterialPage.maintainState");
  var fullscreenDialog$ = dart.privateName(page$, "MaterialPage.fullscreenDialog");
  var allowSnapshotting$ = dart.privateName(page$, "MaterialPage.allowSnapshotting");
  const _is_MaterialPage_default = Symbol('_is_MaterialPage_default');
  page$.MaterialPage$ = dart.generic(T => {
    var __t$_PageBasedMaterialPageRouteOfT = () => (__t$_PageBasedMaterialPageRouteOfT = dart.constFn(page$._PageBasedMaterialPageRoute$(T)))();
    class MaterialPage extends navigator.Page$(T) {
      get child() {
        return this[child$];
      }
      set child(value) {
        super.child = value;
      }
      get maintainState() {
        return this[maintainState$0];
      }
      set maintainState(value) {
        super.maintainState = value;
      }
      get fullscreenDialog() {
        return this[fullscreenDialog$];
      }
      set fullscreenDialog(value) {
        super.fullscreenDialog = value;
      }
      get allowSnapshotting() {
        return this[allowSnapshotting$];
      }
      set allowSnapshotting(value) {
        super.allowSnapshotting = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let child = opts && 'child' in opts ? opts.child : null;
        let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
        let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
        let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : true;
        let key = opts && 'key' in opts ? opts.key : null;
        let name = opts && 'name' in opts ? opts.name : null;
        let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
        let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
        return new (page$.MaterialPage$(T)).new({child: child, maintainState: maintainState, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting, key: key, name: name, arguments: $arguments, restorationId: restorationId});
      }
      createRoute(context) {
        return new (__t$_PageBasedMaterialPageRouteOfT()).new({page: this, allowSnapshotting: this.allowSnapshotting});
      }
    }
    (MaterialPage.new = function(opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : true;
      let key = opts && 'key' in opts ? opts.key : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      this[child$] = child;
      this[maintainState$0] = maintainState;
      this[fullscreenDialog$] = fullscreenDialog;
      this[allowSnapshotting$] = allowSnapshotting;
      dart.global.Object.getPrototypeOf(MaterialPage).new.call(this, {key: key, name: name, arguments: $arguments, restorationId: restorationId});
      ;
    }).prototype = MaterialPage.prototype;
    dart.addTypeTests(MaterialPage);
    MaterialPage.prototype[_is_MaterialPage_default] = true;
    dart.addTypeCaches(MaterialPage);
    dart.setMethodSignature(MaterialPage, () => dart.global.Object.setPrototypeOf({createRoute: dart.fnType(navigator.Route$(T), [framework.BuildContext])}, dart.getMethods(dart.global.Object.getPrototypeOf(MaterialPage))));
    dart.setLibraryUri(MaterialPage, I[1]);
    dart.setFieldSignature(MaterialPage, () => dart.global.Object.setPrototypeOf({
      child: dart.finalFieldType(framework.Widget),
      maintainState: dart.finalFieldType(core.bool),
      fullscreenDialog: dart.finalFieldType(core.bool),
      allowSnapshotting: dart.finalFieldType(core.bool)
    }, dart.getFields(dart.global.Object.getPrototypeOf(MaterialPage))));
    return MaterialPage;
  });
  page$.MaterialPage = page$.MaterialPage$();
  dart.addTypeTests(page$.MaterialPage, _is_MaterialPage_default);
  var _page = dart.privateName(page$, "_page");
  const _is__PageBasedMaterialPageRoute_default = Symbol('_is__PageBasedMaterialPageRoute_default');
  page$._PageBasedMaterialPageRoute$ = dart.generic(T => {
    var __t$MaterialPageOfT = () => (__t$MaterialPageOfT = dart.constFn(page$.MaterialPage$(T)))();
    const PageRoute_MaterialRouteTransitionMixin$36 = class PageRoute_MaterialRouteTransitionMixin extends pages.PageRoute$(T) {};
    (PageRoute_MaterialRouteTransitionMixin$36.new = function(opts) {
      dart.global.Object.getPrototypeOf(PageRoute_MaterialRouteTransitionMixin$36).new.call(this, opts);
    }).prototype = PageRoute_MaterialRouteTransitionMixin$36.prototype;
    dart.applyMixin(PageRoute_MaterialRouteTransitionMixin$36, page$.MaterialRouteTransitionMixin$(T));
    class _PageBasedMaterialPageRoute extends PageRoute_MaterialRouteTransitionMixin$36 {
      static ['_#new#tearOff'](T, opts) {
        let page = opts && 'page' in opts ? opts.page : null;
        let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : null;
        return new (page$._PageBasedMaterialPageRoute$(T)).new({page: page, allowSnapshotting: allowSnapshotting});
      }
      get [_page]() {
        return __t$MaterialPageOfT().as(this.settings);
      }
      buildContent(context) {
        return this[_page].child;
      }
      get maintainState() {
        return this[_page].maintainState;
      }
      get fullscreenDialog() {
        return this[_page].fullscreenDialog;
      }
      get debugLabel() {
        return super.debugLabel + "(" + dart.str(this[_page].name) + ")";
      }
    }
    (_PageBasedMaterialPageRoute.new = function(opts) {
      let page = opts && 'page' in opts ? opts.page : null;
      let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : true;
      dart.global.Object.getPrototypeOf(_PageBasedMaterialPageRoute).new.call(this, {settings: page, allowSnapshotting: allowSnapshotting});
      if (!this.opaque) dart.assertFailed(null, I[0], 184, 12, "opaque");
    }).prototype = _PageBasedMaterialPageRoute.prototype;
    dart.addTypeTests(_PageBasedMaterialPageRoute);
    _PageBasedMaterialPageRoute.prototype[_is__PageBasedMaterialPageRoute_default] = true;
    dart.addTypeCaches(_PageBasedMaterialPageRoute);
    dart.setMethodSignature(_PageBasedMaterialPageRoute, () => dart.global.Object.setPrototypeOf({buildContent: dart.fnType(framework.Widget, [framework.BuildContext])}, dart.getMethods(dart.global.Object.getPrototypeOf(_PageBasedMaterialPageRoute))));
    dart.setGetterSignature(_PageBasedMaterialPageRoute, () => dart.global.Object.setPrototypeOf({
      [_page]: page$.MaterialPage$(T),
      maintainState: core.bool,
      fullscreenDialog: core.bool
    }, dart.getGetters(dart.global.Object.getPrototypeOf(_PageBasedMaterialPageRoute))));
    dart.setLibraryUri(_PageBasedMaterialPageRoute, I[1]);
    return _PageBasedMaterialPageRoute;
  });
  page$._PageBasedMaterialPageRoute = page$._PageBasedMaterialPageRoute$();
  dart.addTypeTests(page$._PageBasedMaterialPageRoute, _is__PageBasedMaterialPageRoute_default);
  dart.trackLibraries("packages/flutter/src/material/page.dart", {
    "package:flutter/src/material/page.dart": page$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["page.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFqC;MAAiC;;AAGzC;MAAI;;AAGH;MAAI;sBAGc;AAE5C,cAAkB,AAChB,uCADM,SAAS,MAAqC,AAAU,SAAD,qBAC/C,uCAAV,SAAS,MAAsC,AAAU,SAAD;MAChE;gBAIe,SACK,WACA;AAEL,qBAAS,kBAAa,OAAO;AAC1C,cAAO,uCACQ,0BACO,aACb,MAAM;MAEjB;uBAGqC,SAA2B,WAA6B,oBAA2B;AAC3F,oBAAc,AAAY,gBAAT,OAAO;AACnD,cAAO,AAAM,MAAD,qBAAqB,MAAM,OAAO,EAAE,SAAS,EAAE,kBAAkB,EAAE,KAAK;MACtF;;;;;;;;;;;;;;;;;;;;;;;;;MAzEoB;;;;;;MAMT;;;;;;;;;;;;;;mBAHsB;;AAAY,gBAAQ,OAAO;cAAf,AAAO;MAAS;;AAMpC,cAAS,AAA8B,oBAAnB,eAAG,AAAS,sBAAK;MAAE;;;UAnBhD;UACR;UACD;UACC;UACA;MAJQ;MAET;AAHP,qFAEQ,QAAQ,oBAER,gBAAgB,qBAChB,iBAAiB;AAEvB,WAAO;IACT;;;;;;;;;;;;;;;;;;;;;;MAiHa;;;;;;MAGF;;;;;;MAGA;;;;;;MAGA;;;;;;;;;;;;;;;;;kBAGuB;AAChC,cAAO,uDAAqC,yBAAyB;MACvE;;;UAzBgB;UACT;UACA;UACA;UACC;UACA;UACA;UACA;MAPQ;MACT;MACA;MACA;AAJD,2EAKE,GAAG,QACH,IAAI,aACJ,2BACA,aAAa;;IACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgC2B,cAAS,0BAAT;MAA2B;mBAGvB;AAC/B,cAAO,AAAM;MACf;;AAG0B,cAAA,AAAM;MAAa;;AAGhB,cAAA,AAAM;MAAgB;;AAG1B,cAAS,AAA2B,oBAAhB,eAAG,AAAM,oBAAK;MAAE;;;UApBlC;UACnB;AACH,+FAAgB,IAAI,qBADjB,iBAAiB;AAEvB,WAAO;IACT","file":"../../../../../../../packages/flutter/src/material/page.dart.lib.js"}');
  // Exports:
  return {
    src__material__page: page$
  };
}));

//# sourceMappingURL=page.dart.lib.js.map
